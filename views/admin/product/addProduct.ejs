<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product - WoodLand Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/admin/css/dashboard.css">
    <link rel="stylesheet" href="/admin/css/productAdd.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
</head>
<body>
    <%- include('../partials/admin/header') %>
    <%- include('../partials/admin/sidebar') %>

    <div class="toast-container" id="toastContainer"></div>
    <div class="spinner-overlay" id="spinnerOverlay">
        <div class="spinner"></div>
    </div>

    <main class="main-content" id="main-content">
        <div class="content-wrapper">
            <div class="page-header mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="page-title">Add New Product</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">                                       
                                <li class="breadcrumb-item"><a href='/admin/dashboard'>Dashboard</a></li>
                                <li class="breadcrumb-item"><a href='/admin/products'>Products</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Add</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>
            
            <div class="page-content">
                <div class="main-product-section">
                    <h4 class="mb-4">Main Product Information</h4>
                    <form id="productForm" enctype="multipart/form-data">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="productName" name="name" >
                                <div class="field-error" id="productName-error"></div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label for="category" class="form-label">Category <span class="text-danger">*</span></label>
                                <select class="form-select" id="category" name="category" >
                                    <option value="">Select Category</option>
                                    <% if (categories && Array.isArray(categories)) { %>
                                        <% categories.forEach(cat => { %>
                                            <option value="<%= cat._id %>"><%= cat.name %></option>
                                        <% }) %>
                                    <% } else { %>
                                        <option value="" disabled>No categories available</option>
                                    <% } %>
                                </select>
                                <div class="field-error" id="category-error"></div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label for="brand" class="form-label">Brand <span class="text-danger">*</span></label>
                                <select class="form-select" id="brand" name="brand" >
                                    <option value="">Select Brand</option>
                                    <% if (brands && Array.isArray(brands)) { %>
                                        <% brands.forEach(brand => { %>
                                            <option value="<%= brand._id %>"><%= brand.name %></option>
                                        <% }) %>
                                    <% } else { %>
                                        <option value="" disabled>No brands available</option>
                                    <% } %>
                                </select>
                                <div class="field-error" id="brand-error"></div>
                            </div>
                            
                            <div class="col-12 mb-3">
                                <label for="description" class="form-label">Description <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="description" name="description" rows="4" ></textarea>
                                <div class="field-error" id="description-error"></div>
                            </div>
                            
                            <div class="col-12">
                                <h4 class="mb-4">Variant Information</h4>
                                <h5>Variant 1</h5>
                                <div class="variant-container" id="variant1">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="variantQuantity1" class="form-label">Quantity <span class="text-danger">*</span></label>
                                            <input type="number" class="form-control" id="variantQuantity1" name="variants[0][quantity]" min="0" >
                                            <div class="field-error" id="variantQuantity1-error"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantRegularPrice1" class="form-label">Regular Price <span class="text-danger">*</span></label>
                                            <div class="input-group">
                                                <span class="input-group-text">â‚¹</span>
                                                <input type="number" class="form-control" id="variantRegularPrice1" name="variants[0][regularPrice]" step="0.01" min="0" >
                                            </div>
                                            <div class="field-error" id="variantRegularPrice1-error"></div>
                                        </div>
                                        
                                        <div class="col-md-6 mb-3">
                                            <label for="variantManufacturingDate1" class="form-label">Manufacturing Date <span class="text-danger">*</span></label>
                                            <input type="date" class="form-control" id="variantManufacturingDate1" name="variants[0][manufacturingDate]" >
                                            <div class="field-error" id="variantManufacturingDate1-error"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantExpiryDate1" class="form-label">Expiry Date</label>
                                           <input type="date" class="form-control" id="variantExpiryDate1" name="variants[0][expiryDate]">
                                            <div class="field-error" id="variantExpiryDate1-error"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantUom1" class="form-label">Unit of Measure (UOM) <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="variantUom1" name="variants[0][uom]" >
                                            <div class="field-error" id="variantUom1-error"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                           
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantPrescriptionRequired1" class="form-label">Prescription Required</label>
                                            <div class="status-toggle">
                                                <input type="checkbox" id="variantPrescriptionRequired1">
                                                <input type="hidden" name="variants[0][prescriptionRequired]" id="variantPrescriptionRequiredValue1" value="false">
                                                <span>Inactive</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantProductStatus1" class="form-label">Product Status <span class="text-danger">*</span></label>
                                            <div class="status-toggle">
                                                <input type="checkbox" id="variantProductStatus1" checked>
                                                <input type="hidden" name="variants[0][isListed]" id="variantProductStatusValue1" value="true">
                                                <span>Listed</span>
                                            </div>
                                            <div class="field-error" id="variantProductStatus1-error"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantDiscountStatus1" class="form-label">Discount Status</label>
                                            <div class="status-toggle">
                                                <input type="checkbox" id="variantDiscountStatus1">
                                                <input type="hidden" name="variants[0][discountStatus]" id="variantDiscountStatusValue1" value="false">
                                                <span>Inactive</span>
                                            </div>
                                            <div class="field-error" id="variantDiscountStatus1-error"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="variantOfferStatus1" class="form-label">Offer Status</label>
                                            <div class="status-toggle">
                                                <input type="checkbox" id="variantOfferStatus1">
                                                <input type="hidden" name="variants[0][offerStatus]" id="variantOfferStatusValue1" value="false">
                                                <span>Inactive</span>                        
                                            </div>
                                            <div class="field-error" id="variantOfferStatus1-error"></div>
                                        </div>
                                        <div class="col-12 mb-4">
                                            <div class="attribute-group">
                                                <h6 class="mb-3">Variant Attributes <span class="text-danger">*</span></h6>
                                                <div class="row" id="variantAttributeContainer1">
                                                    <p class="text-muted">Please select a category to view attributes.</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12 mb-4">
                                            <label class="form-label">Upload Variant Images (3-6 images) <span class="text-danger">*</span></label>
                                            <div class="image-upload-container">
                                                <div class="image-upload-area" id="variantImageUploadArea1">
                                                    <i class="fas fa-cloud-upload-alt"></i>
                                                    <p>Drop image here to upload and crop (Min: 3 crops required)</p>
                                                    <p class="text-muted">or click to browse</p> 
                                                    <input type="file" id="variantImageInput1" name="variants[0][variant_0_images]" accept="image/jpeg,image/png,image/gif" hidden data-variant-index="0" >
                                                </div>
                                                <div class="uploaded-images" id="variantUploadedImages1"></div>
                                               <div class="image-counter" id="variantImageCounter1">Cropped Images: 0/6 (Minimum 3 required)</div>
                                            </div>
                                            <div class="field-error" id="variant1Images-error"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-12">
                                <div class="d-flex gap-3 justify-content-end">
                                    <button type="button" class="btn btn-secondary" id="cancelBtn" onclick="window.location.href='/admin/products'">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>
                                    <button type="button" class="btn btn-primary" id="addVariantBtn">
                                        <i class="fas fa-plus"></i> Add Variant
                                    </button>
                                    <button type="submit" class="btn btn-success" id="saveProductBtn">
                                        <i class="fas fa-save"></i> Save Product
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Image Crop Modal -->
                        <div class="modal fade" id="imageCropModal" tabindex="-1" aria-labelledby="imageCropModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="imageCropModalLabel">Crop Image</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="crop-container">
                                            <img id="cropImage" style="max-width: 100%;">
                                        </div>
                                        <div class="mt-3">
                                            <button type="button" class="btn btn-secondary" id="resetCrop">Reset</button>
                                            <button type="button" class="btn btn-primary" id="rotateCrop">Rotate</button>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-success" id="saveCrop">Save Crop</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let variantImageCounts = { 1: 0 };
        let variantCount = 1;
        const maxVariants = 5;
        const categories = JSON.parse('<%- JSON.stringify(categories || []) %>');

        document.addEventListener('DOMContentLoaded', () => {
            initializeAddProductPage();
            initializeCropModalHandlers();
            initializeAddVariantButton();
            initializeFormSubmission();
        });

        function initializeAddProductPage() {
            initializeVariantImageUpload(1);
            initializeCategoryChangeListener();
            initializeStatusToggles();
            setDateConstraints(); 
        }

        function setDateConstraints() {
            const today = new Date().toISOString().split('T')[0];
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const tomorrowStr = tomorrow.toISOString().split('T')[0];
            
            for (let i = 1; i <= variantCount; i++) {
                const mfgDate = document.getElementById(`variantManufacturingDate${i}`);
                const expDate = document.getElementById(`variantExpiryDate${i}`);
                
                if (mfgDate) {
                    mfgDate.setAttribute('max', today);
                }
                if (expDate) {
                    expDate.setAttribute('min', tomorrowStr);
                }
            }
        }

        // Enhanced form submission that shows ALL errors at once
        function initializeFormSubmission() {
            const form = document.getElementById('productForm');
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                
                // Show ALL validation errors simultaneously
                const isValid = validateAllFieldsAndShowAllErrors();
                
                if (!isValid) {
                    showToast('Please fix all validation errors before submitting', 'error');
                    // Scroll to the first error field
                    const firstErrorField = document.querySelector('.is-invalid');
                    if (firstErrorField) {
                        firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        firstErrorField.focus();
                    }
                    return;
                }

                // If validation passes, proceed with form submission
                const formData = new FormData(form);
                toggleFormDisabled(true);
                document.getElementById('spinnerOverlay').style.display = 'block';

                try {
                    const res = await fetch('/admin/products/add', {
                        method: 'POST',
                        body: formData,
                    });

                    const result = await res.json();
                    if (res.ok && result.success) {
                        showToast('Product added successfully: ' + result.product.name, 'success');
                        resetFormToInitialState();
                    } else {
                        handleBackendErrors(result);
                        showToast('Failed to add product: ' + (result.message || 'Unknown error'), 'error');
                    }
                } catch (error) {
                    console.error("Error:", error);
                    showToast('Something went wrong!', 'error');
                } finally {
                    toggleFormDisabled(false);
                    document.getElementById('spinnerOverlay').style.display = 'none';
                }
            });
        }

        // Main validation function that shows ALL errors at once
        function validateAllFieldsAndShowAllErrors() {
            console.log('reached')
            let isFormValid = true;
            let errorCount = 0;
            
            // Clear all previous errors first
            clearAllErrors();
            
            // 1. Validate main product fields
            const mainFields = [
                { id: 'productName', name: 'Product Name', required: true, minLength: 2, maxLength: 100 },
                { id: 'category', name: 'Category', required: true },
                { id: 'brand', name: 'Brand', required: true },
                { id: 'description', name: 'Description', required: true, minLength: 10, maxLength: 500 }
            ];
            
            mainFields.forEach(field => {
                if (!validateSingleField(field.id, field.name, field.required, field.minLength, field.maxLength)) {
                    isFormValid = false;
                    errorCount++;
                }
            });
            
            // 2. Validate all variants
            for (let i = 1; i <= variantCount; i++) {
                // Basic variant fields
                const variantFields = [
                    { id: `variantQuantity${i}`, name: `Variant ${i} Quantity`, required: true, type: 'number', min: 0 },
                    { id: `variantRegularPrice${i}`, name: `Variant ${i} Price`, required: true, type: 'number', min: 0.01 },
                    { id: `variantManufacturingDate${i}`, name: `Variant ${i} Manufacturing Date`, required: true, type: 'date' },
                    { id: `variantUom${i}`, name: `Variant ${i} UOM`, required: true }
                ];
                
                variantFields.forEach(field => {
                    if (!validateSingleField(field.id, field.name, field.required, field.minLength, field.maxLength, field.type, field.min)) {
                        isFormValid = false;
                        errorCount++;
                    }
                });
                
                // Validate variant attributes
                const attributeFields = document.querySelectorAll(`#variant${i} input[name*="attributes"][required]`);
                attributeFields.forEach(field => {
                    const fieldName = field.previousElementSibling?.textContent?.replace('*', '').trim() || 'Attribute field';
                    if (!validateSingleField(field.id, fieldName, true)) {
                        isFormValid = false;
                        errorCount++;
                    }
                });
                
                // Validate image count
                if (!validateImageCount(i)) {
                    isFormValid = false;
                    errorCount++;
                }
            }
            
            if (!isFormValid) {
                showToast(`Found ${errorCount} validation errors. Please fix all highlighted fields.`, 'error');
            }
            
            return isFormValid;
        }

        // Validate individual field and show error immediately
        function validateSingleField(fieldId, fieldName, required = false, minLength = null, maxLength = null, type = null, min = null) {
            const field = document.getElementById(fieldId);
            if (!field) return true;
            
            let errorDiv = document.getElementById(`${fieldId}-error`);
            
            // Create error div if it doesn't exist
            if (!errorDiv) {
                errorDiv = document.createElement('div');
                errorDiv.className = 'field-error';
                errorDiv.id = `${fieldId}-error`;
                field.parentNode.insertBefore(errorDiv, field.nextSibling);
            }
            
            const value = field.value.trim();
            let isValid = true;
            let errorMessage = '';
            
            // Required field validation
            if (required && !value) {
                isValid = false;
                errorMessage = `${fieldName} is required`;
            }
            
            // Type-specific validations (only if field has value)
            if (value && isValid) {
                if (type === 'number') {
                    const numValue = parseFloat(value);
                    if (isNaN(numValue)) {
                        isValid = false;
                        errorMessage = `${fieldName} must be a valid number`;
                    } else if (min !== null && numValue < min) {
                        isValid = false;
                        errorMessage = `${fieldName} must be at least ${min}`;
                    }
                }
                
                if (type === 'date') {
                    const dateValue = new Date(value);
                    const today = new Date();
                    today.setHours(23, 59, 59, 999); // End of today
                    
                    if (fieldId.includes('Manufacturing') && dateValue > today) {
                        isValid = false;
                        errorMessage = `${fieldName} cannot be in the future`;
                    }
                }
                
                // Length validations
                if (minLength && value.length < minLength) {
                    isValid = false;
                    errorMessage = `${fieldName} must be at least ${minLength} characters`;
                }
                if (maxLength && value.length > maxLength) {
                    isValid = false;
                    errorMessage = `${fieldName} must be no more than ${maxLength} characters`;
                }
            }
            
            // Update field appearance and show error
            if (isValid) {
                field.classList.remove('is-invalid');
                field.classList.add('is-valid');
                errorDiv.textContent = '';
                errorDiv.classList.remove('show-error');
            } else {
                field.classList.remove('is-valid');
                field.classList.add('is-invalid');
                errorDiv.textContent = errorMessage;
                errorDiv.classList.add('show-error');
            }
            
            return isValid;
        }

        // Validate image count for a specific variant
        function validateImageCount(variantId) {
            const imageCount = variantImageCounts[variantId] || 0;
            let errorDiv = document.getElementById(`variant${variantId}Images-error`);
            
            // Create error div if it doesn't exist
            if (!errorDiv) {
                const imageContainer = document.getElementById(`variantImageCounter${variantId}`);
                if (imageContainer) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'field-error';
                    errorDiv.id = `variant${variantId}Images-error`;
                    imageContainer.parentNode.insertBefore(errorDiv, imageContainer.nextSibling);
                } else {
                    return true; // Skip if container not found
                }
            }
            
            const isValid = imageCount >= 3;
            
            if (!isValid) {
                errorDiv.textContent = `Please upload at least 3 images for Variant ${variantId} (currently ${imageCount}/3)`;
                errorDiv.classList.add('show-error');
                
                // Highlight upload area
                const uploadContainer = document.getElementById(`variantImageUploadArea${variantId}`)?.closest('.image-upload-container');
                if (uploadContainer) {
                    uploadContainer.classList.add('has-error');
                }
            } else {
                errorDiv.textContent = '';
                errorDiv.classList.remove('show-error');
                
                // Remove error highlighting
                const uploadContainer = document.getElementById(`variantImageUploadArea${variantId}`)?.closest('.image-upload-container');
                if (uploadContainer) {
                    uploadContainer.classList.remove('has-error');
                }
            }
            
            return isValid;
        }

        // Clear all validation errors
        function clearAllErrors() {
            // Remove all field validation classes
            document.querySelectorAll('.is-invalid, .is-valid').forEach(field => {
                field.classList.remove('is-invalid', 'is-valid');
            });
            
            // Hide all error messages
            document.querySelectorAll('.field-error').forEach(errorDiv => {
                errorDiv.textContent = '';
                errorDiv.classList.remove('show-error');
            });
            
            // Remove upload container error styling
            document.querySelectorAll('.image-upload-container.has-error').forEach(container => {
                container.classList.remove('has-error');
            });
        }

        // Enhanced toast function with different types
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            
            const typeClasses = {
                success: 'toast-success',
                error: 'toast-error', 
                info: 'toast-info',
                warning: 'bg-warning text-dark'
            };
            
            toast.className = `toast align-items-center border-0 ${typeClasses[type] || typeClasses.info}`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
            bsToast.show();
            
            setTimeout(() => {
                toast.remove();
            }, 6000);
        }

        // Reset form to initial state
        function resetFormToInitialState() {
            const form = document.getElementById('productForm');
            form.reset();
            clearAllErrors();
            
            variantCount = 1;
            variantImageCounts = { 1: 0 };
            
            // Remove extra variants
            document.querySelectorAll('.variant-container:not(#variant1)').forEach(el => el.remove());
            
            // Clear uploaded images
            document.querySelectorAll('.uploaded-images').forEach(container => container.innerHTML = '');
            
            // Reset image counters
            updateVariantImageCounterGlobal(1);
            
            // Reset attribute containers
            document.querySelectorAll('[id^="variantAttributeContainer"]').forEach(container => {
                container.innerHTML = '<p class="text-muted">Please select a category to view attributes.</p>';
            });
            
            // Reset status toggles to defaults
            resetAllStatusToggles();
        }

        function resetAllStatusToggles() {
            for (let i = 1; i <= variantCount; i++) {
                const toggles = [
                    { id: `variantProductStatus${i}`, valueId: `variantProductStatusValue${i}`, default: true, active: 'Listed', inactive: 'Unlisted' },
                    { id: `variantDiscountStatus${i}`, valueId: `variantDiscountStatusValue${i}`, default: false, active: 'Active', inactive: 'Inactive' },
                    { id: `variantOfferStatus${i}`, valueId: `variantOfferStatusValue${i}`, default: false, active: 'Active', inactive: 'Inactive' },
                    { id: `variantPrescriptionRequired${i}`, valueId: `variantPrescriptionRequiredValue${i}`, default: false, active: 'Active', inactive: 'Inactive' }
                ];
                
                toggles.forEach(toggle => {
                    const checkbox = document.getElementById(toggle.id);
                    const hiddenInput = document.getElementById(toggle.valueId);
                    const label = checkbox?.nextElementSibling?.nextElementSibling;
                    
                    if (checkbox && hiddenInput && label) {
                        checkbox.checked = toggle.default;
                        hiddenInput.value = toggle.default.toString();
                        label.textContent = toggle.default ? toggle.active : toggle.inactive;
                    }
                });
            }
        }

        function handleBackendErrors(result) {
            if (result.errors && Array.isArray(result.errors)) {
                result.errors.forEach(error => {
                    const fieldId = error.field;
                    const errorDiv = document.getElementById(`${fieldId}-error`);
                    if (errorDiv) {
                        errorDiv.textContent = error.message;
                        errorDiv.classList.add('show-error');
                    } else {
                        showToast(error.message, 'error');
                    }
                });
            } else if (result.message) {
                showToast(result.message, 'error');
            }
        }

        function toggleFormDisabled(disabled) {
            const buttons = document.querySelectorAll('#productForm button, #addVariantBtn, #cancelBtn, #saveProductBtn');
            const inputs = document.querySelectorAll('#productForm input, #productForm select, #productForm textarea');
            buttons.forEach(button => {
                button.disabled = disabled;
            });
            inputs.forEach(input => {
                input.disabled = disabled;
            });
        }

        // Initialize global crop modal handlers (only once)
        function initializeCropModalHandlers() {
            const cropModal = document.getElementById('imageCropModal');
            
            // Remove any existing event listeners to prevent duplicates
            const newResetBtn = document.getElementById('resetCrop').cloneNode(true);
            const newRotateBtn = document.getElementById('rotateCrop').cloneNode(true);
            const newSaveBtn = document.getElementById('saveCrop').cloneNode(true);
            
            document.getElementById('resetCrop').parentNode.replaceChild(newResetBtn, document.getElementById('resetCrop'));
            document.getElementById('rotateCrop').parentNode.replaceChild(newRotateBtn, document.getElementById('rotateCrop'));
            document.getElementById('saveCrop').parentNode.replaceChild(newSaveBtn, document.getElementById('saveCrop'));

            cropModal.addEventListener('shown.bs.modal', () => {
                const cropImage = document.getElementById('cropImage');
                
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.destroy();
                }
                
                window.currentCropSession.cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 0.8,
                    restore: false,
                    guides: false,
                    center: false,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            });

            cropModal.addEventListener('hidden.bs.modal', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.destroy();
                    window.currentCropSession.cropper = null;
                }
            });

            document.getElementById('resetCrop').addEventListener('click', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.reset();
                }
            });

            document.getElementById('rotateCrop').addEventListener('click', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.rotate(90);
                }
            });

            document.getElementById('saveCrop').addEventListener('click', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    const canvas = window.currentCropSession.cropper.getCroppedCanvas({
                        width: 800,
                        height: 800,
                        imageSmoothingEnabled: true,
                        imageSmoothingQuality: 'high',
                    });
                    
                    canvas.toBlob((blob) => {
                        const croppedFile = new File([blob], window.currentCropSession.file.name, {
                            type: window.currentCropSession.file.type,
                            lastModified: Date.now()
                        });
                        
                        addCroppedImage(canvas.toDataURL(), croppedFile, window.currentCropSession.variantId);
                        
                        // Close modal
                        const modal = bootstrap.Modal.getInstance(cropModal);
                        modal.hide();
                    }, window.currentCropSession.file.type, 0.9);
                }
            });
        }

        function addCroppedImage(src, file, variantId) {
            const variantIndex = variantId - 1;
            const uploadedImagesContainer = document.getElementById(`variantUploadedImages${variantId}`);
            const imageContainer = document.createElement('div');
            imageContainer.className = 'uploaded-image';
            imageContainer.innerHTML = `
                <img src="${src}" alt="Cropped image">
                <input type="text" class="form-control mt-2" placeholder="Enter alt text" name="variants[${variantIndex}][imageAltText][]" value="">
                <button type="button" class="remove-image" onclick="removeCroppedImage(this, ${variantId})">
                    <i class="fas fa-times"></i>
                </button>
            `;
            uploadedImagesContainer.appendChild(imageContainer);
            
            // Store the cropped file
            if (!window.croppedImages[variantId]) {
                window.croppedImages[variantId] = [];
            }
            window.croppedImages[variantId].push(file);
            
            variantImageCounts[variantId]++;
            updateVariantImageCounterGlobal(variantId);
            
            // Update the file input with all cropped images
            updateFileInputGlobal(variantId);
        }

        function updateFileInputGlobal(variantId) {
            const imageInput = document.getElementById(`variantImageInput${variantId}`);
            const dt = new DataTransfer();
            
            if (window.croppedImages[variantId]) {
                window.croppedImages[variantId].forEach(file => {
                    dt.items.add(file);
                });
            }
            
            imageInput.files = dt.files;
        }

        function updateVariantImageCounterGlobal(variantId) {
            const imageCounter = document.getElementById(`variantImageCounter${variantId}`);
            if (imageCounter) {
                imageCounter.textContent = `Cropped Images: ${variantImageCounts[variantId]}/6 (Minimum 3 required)`;
            }
        }

        window.removeCroppedImage = function(button, variantId) {
            const imageContainer = button.closest('.uploaded-image');
            const index = Array.from(imageContainer.parentElement.children).indexOf(imageContainer);
            
            // Remove from croppedImages array
            if (window.croppedImages[variantId]) {
                window.croppedImages[variantId].splice(index, 1);
            }
            
            imageContainer.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => {
                imageContainer.remove();
                variantImageCounts[variantId]--;
                updateVariantImageCounterGlobal(variantId);
                updateFileInputGlobal(variantId);
            }, 300);
        };

        function initializeAddVariantButton() {
            const addVariantBtn = document.getElementById('addVariantBtn');
            addVariantBtn.addEventListener('click', () => {
                if (variantCount >= maxVariants) {
                    showToast('Maximum 5 variants allowed.', 'warning');
                    return;
                }
                variantCount++;
                addVariantSection(variantCount);
                initializeVariantImageUpload(variantCount);
                initializeStatusTogglesForVariant(variantCount);
                updateVariantAttributesForVariant(variantCount);
                setDateConstraints();
            });
        }

        function addVariantSection(variantId) {
            const variantIndex = variantId - 1;
            const variantContainer = document.createElement('div');
            variantContainer.className = 'variant-container';
            variantContainer.id = `variant${variantId}`;
            variantContainer.innerHTML = `
                <div class="row">
                    <div class="col-12 mb-3">
                        <h5>Variant ${variantId}</h5>
                        <button type="button" class="btn btn-danger btn-sm float-end" onclick="removeVariant(${variantId})">
                            <i class="fas fa-trash"></i> Remove Variant
                        </button>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantQuantity${variantId}" class="form-label">Quantity <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="variantQuantity${variantId}" name="variants[${variantIndex}][quantity]" min="0" >
                        <div class="field-error" id="variantQuantity${variantId}-error"></div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantRegularPrice${variantId}" class="form-label">Regular Price <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <span class="input-group-text">â‚¹</span>
                            <input type="number" class="form-control" id="variantRegularPrice${variantId}" name="variants[${variantIndex}][regularPrice]" step="0.01" min="0" >
                        </div>
                        <div class="field-error" id="variantRegularPrice${variantId}-error"></div>
                    </div>
                    
                    <div class="col-md-6 mb-3">
                        <label for="variantManufacturingDate${variantId}" class="form-label">Manufacturing Date <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="variantManufacturingDate${variantId}" name="variants[${variantIndex}][manufacturingDate]" >
                        <div class="field-error" id="variantManufacturingDate${variantId}-error"></div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantExpiryDate${variantId}" class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" id="variantExpiryDate${variantId}" name="variants[${variantIndex}][expiryDate]">
                        <div class="field-error" id="variantExpiryDate${variantId}-error"></div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantUom${variantId}" class="form-label">Unit of Measure (UOM) <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="variantUom${variantId}" name="variants[${variantIndex}][uom]" >
                        <div class="field-error" id="variantUom${variantId}-error"></div>
                    </div>
                    <div class="col-md-6 mb-3">
                        
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantPrescriptionRequired${variantId}" class="form-label">Prescription Required</label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantPrescriptionRequired${variantId}">
                            <input type="hidden" name="variants[${variantIndex}][prescriptionRequired]" id="variantPrescriptionRequiredValue${variantId}" value="false">
                            <span>Inactive</span>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantProductStatus${variantId}" class="form-label">Product Status <span class="text-danger">*</span></label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantProductStatus${variantId}" checked>
                            <input type="hidden" name="variants[${variantIndex}][isListed]" id="variantProductStatusValue${variantId}" value="true">
                            <span>Listed</span>
                        </div>
                        <div class="field-error" id="variantProductStatus${variantId}-error"></div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantDiscountStatus${variantId}" class="form-label">Discount Status</label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantDiscountStatus${variantId}">
                            <input type="hidden" name="variants[${variantIndex}][discountStatus]" id="variantDiscountStatusValue${variantId}" value="false">
                            <span>Inactive</span>
                        </div>
                        <div class="field-error" id="variantDiscountStatus${variantId}-error"></div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="variantOfferStatus${variantId}" class="form-label">Offer Status</label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantOfferStatus${variantId}">
                            <input type="hidden" name="variants[${variantIndex}][offerStatus]" id="variantOfferStatusValue${variantId}" value="false">
                            <span>Inactive</span>
                        </div>
                        <div class="field-error" id="variantOfferStatus${variantId}-error"></div>
                    </div>
                    <div class="col-12 mb-4">
                        <div class="attribute-group">
                            <h6 class="mb-3">Variant Attributes</h6>
                            <div class="row" id="variantAttributeContainer${variantId}">
                                <p class="text-muted">Please select a category to view attributes.</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 mb-4">
                        <label class="form-label">Upload Variant Images (3-6 images) <span class="text-danger">*</span></label>
                        <div class="image-upload-container">
                            <div class="image-upload-area" id="variantImageUploadArea${variantId}">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <p>Drop image here to upload and crop (Min: 3 crops required)</p>
                                <p class="text-muted">or click to browse</p>
                                <input type="file" id="variantImageInput${variantId}" name="variants[${variantIndex}][variant_${variantIndex}_images]" accept="image/jpeg,image/png,image/gif" hidden data-variant-index="${variantIndex}" >
                            </div>
                            <div class="uploaded-images" id="variantUploadedImages${variantId}"></div>
                           <div class="image-counter" id="variantImageCounter${variantId}">Cropped Images: 0/6 (Minimum 3 required)</div>
                        </div>
                        <div class="field-error" id="variant${variantId}Images-error"></div>
                    </div>
                </div>
            `;
            document.querySelector('.variant-container').parentElement.appendChild(variantContainer);
            variantImageCounts[variantId] = 0;
        }

        function removeVariant(variantId) {
            const variantContainer = document.getElementById(`variant${variantId}`);
            if (variantContainer) {
                variantContainer.remove();
                delete variantImageCounts[variantId];
                // Clean up cropped images for this variant
                if (window.croppedImages && window.croppedImages[variantId]) {
                    delete window.croppedImages[variantId];
                }
                variantCount--;
            }
        }

        function updateVariantAttributesForVariant(variantId) {
            const variantIndex = variantId - 1;
            const categorySelect = document.getElementById('category');
            const variantAttributeContainer = document.getElementById(`variantAttributeContainer${variantId}`);
            const attributes = getCategoryAttributes(categorySelect.value);

            if (!variantAttributeContainer) {
                console.error(`Variant attribute container not found for variant ${variantId}`);
                return;
            }

            variantAttributeContainer.innerHTML = '';
            if (!categorySelect.value || attributes.length === 0) {
                variantAttributeContainer.innerHTML = '<p class="text-muted">Please select a category to view attributes.</p>';
            } else {
                const attributeTemplates = {
                    ingredients: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_ingredients${variantId}" class="form-label">Ingredients <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_ingredients${variantId}" name="variants[${variantIndex}][attributes][ingredients]" required>
                            <div class="field-error" id="variant_attr_ingredients${variantId}-error"></div>
                        </div>`,
                    material: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_material${variantId}" class="form-label">Material <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_material${variantId}" name="variants[${variantIndex}][attributes][material]" required>
                            <div class="field-error" id="variant_attr_material${variantId}-error"></div>
                        </div>`,
                    color: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_color${variantId}" class="form-label">Color <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_color${variantId}" name="variants[${variantIndex}][attributes][color]" required>
                            <div class="field-error" id="variant_attr_color${variantId}-error"></div>
                        </div>`,
                    ml: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_ml${variantId}" class="form-label">Milliliters (ml) <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="variant_attr_ml${variantId}" name="variants[${variantIndex}][attributes][ml]" step="0.01" min="0" required>
                            <div class="field-error" id="variant_attr_ml${variantId}-error"></div>
                        </div>`,
                    mg: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_mg${variantId}" class="form-label">Milligrams (mg) <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="variant_attr_mg${variantId}" name="variants[${variantIndex}][attributes][mg]" step="0.01" min="0" required>
                            <div class="field-error" id="variant_attr_mg${variantId}-error"></div>
                        </div>`,
                    size: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_size${variantId}" class="form-label">Size <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_size${variantId}" name="variants[${variantIndex}][attributes][size]" required>
                            <div class="field-error" id="variant_attr_size${variantId}-error"></div>
                        </div>`,    
                    gm: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_gm${variantId}" class="form-label">gm <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_gm${variantId}" name="variants[${variantIndex}][attributes][gm]" required>
                            <div class="field-error" id="variant_attr_gm${variantId}-error"></div>
                        </div>`,    
                    stage: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_stage${variantId}" class="form-label">Stage <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_stage${variantId}" name="variants[${variantIndex}][attributes][stage]" required>
                            <div class="field-error" id="variant_attr_stage${variantId}-error"></div>
                        </div>`  ,  
                    kg: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_kg${variantId}" class="form-label">kg <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_kg${variantId}" name="variants[${variantIndex}][attributes][kg]" required>
                            <div class="field-error" id="variant_attr_kg${variantId}-error"></div>
                        </div>`    
                };

                attributes.forEach(attr => {
                    if (attributeTemplates[attr]) {
                        variantAttributeContainer.insertAdjacentHTML('beforeend', attributeTemplates[attr]);
                    }
                });
            }
        }

        function initializeCategoryChangeListener() {
            const categorySelect = document.getElementById('category');
            if (!categorySelect) {
                console.error('Category select not found');
                return;
            }
            categorySelect.addEventListener('change', () => {
                for (let i = 1; i <= variantCount; i++) {
                    updateVariantAttributesForVariant(i);
                }
            });
            for (let i = 1; i <= variantCount; i++) {
                updateVariantAttributesForVariant(i);
            }
        }

        function getCategoryAttributes(categoryId) {
            if (!categories || !Array.isArray(categories) || categories.length === 0) {
                console.warn('Categories data is missing or empty');
                return [];
            }
            const selectedCategory = categories.find(cat => String(cat._id) === String(categoryId));
            if (!selectedCategory) {
                console.warn('Category not found for ID:', categoryId);
                return [];
            }

            const categoryName = selectedCategory.name.toUpperCase();
            const categoryAttributes = {
                'TABLET': ['ingredients', 'mg'],
                'CAPSULE': ['ingredients', 'mg'],
                'NRX TABLET': ['ingredients', 'mg'],
                'OINTMENT': ['ingredients', 'gm'],
                'DROP': [ 'ingredients' , 'ml'],
                'SYRUP': ['ingredients', 'ml'],
                'FOOD': ['ingredients', 'kg','stage'],
                'MEDICAL EQUIPMENT': ['ingredients', 'material', 'color'],
                'BODY SUPPORT': ['ingredients', 'size']
            };
            return categoryAttributes[categoryName] || [];
        }

       function initializeVariantImageUpload(variantId) {
            const imageUploadArea = document.getElementById(`variantImageUploadArea${variantId}`);
            const imageInput = document.getElementById(`variantImageInput${variantId}`);
            const uploadedImagesContainer = document.getElementById(`variantUploadedImages${variantId}`);
            const imageCounter = document.getElementById(`variantImageCounter${variantId}`);

            if (!imageUploadArea || !imageInput || !uploadedImagesContainer || !imageCounter) {
                console.error(`Variant image upload elements not found for variant ${variantId}`);
                return;
            }

            // Initialize croppedImages array for this variant if it doesn't exist
            if (!window.croppedImages) {
                window.croppedImages = {};
            }
            if (!window.croppedImages[variantId]) {
                window.croppedImages[variantId] = [];
            }

            imageUploadArea.addEventListener('click', () => {
                imageInput.click();
            });

            imageUploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                imageUploadArea.style.borderColor = '#28a745';
                imageUploadArea.style.backgroundColor = 'rgba(40, 167, 69, 0.1)';
            });

            imageUploadArea.addEventListener('dragleave', (e) => {
                e.preventDefault();
                imageUploadArea.style.borderColor = '#dee2e6';
                imageUploadArea.style.backgroundColor = '';
            });

            imageUploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                imageUploadArea.style.borderColor = '#dee2e6';
                imageUploadArea.style.backgroundColor = '';
                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    handleImageFile(files[0], variantId);
                }
            });

            imageInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleImageFile(e.target.files[0], variantId);
                }
            });

            function handleImageFile(file, variantId) {
                if (variantImageCounts[variantId] >= 6) {
                    showToast('Maximum 6 images allowed per variant', 'warning');
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    openCropModal(e.target.result, file, variantId);
                };
                reader.readAsDataURL(file);
            }

            function openCropModal(imageSrc, file, variantId) {
                const cropImage = document.getElementById('cropImage');
                const modal = new bootstrap.Modal(document.getElementById('imageCropModal'));
                
                cropImage.src = imageSrc;
                modal.show();

                // Store current context for this modal session
                window.currentCropSession = {
                    variantId: variantId,
                    file: file,
                    cropper: null
                };
            }

            function updateVariantImageCounter(variantId) {
                const imageCounter = document.getElementById(`variantImageCounter${variantId}`);
                imageCounter.textContent = `Cropped Images: ${variantImageCounts[variantId]}/6 (Minimum 3 required)`;
            }

            updateVariantImageCounter(variantId);
        }

        function initializeStatusToggles() {
            initializeStatusTogglesForVariant(1);
        }

        function initializeStatusTogglesForVariant(variantId) {
            const discountToggle = document.getElementById(`variantDiscountStatus${variantId}`);
            const offerToggle = document.getElementById(`variantOfferStatus${variantId}`);
            const productStatusToggle = document.getElementById(`variantProductStatus${variantId}`);
            const prescriptionToggle = document.getElementById(`variantPrescriptionRequired${variantId}`);
            const discountValue = document.getElementById(`variantDiscountStatusValue${variantId}`);
            const offerValue = document.getElementById(`variantOfferStatusValue${variantId}`);
            const productStatusValue = document.getElementById(`variantProductStatusValue${variantId}`);
            const prescriptionValue = document.getElementById(`variantPrescriptionRequiredValue${variantId}`);

            const statusToggles = document.querySelectorAll(`#variant${variantId} .status-toggle input[type="checkbox"]`);

            statusToggles.forEach(toggle => {
                toggle.addEventListener('change', () => {
                    const statusLabel = toggle.nextElementSibling.nextElementSibling; // Skip hidden input
                    if (toggle === productStatusToggle) {
                        productStatusValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Listed' : 'Unlisted';
                    } else if (toggle === discountToggle) {
                        discountValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Active' : 'Inactive';
                    } else if (toggle === offerToggle) {
                        offerValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Active' : 'Inactive';
                    } else if (toggle === prescriptionToggle) {
                        prescriptionValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Active' : 'Inactive';
                    }

                    if (toggle === discountToggle && toggle.checked && offerToggle.checked) {
                        offerToggle.checked = false;
                        offerValue.value = 'false';
                        offerToggle.nextElementSibling.nextElementSibling.textContent = 'Inactive';
                        showToast('Discount Status and Offer Status cannot be selected at the same time.', 'warning');
                    } else if (toggle === offerToggle && toggle.checked && discountToggle.checked) {
                        discountToggle.checked = false;
                        discountValue.value = 'false';
                        discountToggle.nextElementSibling.nextElementSibling.textContent = 'Inactive';
                        showToast('Discount Status and Offer Status cannot be selected at the same time.', 'warning');
                    }
                });
            });
        }

        function updateVariantImageCounter(variantId) {
            const imageCounter = document.getElementById(`variantImageCounter${variantId}`);
            imageCounter.textContent = `Images: ${variantImageCounts[variantId]}/6 (Minimum 3 required)`;
        }
    </script>
</body>
</html>
