<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Carezon Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/admin/css/dashboard.css">
    <link rel="stylesheet" href="/admin/css/productAdd.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
</head>
<body>
    <%- include('../partials/admin/header') %>
    <%- include('../partials/admin/sidebar') %>

    <div class="toast-container" id="toastContainer"></div>
    <div class="spinner-overlay" id="spinnerOverlay">
        <div class="spinner"></div>
    </div>

    <main class="main-content" id="main-content">
        <div class="content-wrapper">
            <div class="page-header mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="page-title">Edit Products</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href='/admin/dashboard'>Dashboard</a></li>
                                <li class="breadcrumb-item"><a href='/admin/products'>Products</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Edit</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>
            
            <div class="page-content">
                <div class="main-product-section">
                    <h4 class="mb-4">Edit Product Information</h4>
                    <form id="productForm" enctype="multipart/form-data">
                        <!-- Hidden input for product ID -->
                        <!-- Product ID of the item being edited -->
                        <input type="hidden" name="_id" id="productId">

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <!-- Product name -->
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="productName" name="name" required>
                                <div class="field-error" id="productName-error"></div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <!-- Product category selection -->
                                <label for="category" class="form-label">Category <span class="text-danger">*</span></label>
                                <select class="form-select" id="category" name="category" required>
                                    <option value="">Select Category</option>
                                    <% if (categories && Array.isArray(categories)) { %>
                                        <% categories.forEach(cat => { %>
                                            <option value="<%= cat._id %>"><%= cat.name %></option>
                                        <% }) %>
                                    <% } else { %>
                                        <option value="" disabled>No categories available</option>
                                    <% } %>
                                </select>
                                <div class="field-error" id="category-error"></div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <!-- Product brand selection -->
                                <label for="brand" class="form-label">Brand <span class="text-danger">*</span></label>
                                <select class="form-select" id="brand" name="brand" required>
                                    <option value="">Select Brand</option>
                                    <% if (brands && Array.isArray(brands)) { %>
                                        <% brands.forEach(brand => { %>
                                            <option value="<%= brand._id %>"><%= brand.name %></option>
                                        <% }) %>
                                    <% } else { %>
                                        <option value="" disabled>No brands available</option>
                                    <% } %>
                                </select>
                                <div class="field-error" id="brand-error"></div>
                            </div>
                            
                            <div class="col-12 mb-3">
                                <!-- Product description -->
                                <label for="description" class="form-label">Description <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="description" name="description" rows="4" required></textarea>
                                <div class="field-error" id="description-error"></div>
                            </div>
                            
                            <div class="col-12">
                                <h4 class="mb-4">Variant Information</h4>
                                <div id="variantsContainer">
                                    <!-- Variants will be dynamically populated here -->
                                </div>
                            </div>
                            
                            <div class="col-12">
                                <div class="d-flex gap-3 justify-content-end">
                                    <button type="button" class="btn btn-secondary" id="cancelBtn" onclick="window.location.href='/admin/products'">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>
                                    <button type="button" class="btn btn-primary" id="addVariantBtn">
                                        <i class="fas fa-plus"></i> Add Variant
                                    </button>
                                    <button type="submit" class="btn btn-success" id="updateProductBtn">
                                        <i class="fas fa-save"></i> Update Product
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- Image Crop Modal -->
                        <div class="modal fade" id="imageCropModal" tabindex="-1" aria-labelledby="imageCropModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="imageCropModalLabel">Crop Image</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="crop-container">
                                            <img id="cropImage" style="max-width: 100%;">
                                        </div>
                                        <div class="mt-3">
                                            <button type="button" class="btn btn-secondary" id="resetCrop">Reset</button>
                                            <button type="button" class="btn btn-primary" id="rotateCrop">Rotate</button>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-success" id="saveCrop">Save Crop</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let variantImageCounts = {};
        let variantCount = 0;
        const maxVariants = 5;
        const categories = JSON.parse('<%- JSON.stringify(categories || []) %>');

        document.addEventListener('DOMContentLoaded', () => {
            initializeEditProductPage();
            initializeCropModalHandlers();
            initializeAddVariantButton();
            initializeFormSubmission();
            populateProductData();
        });

        function initializeEditProductPage() {
            // Initialize for existing variants (will be populated dynamically)
            initializeCategoryChangeListener();
        }

        function populateProductData() {
            const product = <%- JSON.stringify(product || {}) %>;
            if (!product || !product._id) return;

            // Populate main product fields
            document.getElementById('productId').value = product._id;
            document.getElementById('productName').value = product.name || '';
            document.getElementById('category').value = product.category?._id || '';
            document.getElementById('brand').value = product.brand?._id || '';
            document.getElementById('description').value = product.description || '';

            // Populate variants
            variantCount = product.variants?.length || 0;
            if (variantCount > 0) {
                product.variants.forEach((variant, index) => {
                    addVariantSection(index + 1, variant);
                    initializeVariantImageUpload(index + 1);
                    initializeStatusTogglesForVariant(index + 1);
                    updateVariantAttributesForVariant(index + 1); // Render attributes first
                    // Populate attribute values after rendering
                    if (variant.attributes) {
                        Object.entries(variant.attributes).forEach(([key, value]) => {
                            const attrInput = document.getElementById(`variant_attr_${key}${index + 1}`);
                            if (attrInput) {
                                attrInput.value = value;
                            }
                        });
                    }
                    // Populate variant images
                    if (variant.images?.length) {
                        variantImageCounts[index + 1] = variant.images.length;
                        variant.images.forEach((img, imgIndex) => {
                            const imageUrl = typeof img === 'string' ? img : (img.url || img.secure_url || img);
                            addExistingImage(imageUrl, index + 1, img.altText || '');
                        });
                        updateVariantImageCounterGlobal(index + 1);
                        
                        // Remove required attribute if variant already has images
                        const imageInput = document.getElementById(`variantImageInput${index + 1}`);
                        if (imageInput && variant.images.length >= 3) {
                            imageInput.removeAttribute('required');
                        }
                    }
                });
            } else {
                addVariantSection(1);
                initializeVariantImageUpload(1);
                initializeStatusTogglesForVariant(1);
                updateVariantAttributesForVariant(1);
            }
        }
        function addExistingImage(imageUrl, variantId, altText) {
            const variantIndex = variantId - 1;
            const uploadedImagesContainer = document.getElementById(`variantUploadedImages${variantId}`);
            const imageContainer = document.createElement('div');
            imageContainer.className = 'uploaded-image';
            imageContainer.innerHTML = `
                <img src="${imageUrl}" alt="${altText}">
                <input type="text" class="form-control mt-2" placeholder="Enter alt text" name="variants[${variantIndex}][imageAltText][]" value="${altText}">
                <!-- Add this hidden input to track existing images -->
                <input type="hidden" name="variants[${variantIndex}][existingImages][]" value="${imageUrl}">
                <button type="button" class="remove-image" onclick="removeCroppedImage(this, ${variantId})">
                    <i class="fas fa-times"></i>
                </button>
            `;
            uploadedImagesContainer.appendChild(imageContainer);
        }

        // Initialize global crop modal handlers
        function initializeCropModalHandlers() {
            const cropModal = document.getElementById('imageCropModal');
            
            const newResetBtn = document.getElementById('resetCrop').cloneNode(true);
            const newRotateBtn = document.getElementById('rotateCrop').cloneNode(true);
            const newSaveBtn = document.getElementById('saveCrop').cloneNode(true);
            
            document.getElementById('resetCrop').parentNode.replaceChild(newResetBtn, document.getElementById('resetCrop'));
            document.getElementById('rotateCrop').parentNode.replaceChild(newRotateBtn, document.getElementById('rotateCrop'));
            document.getElementById('saveCrop').parentNode.replaceChild(newSaveBtn, document.getElementById('saveCrop'));

            cropModal.addEventListener('shown.bs.modal', () => {
                const cropImage = document.getElementById('cropImage');
                
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.destroy();
                }
                
                window.currentCropSession.cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 0.8,
                    restore: false,
                    guides: false,
                    center: false,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            });

            cropModal.addEventListener('hidden.bs.modal', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.destroy();
                    window.currentCropSession.cropper = null;
                }
            });

            document.getElementById('resetCrop').addEventListener('click', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.reset();
                }
            });

            document.getElementById('rotateCrop').addEventListener('click', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    window.currentCropSession.cropper.rotate(90);
                }
            });

            document.getElementById('saveCrop').addEventListener('click', () => {
                if (window.currentCropSession && window.currentCropSession.cropper) {
                    const canvas = window.currentCropSession.cropper.getCroppedCanvas({
                        width: 800,
                        height: 800,
                        imageSmoothingEnabled: true,
                        imageSmoothingQuality: 'high',
                    });
                    
                    canvas.toBlob((blob) => {
                        const croppedFile = new File([blob], window.currentCropSession.file.name, {
                            type: window.currentCropSession.file.type,
                            lastModified: Date.now()
                        });
                        
                        addCroppedImage(canvas.toDataURL(), croppedFile, window.currentCropSession.variantId);
                        
                        const modal = bootstrap.Modal.getInstance(cropModal);
                        modal.hide();
                    }, window.currentCropSession.file.type, 0.9);
                }
            });
        }

        function addCroppedImage(src, file, variantId) {
            const variantIndex = variantId - 1;
            const uploadedImagesContainer = document.getElementById(`variantUploadedImages${variantId}`);
            const imageContainer = document.createElement('div');
            imageContainer.className = 'uploaded-image';
            imageContainer.innerHTML = `
                <img src="${src}" alt="Cropped image">
                <input type="text" class="form-control mt-2" placeholder="Enter alt text" name="variants[${variantIndex}][imageAltText][]" value="">
                <button type="button" class="remove-image" onclick="removeCroppedImage(this, ${variantId})">
                    <i class="fas fa-times"></i>
                </button>
            `;
            uploadedImagesContainer.appendChild(imageContainer);
            
            if (!window.croppedImages[variantId]) {
                window.croppedImages[variantId] = [];
            }
            window.croppedImages[variantId].push(file);
            
            variantImageCounts[variantId]++;
            updateVariantImageCounterGlobal(variantId);
            
            updateFileInputGlobal(variantId);
        }

        function updateFileInputGlobal(variantId) {
            const imageInput = document.getElementById(`variantImageInput${variantId}`);
            const dt = new DataTransfer();
            
            if (window.croppedImages[variantId]) {
                window.croppedImages[variantId].forEach(file => {
                    dt.items.add(file);
                });
            }
            
            imageInput.files = dt.files;
        }

        function updateVariantImageCounterGlobal(variantId) {
            const imageCounter = document.getElementById(`variantImageCounter${variantId}`);
            if (imageCounter) {
                imageCounter.textContent = `Cropped Images: ${variantImageCounts[variantId] || 0}/6 (Minimum 3 required)`;
            }
        }

        window.removeCroppedImage = function(button, variantId) {
            const imageContainer = button.closest('.uploaded-image');
            const index = Array.from(imageContainer.parentElement.children).indexOf(imageContainer);
            
            if (window.croppedImages[variantId]) {
                window.croppedImages[variantId].splice(index, 1);
            }
            
            imageContainer.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => {
                imageContainer.remove();
                variantImageCounts[variantId]--;
                updateVariantImageCounterGlobal(variantId);
                updateFileInputGlobal(variantId);
            }, 300);
        };

        function initializeAddVariantButton() {
            const addVariantBtn = document.getElementById('addVariantBtn');
            addVariantBtn.addEventListener('click', () => {
                if (variantCount >= maxVariants) {
                    showToast('Maximum 5 variants allowed.');
                    return;
                }
                variantCount++;
                addVariantSection(variantCount);
                initializeVariantImageUpload(variantCount);
                initializeStatusTogglesForVariant(variantCount);
                updateVariantAttributesForVariant(variantCount);
            });
        }

        function showToast(message) {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-danger border-0';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            setTimeout(() => {
                toast.remove();
            }, 6000);
        }

        function addVariantSection(variantId, variantData = {}) {
            const variantIndex = variantId - 1;
            const variantContainer = document.createElement('div');
            variantContainer.className = 'variant-container';
            variantContainer.id = `variant${variantId}`;
            variantContainer.innerHTML = `
                <div class="row">
                    <div class="col-12 mb-3">
                        <h5>Variant ${variantId}</h5>
                        <button type="button" class="btn btn-danger btn-sm float-end" onclick="removeVariant(${variantId})">
                            <i class="fas fa-trash"></i> Remove Variant
                        </button>
                    </div>
                    <!-- Variant quantity -->
                    <div class="col-md-6 mb-3">
                        <label for="variantQuantity${variantId}" class="form-label">Quantity <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="variantQuantity${variantId}" name="variants[${variantIndex}][quantity]" min="0" required>
                        <div class="field-error" id="variantQuantity${variantId}-error"></div>
                    </div>
                    <!-- Variant regular price -->
                    <div class="col-md-6 mb-3">
                        <label for="variantRegularPrice${variantId}" class="form-label">Regular Price <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <span class="input-group-text">₹</span>
                            <input type="number" class="form-control" id="variantRegularPrice${variantId}" name="variants[${variantIndex}][regularPrice]" step="0.01" min="0" required>
                        </div>
                        <div class="field-error" id="variantRegularPrice${variantId}-error"></div>
                    </div>
                    <!-- Variant sales price -->
                    <div class="col-md-6 mb-3">
                        <label for="variantSalesPrice${variantId}" class="form-label">Sales Price</label>
                        <div class="input-group">
                            <span class="input-group-text">₹</span>
                            <input type="number" class="form-control" id="variantSalesPrice${variantId}" name="variants[${variantIndex}][salesPrice]" step="0.01" min="0">
                        </div>
                        <div class="field-error" id="variantSalesPrice${variantId}-error"></div>
                    </div>
                    <!-- Variant manufacturing date -->
                    <div class="col-md-6 mb-3">
                        <label for="variantManufacturingDate${variantId}" class="form-label">Manufacturing Date <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="variantManufacturingDate${variantId}" name="variants[${variantIndex}][manufacturingDate]" required>
                        <div class="field-error" id="variantManufacturingDate${variantId}-error"></div>
                    </div>
                    <!-- Variant expiry date -->
                    <div class="col-md-6 mb-3">
                        <label for="variantExpiryDate${variantId}" class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" id="variantExpiryDate${variantId}" name="variants[${variantIndex}][expiryDate]">
                        <div class="field-error" id="variantExpiryDate${variantId}-error"></div>
                    </div>
                    <!-- Variant unit of measure -->
                    <div class="col-md-6 mb-3">
                        <label for="variantUom${variantId}" class="form-label">Unit of Measure (UOM) <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="variantUom${variantId}" name="variants[${variantIndex}][uom]" required>
                        <div class="field-error" id="variantUom${variantId}-error"></div>
                    </div>
                    <!-- Variant prescription required status -->
                    <div class="col-md-6 mb-3">
                        <label for="variantPrescriptionRequired${variantId}" class="form-label">Prescription Required</label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantPrescriptionRequired${variantId}">
                            <input type="hidden" name="variants[${variantIndex}][prescriptionRequired]" id="variantPrescriptionRequiredValue${variantId}" value="false">
                            <span>Inactive</span>
                        </div>
                    </div>
                    <!-- Variant product status -->
                    <div class="col-md-6 mb-3">
                        <label for="variantProductStatus${variantId}" class="form-label">Product Status <span class="text-danger">*</span></label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantProductStatus${variantId}" checked>
                            <input type="hidden" name="variants[${variantIndex}][isListed]" id="variantProductStatusValue${variantId}" value="true">
                            <span>Listed</span>
                        </div>
                        <div class="field-error" id="variantProductStatus${variantId}-error"></div>
                    </div>
                    <!-- Variant discount status -->
                    <div class="col-md-6 mb-3">
                        <label for="variantDiscountStatus${variantId}" class="form-label">Discount Status</label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantDiscountStatus${variantId}">
                            <input type="hidden" name="variants[${variantIndex}][discountStatus]" id="variantDiscountStatusValue${variantId}" value="false">
                            <span>Inactive</span>
                        </div>
                        <div class="field-error" id="variantDiscountStatus${variantId}-error"></div>
                    </div>
                    <!-- Variant offer status -->
                    <div class="col-md-6 mb-3">
                        <label for="variantOfferStatus${variantId}" class="form-label">Offer Status</label>
                        <div class="status-toggle">
                            <input type="checkbox" id="variantOfferStatus${variantId}">
                            <input type="hidden" name="variants[${variantIndex}][offerStatus]" id="variantOfferStatusValue${variantId}" value="false">
                            <span>Inactive</span>
                        </div>
                        <div class="field-error" id="variantOfferStatus${variantId}-error"></div>
                    </div>
                    <div class="col-12 mb-4">
                        <div class="attribute-group">
                            <h6 class="mb-3">Variant Attributes</h6>
                            <div class="row" id="variantAttributeContainer${variantId}">
                                <p class="text-muted">Please select a category to view attributes.</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 mb-4">
                        <!-- Variant images -->
                        <label class="form-label">Upload Variant Images (3-6 images) <span class="text-danger">*</span></label>
                        <div class="image-upload-container">
                            <div class="image-upload-area" id="variantImageUploadArea${variantId}">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <p>Drop image here to upload and crop (Min: 3 crops required)</p>
                                <p class="text-muted">or click to browse</p>
                               <input type="file" id="variantImageInput${variantId}" name="variants[${variantIndex}][variant_${variantIndex}_images]" accept="image/jpeg,image/png,image/gif" hidden data-variant-index="${variantIndex}">
                            </div>
                            <div class="uploaded-images" id="variantUploadedImages${variantId}"></div>
                            <div class="image-counter" id="variantImageCounter${variantId}">Cropped Images: 0/6 (Minimum 3 required)</div>
                        </div>
                        <div class="field-error" id="variant${variantId}Images-error"></div>
                    </div>
                </div>
            `;
            document.getElementById('variantsContainer').appendChild(variantContainer);
            variantImageCounts[variantId] = 0;

            // Populate variant data if provided
            if (variantData && Object.keys(variantData).length) {
                document.getElementById(`variantQuantity${variantId}`).value = variantData.quantity || '';
                document.getElementById(`variantRegularPrice${variantId}`).value = variantData.regularPrice || '';
                document.getElementById(`variantSalesPrice${variantId}`).value = variantData.salesPrice || '';
                document.getElementById(`variantManufacturingDate${variantId}`).value = variantData.manufacturingDate ? new Date(variantData.manufacturingDate).toISOString().split('T')[0] : '';
                document.getElementById(`variantExpiryDate${variantId}`).value = variantData.expiryDate ? new Date(variantData.expiryDate).toISOString().split('T')[0] : '';
                document.getElementById(`variantUom${variantId}`).value = variantData.uom || '';
                if (variantData.prescriptionRequired) {
                    document.getElementById(`variantPrescriptionRequired${variantId}`).checked = true;
                    document.getElementById(`variantPrescriptionRequiredValue${variantId}`).value = 'true';
                    document.getElementById(`variantPrescriptionRequired${variantId}`).nextElementSibling.nextElementSibling.textContent = 'Active';
                }
                if (variantData.isListed) {
                    document.getElementById(`variantProductStatus${variantId}`).checked = true;
                    document.getElementById(`variantProductStatusValue${variantId}`).value = 'true';
                    document.getElementById(`variantProductStatus${variantId}`).nextElementSibling.nextElementSibling.textContent = 'Listed';
                }
                if (variantData.discountStatus) {
                    document.getElementById(`variantDiscountStatus${variantId}`).checked = true;
                    document.getElementById(`variantDiscountStatusValue${variantId}`).value = 'true';
                    document.getElementById(`variantDiscountStatus${variantId}`).nextElementSibling.nextElementSibling.textContent = 'Active';
                }
                if (variantData.offerStatus) {
                    document.getElementById(`variantOfferStatus${variantId}`).checked = true;
                    document.getElementById(`variantOfferStatusValue${variantId}`).value = 'true';
                    document.getElementById(`variantOfferStatus${variantId}`).nextElementSibling.nextElementSibling.textContent = 'Active';
                }
                if (variantData.attributes) {
                    const attributeContainer = document.getElementById(`variantAttributeContainer${variantId}`);
                    attributeContainer.innerHTML = '';
                    Object.entries(variantData.attributes).forEach(([key, value]) => {
                        const attrDiv = document.createElement('div');
                        attrDiv.className = 'col-md-6 mb-3';
                        attrDiv.innerHTML = `
                            <label for="variant_attr_${key}${variantId}" class="form-label">${key.charAt(0).toUpperCase() + key.slice(1)} <span class="text-danger">*</span></label>
                            <input type="${key === 'kg' || key === 'ml' || key === 'mg' ? 'number' : 'text'}" class="form-control" id="variant_attr_${key}${variantId}" name="variants[${variantIndex}][attributes][${key}]" value="${value}" required>
                            <div class="field-error" id="variant_attr_${key}${variantId}-error"></div>
                        `;
                        attributeContainer.appendChild(attrDiv);
                    });
                }
            }
        }

        function removeVariant(variantId) {
            const variantContainer = document.getElementById(`variant${variantId}`);
            if (variantContainer) {
                variantContainer.remove();
                delete variantImageCounts[variantId];
                if (window.croppedImages && window.croppedImages[variantId]) {
                    delete window.croppedImages[variantId];
                }
                variantCount--;
            }
        }

        function updateVariantAttributesForVariant(variantId) {
            const variantIndex = variantId - 1;
            const categorySelect = document.getElementById('category');
            const variantAttributeContainer = document.getElementById(`variantAttributeContainer${variantId}`);
            const attributes = getCategoryAttributes(categorySelect.value);
            const product = <%- JSON.stringify(product || {}) %>;
            const variant = product.variants && product.variants[variantIndex] ? product.variants[variantIndex] : {};

            if (!variantAttributeContainer) {
                console.error(`Variant attribute container not found for variant ${variantId}`);
                return;
            }

            variantAttributeContainer.innerHTML = '';
            if (!categorySelect.value || attributes.length === 0) {
                variantAttributeContainer.innerHTML = '<p class="text-muted">Please select a category to view attributes.</p>';
            } else {
                const attributeTemplates = {
                    ingredients: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_ingredients${variantId}" class="form-label">Ingredients <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_ingredients${variantId}" name="variants[${variantIndex}][attributes][ingredients]" value="${variant.attributes?.ingredients || ''}" required>
                            <div class="field-error" id="variant_attr_ingredients${variantId}-error"></div>
                        </div>`,
                    material: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_material${variantId}" class="form-label">Material <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_material${variantId}" name="variants[${variantIndex}][attributes][material]" value="${variant.attributes?.material || ''}" required>
                            <div class="field-error" id="variant_attr_material${variantId}-error"></div>
                        </div>`,
                    color: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_color${variantId}" class="form-label">Color <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_color${variantId}" name="variants[${variantIndex}][attributes][color]" value="${variant.attributes?.color || ''}" required>
                            <div class="field-error" id="variant_attr_color${variantId}-error"></div>
                        </div>`,
                    ml: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_ml${variantId}" class="form-label">Milliliters (ml) <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="variant_attr_ml${variantId}" name="variants[${variantIndex}][attributes][ml]" value="${variant.attributes?.ml || ''}" step="0.01" min="0" required>
                            <div class="field-error" id="variant_attr_ml${variantId}-error"></div>
                        </div>`,
                    mg: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_mg${variantId}" class="form-label">Milligrams (mg) <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="variant_attr_mg${variantId}" name="variants[${variantIndex}][attributes][mg]" value="${variant.attributes?.mg || ''}" step="0.01" min="0" required>
                            <div class="field-error" id="variant_attr_mg${variantId}-error"></div>
                        </div>`,
                    size: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_size${variantId}" class="form-label">Size <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_size${variantId}" name="variants[${variantIndex}][attributes][size]" required>
                            <div class="field-error" id="variant_attr_size${variantId}-error"></div>
                        </div>`,    
                    gm: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_gm${variantId}" class="form-label">gm <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_gm${variantId}" name="variants[${variantIndex}][attributes][gm]" required>
                            <div class="field-error" id="variant_attr_gm${variantId}-error"></div>
                        </div>` ,  
                     stage: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_stage${variantId}" class="form-label">Stage <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_stage${variantId}" name="variants[${variantIndex}][attributes][stage]" required>
                            <div class="field-error" id="variant_attr_stage${variantId}-error"></div>
                        </div>`,
                      kg: `
                        <div class="col-md-6 mb-3">
                            <label for="variant_attr_kg${variantId}" class="form-label">kg <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="variant_attr_kg${variantId}" name="variants[${variantIndex}][attributes][kg]" required>
                            <div class="field-error" id="variant_attr_kg${variantId}-error"></div>
                        </div>`         
                };

                attributes.forEach(attr => {
                    if (attributeTemplates[attr]) {
                        variantAttributeContainer.insertAdjacentHTML('beforeend', attributeTemplates[attr]);
                    }
                });
            }
        }

        function initializeCategoryChangeListener() {
            const categorySelect = document.getElementById('category');
            if (!categorySelect) {
                console.error('Category select not found');
                return;
            }
            categorySelect.addEventListener('change', () => {
                for (let i = 1; i <= variantCount; i++) {
                    updateVariantAttributesForVariant(i);
                }
            });
            for (let i = 1; i <= variantCount; i++) {
                updateVariantAttributesForVariant(i);
            }
        }

        function getCategoryAttributes(categoryId) {
            if (!categories || !Array.isArray(categories) || categories.length === 0) {
                console.warn('Categories data is missing or empty');
                return [];
            }
            const selectedCategory = categories.find(cat => String(cat._id) === String(categoryId));
            if (!selectedCategory) {
                console.warn('Category not found for ID:', categoryId);
                return [];
            }

            const categoryName = selectedCategory.name.toUpperCase();
            const categoryAttributes = {
                'TABLET': ['ingredients', 'mg'],
                'CAPSULE': ['ingredients', 'mg'],
                'NRX TABLET': ['ingredients', 'mg'],
                'OINTMENT': ['ingredients', 'gm'],
                'DROP': [ 'ingredients','ml'],
                'SYRUP': [ 'ingredients','ml'],
                'FOOD': [ 'ingredients','kg','stage'],
                'MEDICAL EQUIPMENT': [ 'ingredients','material', 'color' ],
                'BODY SUPPORT': ['ingredients', 'size']
            };
            return categoryAttributes[categoryName] || [];
        }

        function initializeVariantImageUpload(variantId) {
            const imageUploadArea = document.getElementById(`variantImageUploadArea${variantId}`);
            const imageInput = document.getElementById(`variantImageInput${variantId}`);
            const uploadedImagesContainer = document.getElementById(`variantUploadedImages${variantId}`);
            const imageCounter = document.getElementById(`variantImageCounter${variantId}`);

            if (!imageUploadArea || !imageInput || !uploadedImagesContainer || !imageCounter) {
                console.error(`Variant image upload elements not found for variant ${variantId}`);
                return;
            }

            if (!window.croppedImages) {
                window.croppedImages = {};
            }
            if (!window.croppedImages[variantId]) {
                window.croppedImages[variantId] = [];
            }

            imageUploadArea.addEventListener('click', () => {
                imageInput.click();
            });

            imageUploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                imageUploadArea.style.borderColor = '#28a745';
                imageUploadArea.style.backgroundColor = 'rgba(40, 167, 69, 0.1)';
            });

            imageUploadArea.addEventListener('dragleave', (e) => {
                e.preventDefault();
                imageUploadArea.style.borderColor = '#dee2e6';
                imageUploadArea.style.backgroundColor = '';
            });

            imageUploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                imageUploadArea.style.borderColor = '#dee2e6';
                imageUploadArea.style.backgroundColor = '';
                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    handleImageFile(files[0], variantId);
                }
            });

            imageInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleImageFile(e.target.files[0], variantId);
                }
            });

            function handleImageFile(file, variantId) {
                if (variantImageCounts[variantId] >= 6) {
                    showToast('Maximum 6 images allowed per variant');
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    openCropModal(e.target.result, file, variantId);
                };
                reader.readAsDataURL(file);
            }

            function openCropModal(imageSrc, file, variantId) {
                const cropImage = document.getElementById('cropImage');
                const modal = new bootstrap.Modal(document.getElementById('imageCropModal'));
                
                cropImage.src = imageSrc;
                modal.show();

                window.currentCropSession = {
                    variantId: variantId,
                    file: file,
                    cropper: null
                };
            }
        }

        function initializeStatusTogglesForVariant(variantId) {
            const discountToggle = document.getElementById(`variantDiscountStatus${variantId}`);
            const offerToggle = document.getElementById(`variantOfferStatus${variantId}`);
            const productStatusToggle = document.getElementById(`variantProductStatus${variantId}`);
            const prescriptionToggle = document.getElementById(`variantPrescriptionRequired${variantId}`);
            const discountValue = document.getElementById(`variantDiscountStatusValue${variantId}`);
            const offerValue = document.getElementById(`variantOfferStatusValue${variantId}`);
            const productStatusValue = document.getElementById(`variantProductStatusValue${variantId}`);
            const prescriptionValue = document.getElementById(`variantPrescriptionRequiredValue${variantId}`);

            const statusToggles = document.querySelectorAll(`#variant${variantId} .status-toggle input[type="checkbox"]`);

            statusToggles.forEach(toggle => {
                toggle.addEventListener('change', () => {
                    const statusLabel = toggle.nextElementSibling.nextElementSibling;
                    if (toggle === productStatusToggle) {
                        productStatusValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Listed' : 'Unlisted';
                    } else if (toggle === discountToggle) {
                        discountValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Active' : 'Inactive';
                    } else if (toggle === offerToggle) {
                        offerValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Active' : 'Inactive';
                    } else if (toggle === prescriptionToggle) {
                        prescriptionValue.value = toggle.checked ? 'true' : 'false';
                        statusLabel.textContent = toggle.checked ? 'Active' : 'Inactive';
                    }

                    if (toggle === discountToggle && toggle.checked && offerToggle.checked) {
                        offerToggle.checked = false;
                        offerValue.value = 'false';
                        offerToggle.nextElementSibling.nextElementSibling.textContent = 'Inactive';
                        showToast('Discount Status and Offer Status cannot be selected at the same time.');
                    } else if (toggle === offerToggle && toggle.checked && discountToggle.checked) {
                        discountToggle.checked = false;
                        discountValue.value = 'false';
                        discountToggle.nextElementSibling.nextElementSibling.textContent = 'Inactive';
                        showToast('Discount Status and Offer Status cannot be selected at the same time.');
                    }
                });
            });
        }
        function initializeFormSubmission() {
            const form = document.getElementById('productForm');
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                console.log('Form submission triggered'); // Debug: Confirm event fires
                clearErrors();

                let isValid = true;
                const requiredFields = form.querySelectorAll('[required]');
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        isValid = false;
                        const errorDiv = document.getElementById(`${field.id}-error`);
                        errorDiv.textContent = `Please fill in the ${field.labels[0]?.textContent || field.name} field.`;
                    }
                });

                // Validate that each variant has at least 3 images (existing + new)
                for (let i = 1; i <= variantCount; i++) {
                    const existingImages = document.querySelectorAll(`#variantUploadedImages${i} .uploaded-image`).length;
                    if (existingImages < 3) {
                        isValid = false;
                        const errorDiv = document.getElementById(`variant${i}Images-error`);
                        errorDiv.textContent = `Please ensure Variant ${i} has at least 3 images.`;
                    }
                }

                if (!isValid) {
                    console.log('Validation failed:', document.querySelectorAll('.field-error')); // Debug: Log validation errors
                    return;
                }

                const formData = new FormData(form);
                console.log('FormData contents:'); // Debug: Inspect form data
                for (let [key, value] of formData.entries()) {
                    console.log(`${key}:`, value instanceof File ? value.name : value);
                }

                toggleFormDisabled(true);
                document.getElementById('spinnerOverlay').style.display = 'block';

                try {
                    const productId = document.getElementById('productId').value;
                    const res = await fetch(`/admin/products/edit/${productId}`, {
                        method: 'PUT',
                        body: formData,
                    });

                    const result = await res.json();
                    if (res.ok && result.success) {
                        showToast('Product updated successfully: ' + result.product.name);
                        setTimeout(() => {
                            window.location.href = '/admin/products';
                        }, 2000);
                    } else {
                        handleBackendErrors(result);
                        showToast('Failed to update product: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    console.error("Error:", error);
                    showToast('Something went wrong!');
                } finally {
                    toggleFormDisabled(false);
                    document.getElementById('spinnerOverlay').style.display = 'none';
                }
            });

            // Ensure form is enabled on page load
            toggleFormDisabled(false);
        }

        function clearErrors() {
            document.querySelectorAll('.field-error').forEach(error => {
                error.textContent = '';
            });
        }

        function handleBackendErrors(result) {
            if (result.errors && Array.isArray(result.errors)) {
                result.errors.forEach(error => {
                    const fieldId = error.field;
                    const errorDiv = document.getElementById(`${fieldId}-error`);
                    if (errorDiv) {
                        errorDiv.textContent = error.message;
                    } else {
                        showToast(error.message);
                    }
                });
            } else if (result.message) {
                showToast(result.message);
            }
        }

        function toggleFormDisabled(disabled) {
            const buttons = document.querySelectorAll('#productForm button, #addVariantBtn, #cancelBtn, #updateProductBtn');
            const inputs = document.querySelectorAll('#productForm input, #productForm select, #productForm textarea');
            buttons.forEach(button => {
                button.disabled = disabled;
            });
            inputs.forEach(input => {
                input.disabled = disabled;
            });
        }
    </script>
</body>
</html>