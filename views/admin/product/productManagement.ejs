<% 
    const pageData = {
        title: 'Products - Carezon Admin',
        pageTitle: 'Products Management',
        breadcrumb: [
            { name: 'dashboard', url: '/admin/dashboard' },
            { name: 'Products', url: '/admin/products' }
        ],
        pageActions: '<button class="btn btn-success" onclick="window.location.href=\'/admin/products/add\'"><i class="fas fa-plus"></i> Add Product</button>'
    };
%>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= pageData.title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/admin/css/dashboard.css">
    <link rel="stylesheet" href="/admin/css/product.css">
    
</head>
<body>
    <!-- Header -->
    <%- include('../partials/admin/header') %>

    <!-- Sidebar -->
    <%- include('../partials/admin/sidebar') %>

    <!-- Main Content -->
    <main class="main-content" id="main-content">
        <div class="content-wrapper">
            <!-- Page Header -->
            <div class="page-header mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="page-title"><%= pageData.pageTitle %></h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <% pageData.breadcrumb.forEach(function(item, index) { %>
                                    <li class="breadcrumb-item <%= index === pageData.breadcrumb.length - 1 ? 'active' : '' %>">
                                        <% if (index < pageData.breadcrumb.length - 1) { %>
                                            <a href="<%= item.url %>"><%= item.name %></a>
                                        <% } else { %>
                                            <%= item.name %>
                                        <% } %>
                                    </li>
                                <% }); %>
                            </ol>
                        </nav>
                    </div>
                    <div class="page-actions">
                        <%- pageData.pageActions %>
                    </div>
                </div>
            </div>

            <!-- Products Content -->
            <div class="page-content">
                <!-- Search and Filter Section -->
                <div class="row mb-4 align-items-center">
                    <div class="col-md-5 position-relative">
                        <div class="search-box">
                            <i class="fas fa-search"></i>
                            <input type="text" class="form-control" id="searchInput" placeholder="Search products...">
                            <button class="clear-btn" id="clearSearch" title="Clear search"><i class="fas fa-times"></i></button>
                            <button class="history-toggle" id="historyToggle" title="Toggle search history"></i></button>
                        </div>
                        <div class="search-history" id="searchHistory">
                            <div class="search-history-header">
                                <span>Recent Searches</span>
                                <button class="clear-all-btn" id="clearAllHistory">Clear All</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 offset-md-3">
                        <div class="sort-filter-group d-flex gap-2">
                            <select class="form-select" id="statusFilter">
                                <option value="">All Products</option>
                                <option value="active" <%= currentStatus === 'active' ? 'selected' : '' %>>Active Products</option>
                                <option value="blocked" <%= currentStatus === 'blocked' ? 'selected' : '' %>>Blocked Products</option>
                            </select>
                            <select class="form-select" id="limitSelect" style="max-width: 100px;">
                                <option value="10" <%= currentLimit === 10 ? 'selected' : '' %>>10</option>
                                <option value="30" <%= currentLimit === 30 ? 'selected' : '' %>>30</option>
                                <option value="50" <%= currentLimit === 50 ? 'selected' : '' %>>50</option>
                                <option value="100" <%= currentLimit === 100 ? 'selected' : '' %>>100</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Products Table -->
                <div class="table-responsive">
                    <table class="table table-hover" id="productsTable">
                        <thead>
                            <tr>
                                <th>S.No</th>
                                <th>Product</th>
                                <th>Category</th>
                                <th>Brand</th>
                                <th>MRP</th>
                                <th>S Price</th>
                                <th>Stock</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (products.length === 0) { %>
                                <tr>
                                    <td colspan="8" class="text-center">No Products found, Please Add Products</td>
                                </tr>
                            <% } else { %>
                                <% products.forEach(pro => { %>
                                    <tr data-product-id="<%= pro._id %>">
                                        <td class="font-weight-bold"><%= pro.serialNo %></td>
                                        <td class="font-weight-semibold"><%= pro.name %></td>
                                        <td class="font-weight-semibold"><%= pro.category %></td>
                                        <td class="font-weight-semibold"><%= pro.brand %></td>
                                        <td class="text-light-red">₹<%= pro.regularPrice %></td>
                                        <td class="text-light-green">₹<%= pro.salesPrice %></td>
                                        <td class="<%= pro.stock < 10 ? 'text-danger' : 'text-success' %>"><%= pro.stock %></td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="status-btn" onclick="showVariantStatusModal('<%= pro._id %>')">
                                                    Variants Status
                                                </button>
                                                <button class="edit-btn btn-blue" onclick="editProduct('<%= pro._id %>')">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                <button class="view-btn btn-light-blue" onclick="viewProduct('<%= pro._id %>')">
                                                    <i class="fas fa-eye"></i> View More
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="pagination-section">
                   <div>Showing <%= ((currentPage - 1) * currentLimit + 1) %> to <%= Math.min(currentPage * currentLimit, products.length + ((currentPage - 1) * currentLimit)) %> of <%= totalProducts %> products | Page <%= currentPage %> of <%= totalPages %></div>
                    <div class="pagination-controls">
                       <button class="btn" <%= currentPage === 1 ? 'disabled' : '' %> onclick="navigateToPage(<%= currentPage - 1 %>)"><i class="fas fa-chevron-left"></i></button>
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <button class="btn <%= i === currentPage ? 'active' : '' %>" onclick="navigateToPage(<%= i %>)"><%= i %></button>
                        <% } %>
                        <button class="btn" <%= currentPage === totalPages ? 'disabled' : '' %> onclick="navigateToPage(<%= currentPage + 1 %>)"><i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Variant Status Management Modal -->
    <div class="modal fade variant-status-modal" id="variantStatusModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="variant-status-header">
                        <h5><i class="fas fa-layer-group me-2"></i>Manage Product Variants Status</h5>
                        <p>Control the active/inactive status of individual product variants</p>
                    </div>
                    <div id="variantStatusContent">
                        <!-- Variants will be loaded here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="modal-footer-actions">
                        <div class="changes-indicator hidden" id="changesIndicator">
                            <i class="fas fa-info-circle me-1"></i>
                            <span id="changesCount">0</span> changes pending
                        </div>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="applyChangesBtn" disabled>
                            <i class="fas fa-save me-1"></i>Apply Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details Modal -->
    <div class="modal fade product-details-modal" id="viewModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalTitle">Product Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="viewModalBody"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="editCurrentProduct()">
                        <i class="fas fa-edit"></i> Edit Product
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Lightbox -->
    <div class="image-lightbox" id="imageLightbox">
        <div class="lightbox-content">
            <button class="lightbox-close" onclick="closeLightbox()"><i class="fas fa-times"></i></button>
            <button class="lightbox-nav lightbox-prev" onclick="previousImage()"><i class="fas fa-chevron-left"></i></button>
            <img class="lightbox-image" id="lightboxImage" src="/placeholder.svg" alt="Product Image">
            <button class="lightbox-nav lightbox-next" onclick="nextImage()"><i class="fas fa-chevron-right"></i></button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let searchHistory = JSON.parse(localStorage.getItem('searchHistory')) || [];
        let isHistoryVisible = false;
        let currentProductData = null;
        let lightboxImages = [];
        let currentImageIndex = 0;
        let variantChanges = new Map();
        let currentProductId = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            initializePage();
            initializeModals();
        });

        function initializePage() {
            const sidebar = document.getElementById("sidebar");
            const mainContent = document.getElementById("main-content");
            const sidebarToggle = document.getElementById("sidebar-toggle");
            const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
            const sidebarLinks = document.querySelectorAll(".sidebar-link");
            const searchInput = document.getElementById('searchInput');
            const clearSearch = document.getElementById('clearSearch');
            const searchHistoryDiv = document.getElementById('searchHistory');
            const historyToggle = document.getElementById('historyToggle');
            const clearAllHistoryBtn = document.getElementById('clearAllHistory');
            const categorySort = document.getElementById('categorySort');
            const sortOrder = document.getElementById('sortOrder');

            // Sidebar initialization
            const isCollapsed = localStorage.getItem("sidebarCollapsed") === "true";
            if (isCollapsed) {
                sidebar.classList.add("collapsed");
                mainContent.classList.add("expanded");
                sidebarToggle.querySelector("i").classList.replace("fa-chevron-left", "fa-chevron-right");
            }

            if (sidebarToggle) {
                sidebarToggle.addEventListener("click", () => {
                    const isCollapsed = sidebar.classList.toggle("collapsed");
                    mainContent.classList.toggle("expanded");
                    const icon = sidebarToggle.querySelector("i");
                    icon.classList.toggle("fa-chevron-left", !isCollapsed);
                    icon.classList.toggle("fa-chevron-right", isCollapsed);
                    localStorage.setItem("sidebarCollapsed", isCollapsed);
                });
            }

            if (mobileMenuToggle) {
                mobileMenuToggle.addEventListener("click", () => {
                    sidebar.classList.toggle("show");
                });
            }

            const currentPath = window.location.pathname;
            sidebarLinks.forEach(link => {
                link.classList.toggle("active", new URL(link.href).pathname === currentPath);
            });

            // Products page initialization
            document.querySelectorAll('#productsTable tbody tr').forEach((row, index) => {
                row.style.animationDelay = `${index * 0.1}s`;
                row.classList.add('fade-in');
            });
            
            updateSearchButtons();

            if (searchInput) {
                const debouncedSearch = debounce(handleSearch, 300);
                searchInput.addEventListener('input', debouncedSearch);
                clearSearch.addEventListener('click', () => {
                    searchInput.value = '';
                    handleSearch({ target: searchInput });
                });
                updateSearchHistoryUI();
            }

            searchInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    handleSearch({ target: searchInput });
                }
            });

           if (categorySort) categorySort.addEventListener('change', handleCategorySort);
            const statusFilter = document.getElementById('statusFilter');
            const limitSelect = document.getElementById('limitSelect');
            if (statusFilter) statusFilter.addEventListener('change', handleStatusFilter);
            if (limitSelect) limitSelect.addEventListener('change', handleLimitChange);

            // Update status button colors based on variant status
            updateStatusButtonColors();
        }

        function updateStatusButtonColors() {
            document.querySelectorAll('#productsTable tbody tr').forEach(async (row) => {
                const productId = row.dataset.productId;
                try {
                    const response = await fetch(`/admin/products/details/${productId}`);
                    const data = await response.json();
                    if (data.success && data.product.variants) {
                        const statusBtn = row.querySelector('.status-btn');
                        const hasActiveVariant = data.product.variants.some(variant => variant.isListed);
                        statusBtn.classList.remove('red', 'green');
                        statusBtn.classList.add(hasActiveVariant ? 'green' : 'red');
                    }
                } catch (error) {
                    console.error('Error fetching product details:', error);
                }
            });
        }

        function handleSortOrder() {
            const sortOrder = document.getElementById('sortOrder').value;
            const table = document.getElementById('productsTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                const nameA = a.cells[1].textContent.toLowerCase();
                const nameB = b.cells[1].textContent.toLowerCase();
                return sortOrder === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
            });

            tbody.innerHTML = '';
            rows.forEach((row, index) => {
                row.cells[0].textContent = index + 1;
                tbody.appendChild(row);
            });
        }

        function initializeModals() {
            const applyChangesBtn = document.getElementById('applyChangesBtn');
            applyChangesBtn.addEventListener('click', applyVariantStatusChanges);

            document.getElementById('variantStatusModal').addEventListener('hidden.bs.modal', () => {
                variantChanges.clear();
                updateChangesIndicator();
                currentProductId = null;
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func(...args), wait);
            };
        }

        async function showVariantStatusModal(productId) {
            try {
                currentProductId = productId;
                const response = await fetch(`/admin/products/details/${productId}`);
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error('Failed to load product details');
                }

                const product = data.product;
                renderVariantStatusContent(product);
                
                new bootstrap.Modal(document.getElementById('variantStatusModal')).show();
            } catch (error) {
                console.error('Error loading product variants:', error);
                showNotification('Failed to load product variants', 'error');
            }
        }

        function renderVariantStatusContent(product) {
            const content = document.getElementById('variantStatusContent');
            
            if (!product.variants || product.variants.length === 0) {
                content.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Variants Found</h5>
                        <p class="text-muted">This product doesn't have any variants to manage.</p>
                    </div>
                `;
                return;
            }

            const variantsHtml = product.variants.map((variant, index) => {
                const variantId = variant._id || index;
                const attributes = variant.attributes || {};
                const attributesHtml = Object.keys(attributes).length > 0 ? 
                    Object.entries(attributes).map(([key, value]) => 
                        `<span class="attribute-tag">${key}: ${value}</span>`
                    ).join('') : '<span class="text-muted">No attributes</span>';

                return `
                    <div class="variant-status-card" data-variant-id="${variantId}">
                        <div class="variant-card-header">
                            <div class="variant-name">${product.name} - Variant ${index + 1}</div>
                            <div class="variant-current-status ${variant.isListed ? 'active' : 'inactive'}">
                                ${variant.isListed ? 'Active' : 'Inactive'}
                            </div>
                        </div>
                        
                        <div class="variant-details-grid">
                            <div class="variant-attributes">
                                <div class="variant-detail-label">Attributes</div>
                                <div class="attributes-list">
                                    ${attributesHtml}
                                </div>
                            </div>
                            <div class="variant-detail">
                                <div class="variant-detail-label">MRP</div>
                                <div class="variant-detail-value price-value text-light-red">₹${variant.regularPrice || '0'}</div>
                            </div>
                            <div class="variant-detail">
                                <div class="variant-detail-label">UOM</div>
                                <div class="variant-detail-value">${variant.uom || 'N/A'}</div>
                            </div>
                        </div>

                        <div class="variant-action-section">
                            <div class="variant-info-text">
                                Current Status: <strong>${variant.isListed ? 'Active' : 'Inactive'}</strong>
                            </div>
                            <button class="variant-toggle-btn ${variant.isListed ? 'active' : 'inactive'}" 
                                    onclick="toggleVariantStatus('${variantId}', ${!variant.isListed})"
                                    data-current-status="${variant.isListed}">
                                <i class="fas fa-${variant.isListed ? 'pause' : 'play'} me-1"></i>
                                ${variant.isListed ? 'Deactivate' : 'Activate'}
                            </button>
                        </div>
                    </div>
                `;
            }).join('');

            content.innerHTML = `
                <div class="variants-grid">
                    ${variantsHtml}
                </div>
            `;
        }

        function toggleVariantStatus(variantId, newStatus) {
            const card = document.querySelector(`[data-variant-id="${variantId}"]`);
            const button = card.querySelector('.variant-toggle-btn');
            const currentStatus = button.dataset.currentStatus === 'true';

            if (newStatus !== currentStatus) {
                variantChanges.set(variantId, newStatus);
            } else {
                variantChanges.delete(variantId);
            }

            button.className = `variant-toggle-btn ${newStatus ? 'active' : 'inactive'}`;
            button.innerHTML = `<i class="fas fa-${newStatus ? 'pause' : 'play'} me-1"></i>${newStatus ? 'Deactivate' : 'Activate'}`;
            button.onclick = () => toggleVariantStatus(variantId, !newStatus);

            const statusIndicator = card.querySelector('.variant-current-status');
            const infoText = card.querySelector('.variant-info-text');
            
            if (variantChanges.has(variantId)) {
                card.style.borderColor = '#667eea';
                card.style.backgroundColor = '#f8f9ff';
                statusIndicator.innerHTML = `${newStatus ? 'Active' : 'Inactive'} <i class="fas fa-arrow-right mx-1"></i> <span style="color: #667eea;">PENDING</span>`;
                infoText.innerHTML = `Will change to: <strong style="color: #667eea;">${newStatus ? 'Active' : 'Inactive'}</strong>`;
            } else {
                card.style.borderColor = '#e9ecef';
                card.style.backgroundColor = '#fff';
                statusIndicator.className = `variant-current-status ${currentStatus ? 'active' : 'inactive'}`;
                statusIndicator.innerHTML = currentStatus ? 'Active' : 'Inactive';
                infoText.innerHTML = `Current Status: <strong>${currentStatus ? 'Active' : 'Inactive'}</strong>`;
            }

            updateChangesIndicator();
        }

        function updateChangesIndicator() {
            const indicator = document.getElementById('changesIndicator');
            const count = document.getElementById('changesCount');
            const applyBtn = document.getElementById('applyChangesBtn');

            count.textContent = variantChanges.size;
            
            if (variantChanges.size > 0) {
                indicator.classList.remove('hidden');
                applyBtn.disabled = false;
            } else {
                indicator.classList.add('hidden');
                applyBtn.disabled = true;
            }
        }

        async function applyVariantStatusChanges() {
            if (variantChanges.size === 0) return;

            try {
                const changesArray = Array.from(variantChanges.entries());
                const updates = changesArray.map(([variantId, newStatus]) => ({
                    variantId,
                    isListed: newStatus
                }));

                const response = await fetch(`/admin/products/status/${currentProductId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ variants: updates })
                });

                const data = await response.json();

                if (data.success) {
                    changesArray.forEach(([variantId, newStatus]) => {
                        const card = document.querySelector(`[data-variant-id="${variantId}"]`);
                        const variantName = card.querySelector('.variant-name').textContent;
                        showNotification(`${variantName} Status Changed`);
                        
                        const button = card.querySelector('.variant-toggle-btn');
                        const statusIndicator = card.querySelector('.variant-current-status');
                        const infoText = card.querySelector('.variant-info-text');

                        button.className = `variant-toggle-btn ${newStatus ? 'active' : 'inactive'}`;
                        button.innerHTML = `<i class="fas fa-${newStatus ? 'pause' : 'play'} me-1"></i>${newStatus ? 'Deactivate' : 'Activate'}`;
                        button.onclick = () => toggleVariantStatus(variantId, !newStatus);
                        button.dataset.currentStatus = newStatus;

                        statusIndicator.className = `variant-current-status ${newStatus ? 'active' : 'inactive'}`;
                        statusIndicator.innerHTML = newStatus ? 'Active' : 'Inactive';

                        infoText.innerHTML = `Current Status: <strong>${newStatus ? 'Active' : 'Inactive'}</strong>`;

                        card.style.borderColor = '#e9ecef';
                        card.style.backgroundColor = '#fff';
                    });

                    variantChanges.clear();
                    updateChangesIndicator();
                    bootstrap.Modal.getInstance(document.getElementById('variantStatusModal')).hide();
                    updateStatusButtonColors();
                } else {
                    showNotification(data.message || 'Failed to update variant status', 'error');
                }
            } catch (error) {
                console.error('Error updating variant status:', error);
                showNotification('Failed to update variant status', 'error');
            }
        }

        function updateSearchButtons() {
            const searchInput = document.getElementById('searchInput');
            const clearSearch = document.getElementById('clearSearch');
            clearSearch.classList.toggle('active', !!searchInput.value);
        }

        function showSearchHistory() {
            const searchHistoryDiv = document.getElementById('searchHistory');
            if (searchHistory.length > 0) searchHistoryDiv.style.display = 'block';
        }

        function updateSearchHistoryUI() {
            const searchHistoryDiv = document.getElementById('searchHistory');
            const itemsContainer = searchHistoryDiv.querySelector('.search-history-header').parentNode;
            itemsContainer.querySelectorAll('.search-history-item').forEach(item => item.remove());

            searchHistory.forEach((term, index) => {
                const historyItem = document.createElement('div');
                historyItem.className = 'search-history-item';
                historyItem.innerHTML = `
                    <span>${term}</span>
                    <button class="clear-item-btn" title="Clear this search"><i class="fas fa-times"></i></button>
                `;
                historyItem.querySelector('span').addEventListener('click', () => {
                    document.getElementById('searchInput').value = term;
                    handleSearch({ target: document.getElementById('searchInput') });
                });
                historyItem.querySelector('.clear-item-btn').addEventListener('click', () => {
                    searchHistory.splice(index, 1);
                    localStorage.setItem('searchHistory', JSON.stringify(searchHistory));
                    updateSearchHistoryUI();
                    if (searchHistory.length === 0) searchHistoryDiv.style.display = 'none';
                });
                itemsContainer.appendChild(historyItem);
            });

            document.getElementById('clearAllHistory').style.display = searchHistory.length > 0 ? 'block' : 'none';
        }

        function addToSearchHistory(term) {
            if (term && !searchHistory.includes(term)) {
                searchHistory.unshift(term);
                if (searchHistory.length > 5) searchHistory.pop();
                localStorage.setItem('searchHistory', JSON.stringify(searchHistory));
                updateSearchHistoryUI();
            }
        }

        async function handleSearch(event) {
            const searchTerm = event.target.value.trim().toLowerCase();
            const tableBody = document.querySelector('#productsTable tbody');
            
            if (searchTerm) {
                addToSearchHistory(searchTerm);
                try {
                    const response = await fetch(`/admin/products/search?search=${encodeURIComponent(searchTerm)}&page=1&limit=10`);
                    const data = await response.json();

                    if (data.success && data.products.length > 0) {
                        // Clear existing table rows
                        tableBody.innerHTML = '';

                        // Render new search results
                        data.products.forEach((pro, index) => {
                            const row = document.createElement('tr');
                            row.dataset.productId = pro._id;
                            row.classList.add('fade-in');
                            row.style.animationDelay = `${index * 0.1}s`;
                            row.innerHTML = `
                                <td class="font-weight-bold">${index + 1}</td>
                                <td class="font-weight-semibold">${pro.name}</td>
                                <td class="font-weight-semibold">${pro.category.name}</td>
                                <td class="font-weight-semibold">${pro.brand.name}</td>                     
                                <td class="text-light-red">₹${pro.regularPrice}</td>
                                <td class="text-light-green">₹${pro.salesPrice}</td>
                                <td class="${pro.stock < 10 ? 'text-danger' : 'text-success'}">${pro.stock}</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="status-btn" onclick="showVariantStatusModal('${pro._id}')">
                                            Variants Status
                                        </button>
                                        <button class="edit-btn btn-blue" onclick="editProduct('${pro._id}')">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button class="view-btn btn-light-blue" onclick="viewProduct('${pro._id}')">
                                            <i class="fas fa-eye"></i> View More
                                        </button>
                                    </div>
                                </td>
                            `;
                            tableBody.appendChild(row);
                        });

                       // Update pagination section and controls
                        const paginationSection = document.querySelector('.pagination-section div:first-child');
                        const totalProducts = data.totalPages * 10; // or use data.totalProducts if you added it
                        paginationSection.textContent = `Showing ${((data.currentPage - 1) * 10) + 1} to ${Math.min(data.currentPage * 10, totalProducts)} of ${totalProducts} products | Page ${data.currentPage} of ${data.totalPages}`;

                        // Update pagination controls for search results
                        const paginationControls = document.querySelector('.pagination-controls');
                        if (data.totalPages <= 1) {
                            paginationControls.style.display = 'none';
                        } else {
                            paginationControls.style.display = 'flex';
                            paginationControls.innerHTML = `
                                <button class="btn" ${data.currentPage === 1 ? 'disabled' : ''} onclick="searchWithPagination(${data.currentPage - 1})"><i class="fas fa-chevron-left"></i></button>
                                ${Array.from({length: data.totalPages}, (_, i) => i + 1).map(i => 
                                    `<button class="btn ${i === data.currentPage ? 'active' : ''}" onclick="searchWithPagination(${i})">${i}</button>`
                                ).join('')}
                                <button class="btn" ${data.currentPage === data.totalPages ? 'disabled' : ''} onclick="searchWithPagination(${data.currentPage + 1})"><i class="fas fa-chevron-right"></i></button>
                            `;
                        }
                        // Update status button colors
                        updateStatusButtonColors();
                    } else {
                        tableBody.innerHTML = `
                            <tr id="noResultsRow">
                                <td colspan="8" class="text-center py-4">
                                    <i class="fas fa-search fa-2x text-muted mb-2"></i>
                                    <p class="text-muted mb-0">No products found matching your criteria</p>
                                </td>
                            </tr>
                        `;
                    }
                } catch (error) {
                    console.error('Error fetching products:', error);
                    showNotification('Error searching products', 'error');
                }
            } else {
                // If search term is empty, reload the full product list (optional, depending on your use case)
                window.location.href = '/admin/products?page=1';
            }

            updateSearchButtons();
        }

        async function searchWithPagination(page) {
            const searchTerm = document.getElementById('searchInput').value.trim();
            if (!searchTerm) return;
            
            try {
                const response = await fetch(`/admin/products/search?search=${encodeURIComponent(searchTerm)}&page=${page}&limit=10`);
                const data = await response.json();
                
                if (data.success) {
                    const tableBody = document.querySelector('#productsTable tbody');
                    tableBody.innerHTML = '';
                    
                    data.products.forEach((pro, index) => {
                        const row = document.createElement('tr');
                        row.dataset.productId = pro._id;
                        row.classList.add('fade-in');
                        row.style.animationDelay = `${index * 0.1}s`;
                        row.innerHTML = `
                            <td class="font-weight-bold">${((page - 1) * 10) + index + 1}</td>
                            <td class="font-weight-semibold">${pro.name}</td>
                            <td class="font-weight-semibold">${pro.category.name}</td>
                            <td class="font-weight-semibold">${pro.brand.name}</td>
                            <td class="text-light-red">₹${pro.regularPrice}</td>
                            <td class="text-light-green">₹${pro.salesPrice}</td>
                            <td class="${pro.stock < 10 ? 'text-danger' : 'text-success'}">${pro.stock}</td>
                            <td>
                                <div class="action-buttons">
                                    <button class="status-btn" onclick="showVariantStatusModal('${pro._id}')">
                                        Variants Status
                                    </button>
                                    <button class="edit-btn btn-blue" onclick="editProduct('${pro._id}')">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="view-btn btn-light-blue" onclick="viewProduct('${pro._id}')">
                                        <i class="fas fa-eye"></i> View More
                                    </button>
                                </div>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                    
                    // Update pagination info
                    const paginationSection = document.querySelector('.pagination-section div:first-child');
                    const totalProducts = data.totalPages * 10;
                    paginationSection.textContent = `Showing ${((data.currentPage - 1) * 10) + 1} to ${Math.min(data.currentPage * 10, totalProducts)} of ${totalProducts} products | Page ${data.currentPage} of ${data.totalPages}`;
                    
                    // Update pagination controls
                    const paginationControls = document.querySelector('.pagination-controls');
                    paginationControls.innerHTML = `
                        <button class="btn" ${data.currentPage === 1 ? 'disabled' : ''} onclick="searchWithPagination(${data.currentPage - 1})"><i class="fas fa-chevron-left"></i></button>
                        ${Array.from({length: data.totalPages}, (_, i) => i + 1).map(i => 
                            `<button class="btn ${i === data.currentPage ? 'active' : ''}" onclick="searchWithPagination(${i})">${i}</button>`
                        ).join('')}
                        <button class="btn" ${data.currentPage === data.totalPages ? 'disabled' : ''} onclick="searchWithPagination(${data.currentPage + 1})"><i class="fas fa-chevron-right"></i></button>
                    `;
                    
                    updateStatusButtonColors();
                }
            } catch (error) {
                console.error('Error in search pagination:', error);
                showNotification('Error loading search results', 'error');
            }
        }

        function handleCategorySort() {
            const category = document.getElementById('categorySort').value;
            const tableRows = document.querySelectorAll('#productsTable tbody tr');

            tableRows.forEach(row => {
                row.style.display = !category || row.cells[2].textContent.trim() === category ? '' : 'none';
                if (!row.style.display) row.classList.add('slide-up');
            });

            updateTableVisibility();
        }

        function updateTableVisibility() {
            const visibleRows = document.querySelectorAll('#productsTable tbody tr:not([style*="display: none"])');
            const tbody = document.querySelector('#productsTable tbody');
            const noResultsRow = document.getElementById('noResultsRow');

            if (visibleRows.length === 0) {
                if (!noResultsRow) {
                    const newRow = document.createElement('tr');
                    newRow.id = 'noResultsRow';
                    newRow.innerHTML = `<td colspan="8" class="text-center py-4"><i class="fas fa-search fa-2x text-muted mb-2"></i><p class="text-muted mb-0">No products found matching your criteria</p></td>`;
                    tbody.appendChild(newRow);
                }
            } else {
                if (noResultsRow) noResultsRow.remove();
                visibleRows.forEach((row, index) => row.cells[0].textContent = index + 1);
                const totalCount = document.querySelectorAll('#productsTable tbody tr').length;
                document.querySelector('.pagination-section div:first-child').textContent = `Showing 1 to ${visibleRows.length} of ${totalCount} products | Page 1 of 1`;
            }
        }

        function editProduct(productId) {
            window.location.href = `/admin/products/edit/${productId}`;
        }

        function editCurrentProduct() {
            if (currentProductData?.id) window.location.href = `/admin/products/edit/${currentProductData.id}`;
        }

        function openLightbox(imageIndex) {
            if (!lightboxImages.length) return;
            currentImageIndex = imageIndex;
            const lightbox = document.getElementById('imageLightbox');
            const lightboxImage = document.getElementById('lightboxImage');
            lightboxImage.src = lightboxImages[currentImageIndex];
            lightbox.style.display = 'flex';
            document.querySelector('.lightbox-prev').style.display = lightboxImages.length > 1 ? 'block' : 'none';
            document.querySelector('.lightbox-next').style.display = lightboxImages.length > 1 ? 'block' : 'none';
        }

        function closeLightbox() {
            document.getElementById('imageLightbox').style.display = 'none';
        }

        function previousImage() {
            if (lightboxImages.length <= 1) return;
            currentImageIndex = currentImageIndex > 0 ? currentImageIndex - 1 : lightboxImages.length - 1;
            document.getElementById('lightboxImage').src = lightboxImages[currentImageIndex];
        }

        function nextImage() {
            if (lightboxImages.length <= 1) return;
            currentImageIndex = currentImageIndex < lightboxImages.length - 1 ? currentImageIndex + 1 : 0;
            document.getElementById('lightboxImage').src = lightboxImages[currentImageIndex];
        }

        async function viewProduct(productId) {
            try {
                const response = await fetch(`/admin/products/details/${productId}`);
                const data = await response.json();
                if (!data.success) throw new Error('Failed to load product details');

                const product = data.product;
                currentProductData = { id: product._id };
                lightboxImages = [];

                product.variants.forEach(variant => {
                    if (variant.images?.length) {
                        variant.images.forEach(img => {
                            const imageUrl = typeof img === 'string' ? img : (img.url || img.secure_url || img);
                            if (imageUrl) lightboxImages.push(imageUrl);
                        });
                    }
                });

                const variantsHtml = product.variants.length ? `
                    <div class="variants-section">
                        <div class="variants-header">
                            <h4><i class="fas fa-layer-group"></i> Product Variants</h4>
                            <span class="variants-count">${product.variants.length} Variants</span>
                        </div>
                        <div class="variants-container">
                            ${product.variants.map((variant, index) => `
                                <div class="variant-card">
                                    <div class="variant-header">
                                        <div class="variant-name">${product.name} - Variant ${index + 1}</div>
                                        <div class="variant-status ${variant.isListed ? 'active' : 'inactive'}">${variant.isListed ? 'ACTIVE' : 'INACTIVE'}</div>
                                    </div>
                                    <div class="variant-details">
                                        ${variant.images?.length ? `
                                            <div class="variant-images mb-3">
                                                <div class="variant-images-label">Images:</div>
                                                <div class="variant-images-grid">
                                                    ${variant.images.slice(0, 4).map((img, index) => {
                                                        const imageUrl = typeof img === 'string' ? img : (img.url || img.secure_url || img);
                                                        const globalIndex = lightboxImages.findIndex(i => (typeof i === 'string' ? i : (i.url || i.secure_url || i)) === imageUrl);
                                                        return `<img src="${imageUrl}" alt="Variant Image" onclick="openLightbox(${globalIndex >= 0 ? globalIndex : lightboxImages.length})" class="variant-thumbnail" onerror="this.src='https://via.placeholder.com/60x60?text=No+Image'">`;
                                                    }).join('')}
                                                    ${variant.images.length > 4 ? `<div class="more-images">+${variant.images.length - 4} more</div>` : ''}
                                                </div>
                                            </div>
                                        ` : ''}
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">MRP:</span>
                                            <span class="variant-detail-value price-highlight text-light-red">₹${variant.regularPrice}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Sales Price:</span>
                                            <span class="variant-detail-value price-highlight text-light-green">₹${variant.salesPrice}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Stock:</span>
                                            <span class="variant-detail-value stock-highlight ${variant.stock < 10 ? 'text-danger' : 'text-success'}">${variant.stock} : ${variant.stock > 0 ? 'Available' : 'Out of Stock'}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">UOM:</span>
                                            <span class="variant-detail-value">${variant.uom || 'N/A'}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Expiry Date:</span>
                                            <span class="variant-detail-value">${variant.expiryDate ? new Date(variant.expiryDate).toLocaleDateString() : 'N/A'}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Manufacturing Date:</span>
                                            <span class="variant-detail-value">${variant.manufacturingDate ? new Date(variant.manufacturingDate).toLocaleDateString() : 'N/A'}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Prescription Required:</span>
                                            <span class="variant-detail-value ${variant.prescriptionRequired ? 'text-danger' : 'text-success'}">${variant.prescriptionRequired ? "Yes" : "No Need"}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Discount:</span>
                                            <span class="variant-detail-value stock-highlight ${variant.discountStatus ? 'text-success' : 'text-danger'}">${variant.discountStatus ? 'Active' : 'Inactive'}</span>
                                        </div>
                                        <div class="variant-detail-item">
                                            <span class="variant-detail-label">Offer:</span>
                                            <span class="variant-detail-value stock-highlight ${variant.offerStatus ? 'text-success' : 'text-danger'}">${variant.offerStatus ? 'Active' : 'Inactive'}</span>
                                        </div>
                                        ${variant.attributes && Object.keys(variant.attributes).length ? `
                                            <div class="variant-detail-item full-width">
                                                <span class="variant-detail-label">Attributes:</span>
                                                <div class="variant-detail-value">
                                                    <div class="attributes-grid">
                                                        ${Object.entries(variant.attributes).map(([key, value]) => `
                                                            <div class="attribute-item">
                                                                <span class="attribute-key">${key}:</span>
                                                                <span class="attribute-value">${value}</span>
                                                            </div>
                                                        `).join('')}
                                                    </div>
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : '';

                const modalBody = document.getElementById('viewModalBody');
                const modalTitle = document.getElementById('productModalTitle');
                modalTitle.textContent = `${product.name} - Complete Details`;
                modalBody.innerHTML = `
                    <div class="row">
                        <div class="col-lg-7">
                            <div class="product-info-section">
                                <h3 class="mb-3">${product.name}</h3>
                                <p class="text-muted mb-4"><span>Description : ><br></span> ${product.description || 'No description available'}</p>
                                <div class="product-info-grid">
                                    <div class="info-item">
                                        <div class="info-label">Category</div>
                                        <div class="info-value">${product.category?.name || product.category}</div>
                                    </div>
                                    <div class="info-item">
                                        <div class="info-label">Brand</div>
                                        <div class="info-value">${product.brand?.name || product.brand}</div>
                                    </div>
                                    <div class="info-item">
                                        <div class="info-label">Created</div>
                                        <div class="info-value">${product.createdAt ? new Date(product.createdAt).toLocaleDateString() : 'N/A'}</div>
                                    </div>
                                    <div class="info-item">
                                        <div class="info-label">Updated</div>
                                        <div class="info-value">${product.updatedAt ? new Date(product.updatedAt).toLocaleDateString() : 'N/A'}</div>
                                    </div>
                                    <div class="info-item">
                                        <div class="info-label">Total Variants</div>
                                        <div class="info-value">${product.variants.length}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    ${variantsHtml}
                `;

                new bootstrap.Modal(document.getElementById('viewModal')).show();
            } catch (error) {
                console.error('Error loading product details:', error);
                showNotification('Failed to load product details', 'error');
            }
        }
        
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} notification-toast`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                ${message}
            `;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 300px;
                animation: slideInRight 0.3s ease-out;
            `;
            document.body.appendChild(notification);
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease-out';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        function handleStatusFilter() {
            const status = document.getElementById('statusFilter').value;
            const currentUrl = new URL(window.location);
            
            if (status) {
                currentUrl.searchParams.set('status', status);
            } else {
                currentUrl.searchParams.delete('status');
            }
            currentUrl.searchParams.set('page', '1'); // Reset to first page
            
            window.location.href = currentUrl.toString();
        }

        function handleLimitChange() {
            const limit = document.getElementById('limitSelect').value;
            const currentUrl = new URL(window.location);
            
            currentUrl.searchParams.set('limit', limit);
            currentUrl.searchParams.set('page', '1'); // Reset to first page
            
            window.location.href = currentUrl.toString();
        }

        function navigateToPage(page) {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('page', page);
            window.location.href = currentUrl.toString();
        }
    </script>
</body>
</html>