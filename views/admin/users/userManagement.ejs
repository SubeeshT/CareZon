<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management - Carezon Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/admin/css/dashboard.css">
    <link rel="stylesheet" href="/admin/css/userManagement.css">
</head>
<body>
    <!-- Header -->
    <%- include('../partials/admin/header') %>

    <!-- Sidebar -->
    <%- include('../partials/admin/sidebar') %>

    <!-- Main Content -->
    <main class="main-content" id="main-content">
        <div class="container-fluid py-4">
            <!-- Page Header with Breadcrumb -->
            <div class="page-header mb-4">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                    <div>
                        <h1 class="page-title mb-2">User Management</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item">
                                    <a href="/admin/dashboard" class="text-decoration-none">
                                        <i class="fas fa-home me-1"></i>Dashboard
                                    </a>
                                </li>
                                <li class="breadcrumb-item active" aria-current="page">User Management</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>

            <!-- Search and Filter Section -->
            <div class="search-filter-section mb-4">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="row g-3">
                            <!-- Search Input -->
                            <div class="col-12 col-md-6 col-lg-5">
                                <label class="form-label text-muted small">Search Users</label>
                                <div class="search-container">
                                    <div class="search-input-wrapper">
                                        <i class="fas fa-search search-icon"></i>
                                        <input type="text" class="search-input form-control" id="searchInput" 
                                               placeholder="Search by name..." 
                                               value="<%= search || '' %>">
                                        <button type="button" class="search-btn search-submit-btn" id="searchSubmitBtn" title="Search">
                                            <i class="fas fa-search"></i>
                                        </button>
                                        <button type="button" class="search-btn clear-btn" id="clearBtn" 
                                                title="Clear Search" style="display: <%= search ? 'flex' : 'none' %>;">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Filter Dropdown -->
                            <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                                <label class="form-label text-muted small">Filter</label>
                                <select class="form-select" id="filterSelect">
                                    <option value="">All Users</option>
                                    <option value="active" <%= filter === 'active' ? 'selected' : '' %>>Active Users</option>
                                    <option value="blocked" <%= filter === 'blocked' ? 'selected' : '' %>>Blocked Users</option>
                                </select>
                            </div>

                            <!-- Sort By -->
                            <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                                <label class="form-label text-muted small">Sort By</label>
                                <select class="form-select" id="sortBy">
                                    <option value="createdAt" <%= sortBy === 'createdAt' ? 'selected' : '' %>>Date Joined</option>
                                    <option value="fullName" <%= sortBy === 'fullName' ? 'selected' : '' %>>Name</option>
                                </select>
                            </div>

                            <!-- Sort Order -->
                            <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                                <label class="form-label text-muted small">Order</label>
                                <select class="form-select" id="sortOrder">
                                    <option value="desc" <%= sortOrder === 'desc' ? 'selected' : '' %>>Descending</option>
                                    <option value="asc" <%= sortOrder === 'asc' ? 'selected' : '' %>>Ascending</option>
                                </select>
                            </div>

                            <!-- Items per page -->
                            <div class="col-12 col-sm-6 col-md-3 col-lg-1">
                                <label class="form-label text-muted small">Show</label>
                                <select class="form-select" id="limitSelect">
                                    <option value="6" <%= limit === 6 ? 'selected' : '' %>>6</option>
                                    <option value="10" <%= limit === 10 ? 'selected' : '' %>>10</option>
                                    <option value="20" <%= limit === 20 ? 'selected' : '' %>>20</option>
                                    <option value="50" <%= limit === 50 ? 'selected' : '' %>>50</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Table -->
            <div class="table-section position-relative">
                <div class="card shadow-sm">
                    <div class="loading-overlay d-none" id="loadingOverlay">
                        <div class="loading-spinner"></div>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="userTable">
                            <thead class="table-primary">
                                <tr>
                                    <th class="fw-semibold">S.No</th>
                                    <th class="fw-semibold">Name</th>
                                    <th class="fw-semibold">Email</th>
                                    <th class="fw-semibold">Phone</th>
                                    <th class="fw-semibold">Date Joined</th>
                                    <th class="fw-semibold text-center">Action</th>
                                </tr>
                            </thead>
                            <tbody id="userTableBody">
                                <% if (users && users.length > 0) { %>
                                    <% users.forEach((user) => { %>
                                    <tr data-user-id="<%= user._id %>">
                                        <td class="align-middle"><%= user.serialNo %></td>
                                        <td class="align-middle fw-medium"><%= user.fullName %></td>
                                        <td class="align-middle text-muted"><%= user.email %></td>
                                        <td class="align-middle"><%= user.phone %></td>
                                        <td class="align-middle"><%= new Date(user.createdAt).toLocaleDateString() %></td>
                                        <td class="align-middle text-center">
                                            <button class="btn <%= user.isBlocked ? 'btn-success' : 'btn-danger' %> btn-sm toggle-status-btn" 
                                                    data-user-id="<%= user._id %>" 
                                                    data-status="<%= user.isBlocked ? 'blocked' : 'active' %>"
                                                    data-user-name="<%= user.fullName %>">
                                                <%= user.isBlocked ? 'Activate' : 'Block' %>
                                            </button>
                                        </td>
                                    </tr>
                                    <% }) %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="6" class="text-center py-5">
                                            <div class="no-results">
                                                <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                                <h5 class="text-muted">No users found</h5>
                                                <p class="text-muted mb-0">No users match your current criteria</p>
                                            </div>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Pagination -->
            <div class="pagination-wrapper mt-4">
                <div class="row align-items-center">
                    <div class="col-12 col-md-6 mb-3 mb-md-0">
                        <div class="pagination-info">
                            <span class="text-muted">
                                Showing <strong class="text-primary" id="showingStart"><%= showingStart || 0 %></strong> 
                                to <strong class="text-primary" id="showingEnd"><%= showingEnd || 0 %></strong> 
                                of <strong class="text-primary" id="totalRecords"><%= totalUsers || 0 %></strong> users
                            </span>
                        </div>
                    </div>
                    <div class="col-12 col-md-6">
                        <nav aria-label="User pagination" class="d-flex justify-content-md-end">
                            <ul class="pagination pagination-sm mb-0" id="paginationList">
                                <li class="page-item <%= !hasPrevPage ? 'disabled' : '' %>">
                                    <a class="page-link" href="#" data-page="<%= prevPage || 1 %>">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                                <% for(let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                        <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
                                    </li>
                                <% } %>
                                <li class="page-item <%= !hasNextPage ? 'disabled' : '' %>">
                                    <a class="page-link" href="#" data-page="<%= nextPage || totalPages %>">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-bottom-0">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center py-4">
                    <div class="modal-icon mb-3" id="modalIcon">
                        <i class="fas fa-exclamation-triangle text-warning fa-3x"></i>
                    </div>
                    <h6 class="mb-2 fw-semibold" id="modalMessage">Are you sure?</h6>
                    <p class="text-muted mb-0" id="modalSubmessage">This action can be reversed later.</p>
                </div>
                <div class="modal-footer border-top-0">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmActionBtn">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" id="toastContainer"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Initialize elements
            const searchInput = document.getElementById("searchInput");
            const searchSubmitBtn = document.getElementById("searchSubmitBtn");
            const clearBtn = document.getElementById("clearBtn");
            const filterSelect = document.getElementById("filterSelect");
            const sortBy = document.getElementById("sortBy");
            const sortOrder = document.getElementById("sortOrder");
            const limitSelect = document.getElementById("limitSelect");
            const loadingOverlay = document.getElementById("loadingOverlay");
            const userTableBody = document.getElementById("userTableBody");
            const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            const confirmActionBtn = document.getElementById("confirmActionBtn");

            // Sidebar functionality - ensure it works with existing sidebar code
            const sidebar = document.getElementById("sidebar");
            const mainContent = document.getElementById("main-content");
            const sidebarToggle = document.getElementById("sidebar-toggle");
            const mobileMenuToggle = document.getElementById("mobile-menu-toggle");

            let currentAction = null;
            let searchTimeout = null;
            let currentParams = {
                page: <%= currentPage || 1 %>,
                limit: <%= limit || 6 %>,
                search: '<%= search || "" %>',
                filter: '<%= filter || "" %>',
                sort: '<%= sortBy || "createdAt" %>',
                order: '<%= sortOrder || "desc" %>'
            };

            // Initialize sidebar functionality
            initializeSidebar();
            highlightActiveLink();

            // Sidebar event listeners
            if (sidebarToggle) {
                sidebarToggle.addEventListener("click", (e) => {
                    e.preventDefault();
                    toggleSidebar();
                });
            }

            if (mobileMenuToggle) {
                mobileMenuToggle.addEventListener("click", (e) => {
                    e.preventDefault();
                    sidebar.classList.toggle("show");
                });
            }

            // Real-time search with debouncing
            searchInput.addEventListener("input", (e) => {
                const value = e.target.value.trim();
                clearBtn.style.display = value ? "block" : "none";
                
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    if (value !== currentParams.search) {
                        currentParams.search = value;
                        currentParams.page = 1;
                        performSearch();
                    }
                }, 500);
            });

            // Search on Enter key
            searchInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    e.preventDefault();
                    clearTimeout(searchTimeout);
                    const value = searchInput.value.trim();
                    currentParams.search = value;
                    currentParams.page = 1;
                    performSearch();
                }
            });

            // Search button click
            searchSubmitBtn.addEventListener("click", () => {
                clearTimeout(searchTimeout);
                const value = searchInput.value.trim();
                currentParams.search = value;
                currentParams.page = 1;
                performSearch();
            });

            // Clear search
            clearBtn.addEventListener("click", () => {
                searchInput.value = "";
                clearBtn.style.display = "none";
                currentParams.search = "";
                currentParams.page = 1;
                performSearch();
            });

            // Filter change
            filterSelect.addEventListener("change", () => {
                currentParams.filter = filterSelect.value;
                currentParams.page = 1;
                updateURL();
                loadUsers();
            });

            // Sort change
            sortBy.addEventListener("change", () => {
                currentParams.sort = sortBy.value;
                currentParams.page = 1;
                updateURL();
                loadUsers();
            });

            sortOrder.addEventListener("change", () => {
                currentParams.order = sortOrder.value;
                currentParams.page = 1;
                updateURL();
                loadUsers();
            });

            // Limit change
            limitSelect.addEventListener("change", () => {
                currentParams.limit = limitSelect.value;
                currentParams.page = 1;
                updateURL();
                loadUsers();
            });

            // Event delegation for dynamic elements
            document.addEventListener("click", (e) => {
                // Toggle user status
                if (e.target.classList.contains("toggle-status-btn")) {
                    e.preventDefault();
                    const userId = e.target.dataset.userId;
                    const currentStatus = e.target.dataset.status;
                    const userName = e.target.dataset.userName;
                    showConfirmationModal(userId, currentStatus, userName, e.target);
                }

                // Pagination
                if (e.target.closest(".page-link") && !e.target.closest(".page-item").classList.contains("disabled")) {
                    e.preventDefault();
                    const page = parseInt(e.target.closest(".page-link").dataset.page);
                    if (page && page !== currentParams.page) {
                        currentParams.page = page;
                        updateURL();
                        loadUsers();
                    }
                }

                // Close sidebar when clicking outside on mobile
                if (window.innerWidth <= 768 && sidebar) {
                    if (!sidebar.contains(e.target) && !mobileMenuToggle?.contains(e.target)) {
                        sidebar.classList.remove("show");
                    }
                }
            });

            // Confirm action
            confirmActionBtn.addEventListener("click", () => {
                if (currentAction) {
                    executeStatusChange(currentAction);
                    confirmationModal.hide();
                }
            });

            // Handle window resize
            window.addEventListener("resize", () => {
                if (window.innerWidth > 768 && sidebar) {
                    sidebar.classList.remove("show");
                }
            });

            // Sidebar Functions
            function initializeSidebar() {
                if (sidebar && mainContent && sidebarToggle) {
                    const isCollapsed = localStorage.getItem("sidebarCollapsed") === "true";
                    if (isCollapsed) {
                        sidebar.classList.add("collapsed");
                        mainContent.classList.add("expanded");
                        updateToggleIcon(true);
                    }
                }
            }

            function toggleSidebar() {
                if (sidebar && mainContent && sidebarToggle) {
                    const isCollapsed = sidebar.classList.toggle("collapsed");
                    mainContent.classList.toggle("expanded");
                    updateToggleIcon(isCollapsed);
                    localStorage.setItem("sidebarCollapsed", isCollapsed);
                }
            }

            function updateToggleIcon(isCollapsed) {
                if (sidebarToggle) {
                    const icon = sidebarToggle.querySelector("i");
                    if (icon) {
                        if (isCollapsed) {
                            icon.classList.remove("fa-chevron-left");
                            icon.classList.add("fa-chevron-right");
                        } else {
                            icon.classList.remove("fa-chevron-right");
                            icon.classList.add("fa-chevron-left");
                        }
                    }
                }
            }

            function highlightActiveLink() {
                const currentPath = window.location.pathname;
                const sidebarLinks = document.querySelectorAll(".sidebar-link, .nav-link");

                // Remove active class from all links
                sidebarLinks.forEach((link) => {
                    link.classList.remove("active");
                    const parentLi = link.closest('li');
                    if (parentLi) {
                        parentLi.classList.remove("active");
                    }
                });

                // Add active class to matching link
                sidebarLinks.forEach((link) => {
                    const linkPath = new URL(link.href, window.location.origin).pathname;
                    
                    // Check for exact match or if current path contains the link path
                    if (linkPath === currentPath || 
                        (linkPath.includes("users") && currentPath.includes("users")) ||
                        (linkPath.includes("user") && currentPath.includes("user")) ||
                        (linkPath.includes("customer") && currentPath.includes("user"))) {
                        
                        link.classList.add("active");
                        const parentLi = link.closest('li');
                        if (parentLi) {
                            parentLi.classList.add("active");
                        }
                    }
                });
            }

            // Main Functions
            function updateURL() {
                const params = new URLSearchParams();
                
                if (currentParams.page > 1) params.set('page', currentParams.page);
                if (currentParams.limit !== 6) params.set('limit', currentParams.limit);
                if (currentParams.search) params.set('search', currentParams.search);
                if (currentParams.filter) params.set('filter', currentParams.filter);
                if (currentParams.sort !== 'createdAt') params.set('sort', currentParams.sort);
                if (currentParams.order !== 'desc') params.set('order', currentParams.order);
                
                const newURL = `/admin/users${params.toString() ? '?' + params.toString() : ''}`;
                window.history.replaceState({}, '', newURL);
            }

            function performSearch() {
                updateURL();
                loadUsers();
            }

            function showLoading(show) {
                loadingOverlay.classList.toggle("d-none", !show);
            }

            function loadUsers() {
                showLoading(true);
                
                const params = new URLSearchParams();
                Object.entries(currentParams).forEach(([key, value]) => {
                    if (value) params.set(key, value);
                });

                fetch(`/admin/users?${params.toString()}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateTable(data.users);
                        updatePagination(data.pagination);
                        updateStats(data.pagination);
                    } else {
                        showToast(data.message || "Failed to load users", "danger");
                    }
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    showToast("An error occurred while loading users", "danger");
                })
                .finally(() => {
                    showLoading(false);
                });
            }

            function updateTable(users) {
                if (users && users.length > 0) {
                    userTableBody.innerHTML = users.map(user => `
                        <tr data-user-id="${user._id}">
                            <td class="align-middle">${user.serialNo}</td>
                            <td class="align-middle fw-medium">${user.fullName}</td>
                            <td class="align-middle text-muted">${user.email}</td>
                            <td class="align-middle">${user.phone}</td>
                            <td class="align-middle">${new Date(user.createdAt).toLocaleDateString()}</td>
                            <td class="align-middle text-center">
                                <button class="btn ${user.isBlocked ? 'btn-success' : 'btn-danger'} btn-sm toggle-status-btn" 
                                        data-user-id="${user._id}" 
                                        data-status="${user.isBlocked ? 'blocked' : 'active'}"
                                        data-user-name="${user.fullName}">
                                    ${user.isBlocked ? 'Activate' : 'Block'}
                                </button>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    userTableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center py-5">
                                <div class="no-results">
                                    <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                    <h5 class="text-muted">No users found</h5>
                                    <p class="text-muted mb-0">No users match your current criteria</p>
                                </div>
                            </td>
                        </tr>
                    `;
                }
            }

            function updatePagination(pagination) {
                if (!pagination) return;

                const paginationList = document.getElementById('paginationList');
                let paginationHTML = '';

                // Previous button
                paginationHTML += `
                    <li class="page-item ${!pagination.hasPrevPage ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.prevPage || 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;

                // Page numbers
                const startPage = Math.max(1, pagination.currentPage - 2);
                const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

                for (let i = startPage; i <= endPage; i++) {
                    paginationHTML += `
                        <li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }

                // Next button
                paginationHTML += `
                    <li class="page-item ${!pagination.hasNextPage ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.nextPage || pagination.totalPages}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;

                paginationList.innerHTML = paginationHTML;
            }

            function updateStats(pagination) {
                if (!pagination) return;
                
                document.getElementById('showingStart').textContent = pagination.showingStart || 0;
                document.getElementById('showingEnd').textContent = pagination.showingEnd || 0;
                document.getElementById('totalRecords').textContent = pagination.totalUsers || 0;
            }

            function showConfirmationModal(userId, currentStatus, userName, buttonElement) {
                const isBlocking = currentStatus === "active";
                
                currentAction = {
                    userId,
                    currentStatus,
                    newStatus: isBlocking ? "blocked" : "active",
                    userName,
                    buttonElement
                };

                const modalIcon = document.getElementById("modalIcon");
                const modalMessage = document.getElementById("modalMessage");
                const modalSubmessage = document.getElementById("modalSubmessage");

                if (isBlocking) {
                    modalIcon.innerHTML = '<i class="fas fa-ban text-danger fa-3x"></i>';
                    modalMessage.textContent = `Block ${userName}?`;
                    modalSubmessage.textContent = "This user will not be able to access their account.";
                    confirmActionBtn.textContent = "Block User";
                    confirmActionBtn.className = "btn btn-danger";
                } else {
                    modalIcon.innerHTML = '<i class="fas fa-check-circle text-success fa-3x"></i>';
                    modalMessage.textContent = `Activate ${userName}?`;
                    modalSubmessage.textContent = "This user will regain access to their account.";
                    confirmActionBtn.textContent = "Activate User";
                    confirmActionBtn.className = "btn btn-success";
                }

                confirmationModal.show();
            }

            function executeStatusChange(action) {
                const { userId, userName, buttonElement } = action;
                
                showLoading(true);
                
                fetch(`/admin/users/status/${userId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, data.action === "blocked" ? "warning" : "success");
                        loadUsers(); // Refresh the table
                    } else {
                        showToast(data.message || "Failed to update user status", "danger");
                    }
                })
                .catch(error => {
                    console.error('Error updating user status:', error);
                    showToast("An error occurred while updating user status", "danger");
                })
                .finally(() => {
                    showLoading(false);
                });
            }

            function showToast(message, type = "success") {
                const toast = document.createElement("div");
                toast.className = `toast align-items-center text-white bg-${type} border-0`;
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                `;

                const toastContainer = document.getElementById('toastContainer');
                toastContainer.appendChild(toast);

                const bsToast = new bootstrap.Toast(toast);
                bsToast.show();

                toast.addEventListener("hidden.bs.toast", () => {
                    toast.remove();
                });
            }
        });
    </script>

    