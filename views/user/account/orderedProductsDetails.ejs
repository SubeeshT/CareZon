<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - CareZon</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/user/css/headerAndFooter.css">
    <link rel="stylesheet" href="/user/css/sidebar.css">
    <style>
        .order-details-page {
            background-color: #f8f9fa;
            min-height: calc(100vh - 200px);
            padding: 20px 0;
        }

        .back-btn {
            background: #6c63ff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }

        .back-btn:hover {
            background: #5a52d4;
            color: white;
            text-decoration: none;
        }

        .order-header {
            background: white;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }

        .order-header h2 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .order-info {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            color: #666;
        }

        .order-info span {
            font-size: 14px;
        }

        .invoice-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .btn-invoice {
            padding: 10px 20px;
            border-radius: 8px;
            border: none;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-view {
            background: #6c63ff;
            color: white;
        }

        .btn-view:hover {
            background: #5a52d4;
            color: white;
        }

        .btn-download {
            background: #17a2b8;
            color: white;
        }

        .btn-download:hover {
            background: #138496;
            color: white;
        }

       

      

        .order-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 20px;
            align-items: start;
        }

        .order-items {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }

        .order-items h3 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 20px;
            font-size: 20px;
        }

        .item-card {
            border: 1px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }

        .item-card:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .item-content {
            display: flex;
            gap: 20px;
            align-items: flex-start;
        }

        .item-image {
            width: 80px;
            height: 80px;
            border-radius: 8px;
            object-fit: cover;
            flex-shrink: 0;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
            font-size: 16px;
        }

        .item-meta {
            color: #666;
            font-size: 14px;
            margin-bottom: 8px;
        }

        .item-meta span {
            margin-right: 15px;
        }

        .item-price {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
        }

        .item-actions {
            display: flex;
            gap: 8px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-pending { background: #fff3cd; color: #856404; }
        .status-confirmed { background: #cce5ff; color: #0066cc; }
        .status-processing { background: #e1ecf4; color: #39739d; }
        .status-shipped { background: #d4edda; color: #155724; }
        .status-delivered { background: #d1ecf1; color: #0c5460; }
        .status-cancelled { background: #f8d7da; color: #721c24; }
        .status-returned { background: #ffeaa7; color: #636e72; }
        .status-refunded { background: #fd79a8; color: #2d3436; }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-cancel {
            background: #dc3545;
            color: white;
        }

        .btn-cancel:hover {
            background: #c82333;
        }

        .btn-return {
            background: #fd7e14;
            color: white;
        }

        .btn-return:hover {
            background: #e8690b;
        }

        .btn-invoice-item {
            background: #6c757d;
            color: white;
        }

        .btn-invoice-item:hover {
            background: #5a6268;
        }

        .btn-download-item {
            background: #17a2b8;
            color: white;
        }

        .btn-download-item:hover {
            background: #138496;
        }

        .sidebar-panel {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .summary-card, .customer-card, .payment-card {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }

        .summary-card h3, .customer-card h3, .payment-card h3 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 20px;
            font-size: 18px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            color: #666;
        }

        .summary-total {
            border-top: 1px solid #e9ecef;
            padding-top: 15px;
            margin-top: 15px;
        }

        .summary-total .summary-row {
            font-weight: 600;
            color: #2c3e50;
            font-size: 18px;
            margin-bottom: 0;
        }

        .customer-info p {
            margin-bottom: 8px;
            color: #666;
            font-size: 14px;
        }

        .customer-info strong {
            color: #2c3e50;
        }

        .payment-status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .payment-pending {
            background: #fff3cd;
            color: #856404;
        }

        .payment-completed {
            background: #d1ecf1;
            color: #0c5460;
        }

        /* Rating Section */
        .rating-section {
            border-top: 1px solid #e9ecef;
            padding-top: 15px;
            margin-top: 15px;
        }

        .rating-display {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .stars {
            color: #ffc107;
        }

        .rating-text {
            font-size: 14px;
            color: #666;
        }

        .review-text {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 6px;
            font-size: 14px;
            color: #666;
            border-left: 3px solid #6c63ff;
            margin-bottom: 10px;
        }

        .review-images {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .review-image {
            width: 60px;
            height: 60px;
            border-radius: 6px;
            object-fit: cover;
            cursor: pointer;
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .review-image:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }

        .btn-rate {
            background: #6c63ff;
            color: white;
            font-size: 12px;
        }

        .btn-rate:hover {
            background: #5a52d4;
        }

        /* Image Upload Styles */
        .image-upload-area {
            width: 100%;
        }

        .upload-dropzone {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            background: #f8f9fa;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-dropzone:hover {
            border-color: #6c63ff;
            background: #f0f0ff;
        }

        .upload-dropzone.dragover {
            border-color: #6c63ff;
            background: #e8e6ff;
        }

        .upload-content {
            pointer-events: none;
        }

        .image-preview-container {
            max-height: 200px;
            overflow-y: auto;
        }

        .image-preview-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .image-preview-item {
            position: relative;
            display: inline-block;
        }

        .preview-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .remove-image {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            line-height: 1;
        }

        .remove-image:hover {
            background: #c82333;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .order-content {
                grid-template-columns: 1fr;
            }
            
            .invoice-actions {
                justify-content: center;
            }
            
            .item-content {
                flex-direction: column;
                text-align: center;
            }
            
            .item-image {
                width: 120px;
                height: 120px;
                align-self: center;
            }
            
            .item-actions {
                justify-content: center;
            }
            
            .order-info {
                flex-direction: column;
                gap: 8px;
            }
        }

        @media (max-width: 576px) {
            .order-details-page {
                padding: 10px 0;
            }
            
            .order-header, .order-items, .summary-card, .customer-card, .payment-card {
                padding: 16px;
            }
            
            .item-card {
                padding: 16px;
            }
            
            .invoice-actions {
                flex-direction: column;
                align-items: stretch;
            }
            
            .btn-invoice {
                justify-content: center;
            }
        }

        /* Modal Styles */
        .modal-content {
            border-radius: 12px;
        }

        .modal-header {
            border-bottom: 1px solid #e9ecef;
            padding: 20px 24px;
        }

        .modal-body {
            padding: 24px;
        }

        .modal-footer {
            border-top: 1px solid #e9ecef;
            padding: 16px 24px;
        }

        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #dee2e6;
            padding: 10px 12px;
        }

        .form-control:focus, .form-select:focus {
            border-color: #6c63ff;
            box-shadow: 0 0 0 0.2rem rgba(108, 99, 255, 0.25);
        }
        .status-active { background: #d4edda; color: #1c7732; }
        .item-image-link {
            display: block;
            flex-shrink: 0;
            transition: transform 0.2s ease;
        }

        .item-image-link:hover {
            transform: scale(1.05);
        }

        .item-image-link .item-image {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <%- include('../../views/partials/user/header.ejs') %>
    
    <div class="account-page-wrapper">
        <button class="mobile-toggle" id="mobileToggle">
            <i class="fas fa-bars"></i>
        </button>
        
        <div class="sidebar-overlay" id="sidebarOverlay"></div>
        
        <div class="main-container">
            <%- include('../../views/partials/user/sidebar.ejs') %>
            
            <div class="content-area">
                <div class="container-fluid order-details-page">
                    <!-- Back Button -->
                    <a href="/account/orders" class="back-btn">
                        <i class="fas fa-arrow-left"></i>
                        Back to Orders
                    </a>

                    <!-- Order Header -->
                    <div class="order-header">
                        <h2>Order Details</h2>
                        <div class="order-info">
                            <span><strong>Order ID:</strong> #<%= order.orderId %></span>
                            <span><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleDateString('en-GB', {
                                day: '2-digit',
                                month: 'long', 
                                year: 'numeric'
                            }) %></span>
                            <span><strong>Order Time:</strong> <%= new Date(order.createdAt).toLocaleTimeString('en-US', {
                                hour: 'numeric',
                                minute: '2-digit',
                                hour12: true
                            }) %></span>
                            <span><strong>No. of Items:</strong> <%= order.items.length %></span>
                        </div>
                        <div class="invoice-actions">
                            <button class="btn btn-invoice btn-view" onclick="viewInvoice('<%= order.orderId %>')">
                                <i class="fas fa-eye"></i>
                                View Complete Invoice
                            </button>
                            <button class="btn btn-invoice btn-download" onclick="downloadInvoice('<%= order.orderId %>')">
                                <i class="fas fa-download"></i>
                                Download Complete Invoice
                            </button>
                           
                        </div>
                        <small class="text-muted d-block mt-2">
                            <i class="fas fa-info-circle"></i>
                            View opens in new tab / Download & saves PDF to your device
                        </small>
                    </div>

                    <div class="order-content">
                        <!-- Order Items -->
                        <div class="order-items">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3 class="mb-0">Order Items</h3>
                                <div class="d-flex gap-2">
                                    <% if (['pending', 'confirmed'].includes(order.orderStatus)) { %>
                                        <button class="btn btn-sm btn-danger" onclick="cancelEntireOrder('<%= order.orderId %>')">
                                            <i class="fas fa-ban"></i> Cancel Entire Order
                                        </button>
                                    <% } %>
                                    <% if (order.orderStatus === 'delivered') { %>
                                        <button class="btn btn-sm btn-return" onclick="returnEntireOrder('<%= order.orderId %>')">
                                            <i class="fas fa-undo"></i> Return Entire Order
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                            
                            <% order.items.forEach((item, index) => { %>
                                <div class="item-card">
                                    <div class="item-content">
                                        <a href="/products/details/<%= item.productId %>" class="item-image-link">
                                            <img src="<%= item.productSnapshot.variantDetails.images && item.productSnapshot.variantDetails.images.length > 0 
                                                ? item.productSnapshot.variantDetails.images[0].url 
                                                : '/user/images/logo.png' %>" 
                                                alt="<%= item.productSnapshot.name %>" class="item-image">
                                        </a>
                                        <div class="item-details">
                                            <div class="item-name"><%= item.productSnapshot.name %></div>
                                            <div class="item-meta">
                                                <span><strong>Brand:</strong> <%= item.productSnapshot.brand %></span>
                                                <% if (item.variantLabel) { %>
                                                    <span><strong>Variant:</strong> <%= item.variantLabel %></span>
                                                <% } %>
                                                <span><strong>Qty:</strong> <%= item.quantity %></span>
                                            </div>
                                            <div class="item-price">₹<%= item.totalPrice.toLocaleString() %></div>
                                            <span class="status-badge status-<%= item.displayStatus || order.orderStatus %>">
                                                <%= (item.displayStatus || order.orderStatus).charAt(0).toUpperCase() + (item.displayStatus || order.orderStatus).slice(1) %>
                                            </span>
                                            
                                            <div class="item-actions">
                                                <% if (['pending', 'confirmed'].includes(order.orderStatus) && (!item.displayStatus || item.displayStatus === 'active')) { %>
                                                    <button class="btn btn-sm btn-cancel" onclick="cancelItem('<%= item._id %>', '<%= order.orderId %>')">
                                                        <i class="fas fa-times"></i> Cancel Item
                                                    </button>
                                                <% } %>
                                                
                                                <% if (order.orderStatus === 'delivered' && (!item.displayStatus || item.displayStatus === 'active')) { %>
                                                    <button class="btn btn-sm btn-return" onclick="returnItem('<%= item._id %>', '<%= order.orderId %>')">
                                                        <i class="fas fa-undo"></i> Return Item
                                                    </button>
                                                <% } %>
                                                
                                                <% if (item.displayStatus === 'cancelled') { %>
                                                    <div class="item-status-text text-danger fw-bold mt-2">
                                                        <i class="fas fa-ban"></i> This item has been cancelled
                                                    </div>
                                                <% } %>
                                                
                                                <% if (item.displayStatus === 'returned') { %>
                                                    <div class="item-status-text text-warning fw-bold mt-2">
                                                        <i class="fas fa-undo"></i> Return request submitted for this item
                                                    </div>
                                                <% } %>
                                                
                                                <!-- Only show rate button for active items or items that are not cancelled -->
                                                <% if (!item.displayStatus || item.displayStatus === 'active' || item.displayStatus !== 'cancelled') { %>
                                                    <button class="btn btn-sm btn-rate" onclick="addRating('<%= item._id %>')">
                                                        <i class="fas fa-star"></i> Rate & Review
                                                    </button>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>

                        <!-- Sidebar -->
                        <div class="sidebar-panel">
                            <!-- Order Summary -->
                            <div class="summary-card">
                                <h3>Order Summary</h3>
                                <div class="summary-row">
                                    <span>Subtotal:</span>
                                    <span>₹<%= order.subtotal.toLocaleString() %></span>
                                </div>
                                <div class="summary-row">
                                    <span>Shipping:</span>
                                    <span class="<%= order.deliveryFee === 0 ? 'text-success' : '' %>">
                                        <%= order.deliveryFee === 0 ? 'Free' : '₹' + order.deliveryFee.toLocaleString() %>
                                    </span>
                                </div>
                                <div class="summary-total">
                                    <div class="summary-row">
                                        <span>Total:</span>
                                        <span>₹<%= order.totalAmount.toLocaleString() %></span>
                                    </div>
                                </div>
                            </div>

                            <!-- Customer Information -->
                            <div class="customer-card">
                                <h3>Delivery details</h3>
                                <div class="customer-info">                                      
                                    <p><%= order.shippingAddress.addressType.charAt(0).toUpperCase() + order.shippingAddress.addressType.slice(1) %></p>
                                    <p><%= order.shippingAddress.fullName %></p>  
                                    <p><%= order.shippingAddress.area %>, <%= order.shippingAddress.locality %></p>
                                    <% if (order.shippingAddress.landmark) { %>
                                        <p>Near <%= order.shippingAddress.landmark %></p>
                                    <% } %>
                                    <p><%= order.shippingAddress.district %>, <%= order.shippingAddress.state %> <%= order.shippingAddress.pin %></p>
                                    <p>Phone: <%= order.shippingAddress.phoneOne %></p>
                                    <% if (order.shippingAddress.phoneTwo) { %>
                                        <p>Alt Phone: <%= order.shippingAddress.phoneTwo %></p>
                                    <% } %>
                                </div>
                            </div>

                            <!-- Payment Information -->
                            <div class="payment-card">
                                <h3>Payment Method</h3>
                                <div class="customer-info">
                                    <p>
                                        <% if (order.paymentMethod === 'cod') { %>
                                            <i class="fas fa-money-bill-wave"></i> Cash on Delivery
                                        <% } else if (order.paymentMethod === 'card') { %>
                                            <i class="fas fa-credit-card"></i> Credit/Debit Card
                                        <% } else if (order.paymentMethod === 'upi') { %>
                                            <i class="fas fa-mobile-alt"></i> UPI Payment
                                        <% } else { %>
                                            <i class="fas fa-university"></i> <%= order.paymentMethod.charAt(0).toUpperCase() + order.paymentMethod.slice(1) %>
                                        <% } %>
                                    </p>
                                    <div class="payment-status payment-<%= order.paymentStatus %>">
                                        <% if (order.paymentStatus === 'pending') { %>
                                            <i class="fas fa-clock"></i> Payment Pending
                                        <% } else if (order.paymentStatus === 'completed') { %>
                                            <i class="fas fa-check-circle"></i> Payment Completed
                                        <% } else { %>
                                            <i class="fas fa-exclamation-circle"></i> <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cancel Item Modal -->
    <div class="modal fade" id="cancelModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cancel Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cancelForm">
                        <div class="mb-3">
                            <label for="cancelReason" class="form-label">Reason for Cancellation <span class="text-danger">*</span></label>
                            <select class="form-select" id="cancelReason" required>
                                <option value="">Select a reason</option>
                                <option value="changed_mind">Changed my mind</option>
                                <option value="wrong_item">Ordered wrong item</option>
                                <option value="found_better_price">Found better price elsewhere</option>
                                <option value="delivery_delay">Delivery taking too long</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3" id="otherReasonDiv" style="display: none;">
                            <label for="otherReason" class="form-label">Please specify</label>
                            <textarea class="form-control" id="otherReason" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" onclick="confirmCancel()">Cancel Item</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Item Modal -->
    <div class="modal fade" id="returnModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Return Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="returnForm">
                        <div class="mb-3">
                            <label for="returnReason" class="form-label">Reason for Return <span class="text-danger">*</span></label>
                            <select class="form-select" id="returnReason" required>
                                <option value="">Select a reason</option>
                                <option value="defective">Item is defective</option>
                                <option value="not_as_described">Not as described</option>
                                <option value="wrong_size">Wrong size/color</option>
                                <option value="damaged">Item arrived damaged</option>
                                <option value="quality_issues">Quality issues</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3" id="returnOtherReasonDiv" style="display: none;">
                            <label for="returnOtherReason" class="form-label">Please specify</label>
                            <textarea class="form-control" id="returnOtherReason" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="returnDescription" class="form-label">Additional Details</label>
                            <textarea class="form-control" id="returnDescription" rows="3" placeholder="Please provide additional details about the issue..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-warning" onclick="confirmReturn()">Request Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Cancel Entire Order Modal -->
    <div class="modal fade" id="cancelEntireOrderModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cancel Entire Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Warning:</strong> This will cancel all items in this order and cannot be undone.
                    </div>
                    <form id="cancelEntireOrderForm">
                        <div class="mb-3">
                            <label for="cancelEntireOrderReason" class="form-label">Reason for Cancellation <span class="text-danger">*</span></label>
                            <select class="form-select" id="cancelEntireOrderReason" required>
                                <option value="">Select a reason</option>
                                <option value="changed_mind">Changed my mind</option>
                                <option value="wrong_items">Ordered wrong items</option>
                                <option value="found_better_price">Found better price elsewhere</option>
                                <option value="delivery_delay">Delivery taking too long</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3" id="cancelEntireOrderOtherDiv" style="display: none;">
                            <label for="cancelEntireOrderOther" class="form-label">Please specify</label>
                            <textarea class="form-control" id="cancelEntireOrderOther" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Keep Order</button>
                    <button type="button" class="btn btn-danger" onclick="confirmEntireOrderCancel()">Cancel Entire Order</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Entire Order Modal -->
    <div class="modal fade" id="returnEntireOrderModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Return Entire Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <strong>Return Policy:</strong> Orders can be returned within 14 days of delivery.
                    </div>
                    <form id="returnEntireOrderForm">
                        <div class="mb-3">
                            <label for="returnEntireOrderReason" class="form-label">Reason for Return <span class="text-danger">*</span></label>
                            <select class="form-select" id="returnEntireOrderReason" required>
                                <option value="">Select a reason</option>
                                <option value="defective">Items are defective</option>
                                <option value="not_as_described">Not as described</option>
                                <option value="wrong_items">Wrong items received</option>
                                <option value="damaged">Items arrived damaged</option>
                                <option value="quality_issues">Quality issues</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3" id="returnEntireOrderOtherDiv" style="display: none;">
                            <label for="returnEntireOrderOther" class="form-label">Please specify</label>
                            <textarea class="form-control" id="returnEntireOrderOther" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="returnEntireOrderDescription" class="form-label">Additional Details</label>
                            <textarea class="form-control" id="returnEntireOrderDescription" rows="3" placeholder="Please provide additional details about the issue..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-warning" onclick="confirmEntireOrderReturn()">Request Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Rating Modal -->
    <div class="modal fade" id="ratingModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Rate & Review Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="ratingForm" enctype="multipart/form-data">
                        <div class="mb-3 text-center">
                            <label class="form-label">Rating <span class="text-danger">*</span></label>
                            <div class="rating-input" id="starRating">
                                <i class="far fa-star" data-rating="1"></i>
                                <i class="far fa-star" data-rating="2"></i>
                                <i class="far fa-star" data-rating="3"></i>
                                <i class="far fa-star" data-rating="4"></i>
                                <i class="far fa-star" data-rating="5"></i>
                            </div>
                            <input type="hidden" id="selectedRating" value="0">
                            <small class="text-muted d-block mt-1">Click on stars to rate</small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="reviewText" class="form-label">Review</label>
                            <textarea class="form-control" id="reviewText" rows="4" placeholder="Share your experience with this product..."></textarea>
                            <small class="text-muted">Tell others about your experience with this product</small>
                        </div>

                        <div class="mb-3">
                            <label for="reviewImages" class="form-label">Add Photos</label>
                            <div class="image-upload-area">
                                <input type="file" id="reviewImages" multiple accept="image/*" class="d-none">
                                <div class="upload-dropzone" onclick="document.getElementById('reviewImages').click()">
                                    <div class="upload-content">
                                        <i class="fas fa-camera fa-2x text-muted mb-2"></i>
                                        <p class="mb-1">Click to upload photos</p>
                                        <small class="text-muted">or drag and drop images here</small>
                                        <small class="d-block text-muted mt-2">Maximum 5 images, 5MB each</small>
                                    </div>
                                </div>
                                <div class="image-preview-container mt-3" id="imagePreviewContainer" style="display: none;">
                                    <label class="form-label">Selected Images:</label>
                                    <div class="image-preview-grid" id="imagePreviewGrid"></div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="submitRating()">Submit Review</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Modal for Viewing Review Images -->
    <div class="modal fade" id="imageModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center p-0">
                    <img id="modalImage" class="img-fluid" style="max-height: 80vh; border-radius: 8px;">
                </div>
            </div>
        </div>
    </div>
    
    <%- include('../../views/partials/user/footer.ejs') %>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
        let currentItemId = '';
        let selectedRating = 0;
        let selectedImages = [];
        const maxImages = 5;
        const maxFileSize = 5 * 1024 * 1024; // 5MB

        // Invoice functions
        function viewInvoice(orderId) {
            window.open(`/account/orders/invoice/${orderId}?view=true`, '_blank');
        }

        function downloadInvoice(orderId) {
            window.location.href = `/account/orders/invoice/${orderId}`;
        }

       

        // Cancel item function
        function cancelItem(itemId, orderId) {
            currentItemId = itemId;
            currentOrderId = orderId;
            const modal = new bootstrap.Modal(document.getElementById('cancelModal'));
            modal.show();
        }

        // Return item function
        function returnItem(itemId, orderId) {
            currentItemId = itemId;
            currentOrderId = orderId;
            const modal = new bootstrap.Modal(document.getElementById('returnModal'));
            modal.show();
        }

        // Rating functions
        function addRating(itemId) {
            currentItemId = itemId;
            document.getElementById('ratingForm').reset();
            selectedRating = 0;
            selectedImages = [];
            updateStarDisplay();
            updateImagePreview();
            const modal = new bootstrap.Modal(document.getElementById('ratingModal'));
            modal.show();
        }

        function editRating(itemId) {
            currentItemId = itemId;
            // Pre-fill with existing rating
            selectedRating = 4; // Example existing rating
            document.getElementById('reviewText').value = "Great quality bed frame. Easy to assemble and looks exactly as shown in pictures. Highly recommended!";
            selectedImages = []; // Reset images for editing
            updateStarDisplay();
            updateImagePreview();
            const modal = new bootstrap.Modal(document.getElementById('ratingModal'));
            modal.show();
        }

        // Image upload functions
        function setupImageUpload() {
            const fileInput = document.getElementById('reviewImages');
            const dropzone = document.querySelector('.upload-dropzone');

            // File input change event
            fileInput.addEventListener('change', handleImageSelect);

            // Drag and drop events
            dropzone.addEventListener('dragover', handleDragOver);
            dropzone.addEventListener('dragleave', handleDragLeave);
            dropzone.addEventListener('drop', handleDrop);
        }

        function handleImageSelect(event) {
            const files = Array.from(event.target.files);
            processImages(files);
        }

        function handleDragOver(event) {
            event.preventDefault();
            event.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(event) {
            event.currentTarget.classList.remove('dragover');
        }

        function handleDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('dragover');
            const files = Array.from(event.dataTransfer.files);
            processImages(files);
        }

        function processImages(files) {
            const validImages = files.filter(file => {
                if (!file.type.startsWith('image/')) {
                    alert(`${file.name} is not a valid image file.`);
                    return false;
                }
                if (file.size > maxFileSize) {
                    alert(`${file.name} is too large. Maximum size is 5MB.`);
                    return false;
                }
                return true;
            });

            const remainingSlots = maxImages - selectedImages.length;
            if (validImages.length > remainingSlots) {
                alert(`You can only upload ${remainingSlots} more image(s). Maximum is ${maxImages} images.`);
                validImages.splice(remainingSlots);
            }

            validImages.forEach(file => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    selectedImages.push({
                        file: file,
                        dataUrl: e.target.result,
                        name: file.name
                    });
                    updateImagePreview();
                };
                reader.readAsDataURL(file);
            });
        }

        function updateImagePreview() {
            const container = document.getElementById('imagePreviewContainer');
            const grid = document.getElementById('imagePreviewGrid');

            if (selectedImages.length === 0) {
                container.style.display = 'none';
                return;
            }

            container.style.display = 'block';
            grid.innerHTML = '';

            selectedImages.forEach((image, index) => {
                const previewItem = document.createElement('div');
                previewItem.className = 'image-preview-item';
                previewItem.innerHTML = `
                    <img src="${image.dataUrl}" alt="${image.name}" class="preview-image">
                    <button type="button" class="remove-image" onclick="removeImage(${index})">&times;</button>
                `;
                grid.appendChild(previewItem);
            });
        }

        function removeImage(index) {
            selectedImages.splice(index, 1);
            updateImagePreview();
        }

        function showImageModal(imageSrc) {
            const modal = new bootstrap.Modal(document.getElementById('imageModal'));
            document.getElementById('modalImage').src = imageSrc;
            modal.show();
        }

        // Handle cancel reason dropdown
        document.getElementById('cancelReason').addEventListener('change', function() {
            const otherDiv = document.getElementById('otherReasonDiv');
            if (this.value === 'other') {
                otherDiv.style.display = 'block';
            } else {
                otherDiv.style.display = 'none';
            }
        });

        // Handle return reason dropdown
        document.getElementById('returnReason').addEventListener('change', function() {
            const otherDiv = document.getElementById('returnOtherReasonDiv');
            if (this.value === 'other') {
                otherDiv.style.display = 'block';
            } else {
                otherDiv.style.display = 'none';
            }
        });

        // Star rating functionality
        document.querySelectorAll('#starRating i').forEach(star => {
            star.addEventListener('click', function() {
                selectedRating = parseInt(this.getAttribute('data-rating'));
                updateStarDisplay();
            });

            star.addEventListener('mouseover', function() {
                const hoverRating = parseInt(this.getAttribute('data-rating'));
                highlightStars(hoverRating);
            });
        });

        document.getElementById('starRating').addEventListener('mouseleave', function() {
            updateStarDisplay();
        });

        function highlightStars(rating) {
            document.querySelectorAll('#starRating i').forEach((star, index) => {
                if (index < rating) {
                    star.classList.remove('far');
                    star.classList.add('fas');
                } else {
                    star.classList.remove('fas');
                    star.classList.add('far');
                }
            });
        }

        function updateStarDisplay() {
            highlightStars(selectedRating);
            document.getElementById('selectedRating').value = selectedRating;
        }

        function confirmCancel() {
            const reason = document.getElementById('cancelReason').value;
            const otherReason = document.getElementById('otherReason').value;
            
            if (!reason) {
                alert('Please select a reason for cancellation.');
                return;
            }
            
            if (reason === 'other' && !otherReason.trim()) {
                alert('Please specify the reason for cancellation.');
                return;
            }

            const finalReason = reason === 'other' ? otherReason : reason;
            
            // Make API call to cancel individual item
            fetch(`/account/orders/cancel/${currentOrderId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    reason: finalReason,
                    cancelType: 'single_item',
                    itemId: currentItemId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Item has been cancelled successfully.');
                    
                    // Update UI for single item cancellation
                    updateSingleItemStatus(currentItemId, 'cancelled');
                    
                    bootstrap.Modal.getInstance(document.getElementById('cancelModal')).hide();
                } else {
                    alert(data.message || 'Error cancelling item');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error cancelling item. Please try again.');
            });
        }
        function confirmReturn() {
            const reason = document.getElementById('returnReason').value;
            const otherReason = document.getElementById('returnOtherReason').value;
            const description = document.getElementById('returnDescription').value;
            
            if (!reason) {
                alert('Please select a reason for return.');
                return;
            }
            
            if (reason === 'other' && !otherReason.trim()) {
                alert('Please specify the reason for return.');
                return;
            }

            const finalReason = reason === 'other' ? otherReason : reason;
            
            // Make API call to return individual item
            fetch(`/account/orders/return/${currentOrderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    reason: finalReason,
                    description: description,
                    returnType: 'single_item',
                    itemId: currentItemId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Return request has been submitted successfully.');
                    
                    // Update UI for single item return
                    updateSingleItemStatus(currentItemId, 'returned');
                    
                    bootstrap.Modal.getInstance(document.getElementById('returnModal')).hide();
                } else {
                    alert(data.message || 'Error processing return request');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error processing return request. Please try again.');
            });
        }
        function submitRating() {
            if (selectedRating === 0) {
                alert('Please select a rating.');
                return;
            }
            
            const reviewText = document.getElementById('reviewText').value;
            
            // Here you would make an API call to submit the rating with images
            console.log('Submitting rating for item:', currentItemId);
            console.log('Rating:', selectedRating);
            console.log('Review:', reviewText);
            console.log('Images:', selectedImages.length, 'files');
            
            // Example of FormData for file upload
            const formData = new FormData();
            formData.append('itemId', currentItemId);
            formData.append('rating', selectedRating);
            formData.append('review', reviewText);
            
            selectedImages.forEach((image, index) => {
                formData.append(`reviewImage${index}`, image.file);
            });
            
            // API call example:
            /*
            fetch('/api/reviews', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Review submitted successfully:', data);
                updateUIWithNewReview(data);
            })
            .catch(error => {
                console.error('Error submitting review:', error);
                alert('Error submitting review. Please try again.');
            });
            */
            
            // Simulate rating submission success
            alert('Thank you for your review! Your rating and images have been submitted successfully.');
            
            // Update UI to show the new rating
            const itemCard = document.querySelector(`[onclick*="${currentItemId}"]`).closest('.item-card');
            const ratingSection = itemCard.querySelector('.rating-section');
            
            // Create image HTML for display
            let imagesHtml = '';
            if (selectedImages.length > 0) {
                const imageElements = selectedImages.map(image => 
                    `<img src="${image.dataUrl}" alt="Review Image" class="review-image" onclick="showImageModal('${image.dataUrl}')">`
                ).join('');
                imagesHtml = `<div class="review-images">${imageElements}</div>`;
            }
            
            // Create new rating display
            const ratingDisplay = `
                <div class="rating-display">
                    <div class="stars">
                        ${Array.from({length: 5}, (_, i) => 
                            i < selectedRating 
                                ? '<i class="fas fa-star"></i>' 
                                : '<i class="far fa-star"></i>'
                        ).join('')}
                    </div>
                    <span class="rating-text">${selectedRating}.0 / 5.0</span>
                </div>
                ${reviewText ? `<div class="review-text">"${reviewText}"</div>` : ''}
                ${imagesHtml}
                <button class="btn btn-sm btn-rate mt-2" onclick="editRating('${currentItemId}')">
                    <i class="fas fa-edit"></i> Edit Review
                </button>
            `;
            
            ratingSection.innerHTML = ratingDisplay;
            
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('ratingModal')).hide();
        }

        // CSS for star rating hover effects
        const ratingStyle = document.createElement('style');
        ratingStyle.textContent = `
            .rating-input i {
                font-size: 24px;
                margin: 0 2px;
                cursor: pointer;
                color: #ddd;
                transition: color 0.2s ease;
            }
            
            .rating-input i:hover,
            .rating-input i.fas {
                color: #ffc107;
            }
            
            .rating-input {
                margin: 10px 0;
            }
        `;
        document.head.appendChild(ratingStyle);

        // Handle order status updates (example function for backend integration)
        function updateOrderStatus(orderId, newStatus) {
            // This would be called from your backend when order status changes
            console.log('Updating order status:', orderId, 'to', newStatus);
            
            // Update item statuses based on order status
            const statusBadges = document.querySelectorAll('.status-badge');
            statusBadges.forEach(badge => {
                // Update status display logic here
                switch(newStatus) {
                    case 'pending':
                        badge.className = 'status-badge status-pending';
                        badge.textContent = 'Pending';
                        break;
                    case 'confirmed':
                        badge.className = 'status-badge status-confirmed';
                        badge.textContent = 'Confirmed';
                        break;
                    case 'processing':
                        badge.className = 'status-badge status-processing';
                        badge.textContent = 'Processing';
                        break;
                    case 'shipped':
                        badge.className = 'status-badge status-shipped';
                        badge.textContent = 'Shipped';
                        // Show return buttons for delivered items
                        const returnBtns = document.querySelectorAll('.btn-return');
                        returnBtns.forEach(btn => btn.style.display = 'none');
                        break;
                    case 'shipped':
                        badge.className = 'status-badge status-delivered';
                        badge.textContent = 'shipped';
                        // Show return buttons and hide cancel buttons
                        const cancelBtns = document.querySelectorAll('.btn-cancel');
                        const showReturnBtns = document.querySelectorAll('.btn-return');
                        cancelBtns.forEach(btn => btn.style.display = 'none');
                        showReturnBtns.forEach(btn => btn.style.display = 'inline-flex');
                        break;
                }
            });
        }

        // Example of dynamic content loading for different order statuses
        function loadOrderDetails(orderId) {
            // This function would fetch order details from your backend
            console.log('Loading order details for:', orderId);
            
            // Example API call structure:
            /*
            fetch(`/api/orders/${orderId}`)
                .then(response => response.json())
                .then(data => {
                    // Update UI with order data
                    updateOrderUI(data);
                })
                .catch(error => {
                    console.error('Error loading order details:', error);
                });
            */
        }

        function updateOrderUI(orderData) {
            // Update order header
            document.querySelector('.order-header h2').textContent = 'Order Details';
            
            // Update order items
            orderData.items.forEach(item => {
                // Create item cards dynamically
                console.log('Updating item:', item);
            });
            
            // Update order summary
            const summaryRows = document.querySelectorAll('.summary-row span:last-child');
            if (summaryRows.length >= 2) {
                summaryRows[0].textContent = `₹${orderData.subtotal}`;
                summaryRows[1].textContent = orderData.shipping === 0 ? 'Free' : `₹${orderData.shipping}`;
            }
            
            // Update total
            const totalRow = document.querySelector('.summary-total .summary-row span:last-child');
            if (totalRow) {
                totalRow.textContent = `₹${orderData.total}`;
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize image upload functionality
            setupImageUpload();

            console.log('Order details page loaded'); 
        });

        let currentOrderId = '';

        // Cancel entire order function
        function cancelEntireOrder(orderId) {
            currentOrderId = orderId;
            const modal = new bootstrap.Modal(document.getElementById('cancelEntireOrderModal'));
            modal.show();
        }

        // Handle entire order cancel reason dropdown
        document.getElementById('cancelEntireOrderReason').addEventListener('change', function() {
            const otherDiv = document.getElementById('cancelEntireOrderOtherDiv');
            if (this.value === 'other') {
                otherDiv.style.display = 'block';
            } else {
                otherDiv.style.display = 'none';
            }
        });

        function confirmEntireOrderCancel() {
            const reason = document.getElementById('cancelEntireOrderReason').value;
            const otherReason = document.getElementById('cancelEntireOrderOther').value;
            
            if (!reason) {
                alert('Please select a reason for cancellation.');
                return;
            }
            
            if (reason === 'other' && !otherReason.trim()) {
                alert('Please specify the reason for cancellation.');
                return;
            }

            const finalReason = reason === 'other' ? otherReason : reason;
            
            // Make API call to cancel entire order
            fetch(`/account/orders/cancel/${currentOrderId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    reason: finalReason,
                    cancelType: 'entire_order'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Entire order has been cancelled successfully.');
                    location.reload();
                } else {
                    alert(data.message || 'Error cancelling order');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error cancelling order. Please try again.');
            });
            
            bootstrap.Modal.getInstance(document.getElementById('cancelEntireOrderModal')).hide();
        }

        // Return entire order function
        function returnEntireOrder(orderId) {
            currentOrderId = orderId;
            const modal = new bootstrap.Modal(document.getElementById('returnEntireOrderModal'));
            modal.show();
        }

        // Handle entire order return reason dropdown
        document.getElementById('returnEntireOrderReason').addEventListener('change', function() {
            const otherDiv = document.getElementById('returnEntireOrderOtherDiv');
            if (this.value === 'other') {
                otherDiv.style.display = 'block';
            } else {
                otherDiv.style.display = 'none';
            }
        });

        function confirmEntireOrderReturn() {
            const reason = document.getElementById('returnEntireOrderReason').value;
            const otherReason = document.getElementById('returnEntireOrderOther').value;
            const description = document.getElementById('returnEntireOrderDescription').value;
            
            if (!reason) {
                alert('Please select a reason for return.');
                return;
            }
            
            if (reason === 'other' && !otherReason.trim()) {
                alert('Please specify the reason for return.');
                return;
            }

            const finalReason = reason === 'other' ? otherReason : reason;
            
            // Make API call to return entire order
            fetch(`/account/orders/return/${currentOrderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    reason: finalReason,
                    description: description,
                    returnType: 'entire_order'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Return request for entire order has been submitted successfully.');
                    location.reload();
                } else {
                    alert(data.message || 'Error processing return request');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error processing return request. Please try again.');
            });
            
            bootstrap.Modal.getInstance(document.getElementById('returnEntireOrderModal')).hide();
        }

        function updateSingleItemStatus(itemId, status) {
            // Find the item card by looking for buttons that contain the itemId
            const itemCards = document.querySelectorAll('.item-card');
            let targetItemCard = null;
            
            itemCards.forEach(card => {
                const cancelBtn = card.querySelector(`[onclick*="'${itemId}'"]`);
                const returnBtn = card.querySelector(`[onclick*="'${itemId}'"]`);
                if (cancelBtn || returnBtn) {
                    targetItemCard = card;
                }
            });
            
            if (targetItemCard) {
                // Update status badge
                const statusBadge = targetItemCard.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.className = `status-badge status-${status}`;
                    statusBadge.textContent = status.charAt(0).toUpperCase() + status.slice(1);
                }
                
                // Update action buttons based on status
                const cancelBtn = targetItemCard.querySelector('.btn-cancel');
                const returnBtn = targetItemCard.querySelector('.btn-return');
                
                if (status === 'cancelled') {
                    // Hide cancel button, keep return button hidden
                    if (cancelBtn) cancelBtn.style.display = 'none';
                    if (returnBtn) returnBtn.style.display = 'none';
                    
                    // Add cancelled indicator
                    const itemDetails = targetItemCard.querySelector('.item-details');
                    if (itemDetails && !itemDetails.querySelector('.item-status-text')) {
                        const statusText = document.createElement('div');
                        statusText.className = 'item-status-text text-danger fw-bold mt-2';
                        statusText.innerHTML = '<i class="fas fa-ban"></i> This item has been cancelled';
                        itemDetails.appendChild(statusText);
                    }
                } else if (status === 'returned') {
                    // Hide both cancel and return buttons
                    if (cancelBtn) cancelBtn.style.display = 'none';
                    if (returnBtn) returnBtn.style.display = 'none';
                    
                    // Add returned indicator
                    const itemDetails = targetItemCard.querySelector('.item-details');
                    if (itemDetails && !itemDetails.querySelector('.item-status-text')) {
                        const statusText = document.createElement('div');
                        statusText.className = 'item-status-text text-warning fw-bold mt-2';
                        statusText.innerHTML = '<i class="fas fa-undo"></i> Return request submitted for this item';
                        itemDetails.appendChild(statusText);
                    }
                }
            }
        }
    </script>
</body>
</html>