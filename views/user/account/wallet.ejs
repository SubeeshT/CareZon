<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Wallet - CareZon</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/user/css/headerAndFooter.css">
    <link rel="stylesheet" href="/user/css/sidebar.css">
    <style>
        /* Wallet Page Specific Styles */
        .wallet-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Wallet Header Section */
        .wallet-header {
            background: linear-gradient(135deg, #0087bd 0%, #28a745 100%);
            border-radius: 15px;
            padding: 2rem;
            color: white;
            margin-bottom: 2rem;
            box-shadow: 0 8px 20px rgba(0, 135, 189, 0.3);
            position: relative;
            overflow: hidden;
        }

        .wallet-header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -10%;
            width: 300px;
            height: 300px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
        }

        .wallet-header::after {
            content: '';
            position: absolute;
            bottom: -30%;
            left: -5%;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
        }

        .wallet-balance-card {
            position: relative;
            z-index: 1;
        }

        .wallet-icon {
            width: 70px;
            height: 70px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            margin-bottom: 1rem;
            backdrop-filter: blur(10px);
        }

        .wallet-balance {
            font-size: 3rem;
            font-weight: 700;
            margin: 0.5rem 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }

        .wallet-label {
            font-size: 1rem;
            opacity: 0.9;
            margin-bottom: 0.5rem;
        }

        /* Add Money Button */
        .add-money-btn {
            background: white;
            color: #0087bd;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 30px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            margin-top: 1rem;
        }

        .add-money-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
            background: #f8f9fa;
        }

        /* Statistics Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border-left: 4px solid #0087bd;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

        .stat-card.credit {
            border-left-color: #28a745;
        }

        .stat-card.debit {
            border-left-color: #dc3545;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .stat-card .stat-icon {
            background: rgba(0, 135, 189, 0.1);
            color: #0087bd;
        }

        .stat-card.credit .stat-icon {
            background: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }

        .stat-card.debit .stat-icon {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .stat-amount {
            font-size: 1.8rem;
            font-weight: 700;
            color: #212529;
            margin: 0.5rem 0;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Transaction History Section */
        .transaction-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f0f0f0;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #212529;
            margin: 0;
        }

        /* Filter Buttons */
        .filter-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 0.5rem 1rem;
            border: 2px solid #e0e0e0;
            background: white;
            border-radius: 25px;
            font-size: 0.9rem;
            font-weight: 500;
            color: #6c757d;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .filter-btn:hover {
            border-color: #0087bd;
            color: #0087bd;
        }

        .filter-btn.active {
            background: #0087bd;
            border-color: #0087bd;
            color: white;
        }

        /* Transaction List */
        .transaction-list {
            overflow: visible;
        }

        .transaction-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem;
            border-bottom: 1px solid #f0f0f0;
            transition: all 0.3s ease;
        }

        .transaction-item:hover {
            background: #f8f9fa;
            transform: translateX(5px);
        }

        .transaction-item:last-child {
            border-bottom: none;
        }

        .transaction-icon-wrapper {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            margin-right: 1rem;
            flex-shrink: 0;
        }

        .transaction-icon-wrapper.credit {
            background: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }

        .transaction-icon-wrapper.debit {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .transaction-icon-wrapper.failed {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .transaction-icon-wrapper.pending {
            background: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .transaction-amount.text-danger {
            color: #dc3545;
        }

        .transaction-amount.text-warning {
            color: #ffc107;
        }

        .transaction-details {
            flex: 1;
        }

        .transaction-title {
            font-weight: 600;
            color: #212529;
            margin-bottom: 0.25rem;
            font-size: 1rem;
        }

        .transaction-date {
            color: #6c757d;
            font-size: 0.85rem;
        }

        .transaction-amount {
            font-size: 1.25rem;
            font-weight: 700;
            text-align: right;
        }

        .transaction-amount.credit {
            color: #28a745;
        }

        .transaction-amount.debit {
            color: #dc3545;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6c757d;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: #495057;
        }

        .empty-state p {
            margin-bottom: 0;
        }

        /* Add Money Modal */
        .modal-header {
            background: linear-gradient(135deg, #0087bd 0%, #28a745 100%);
            color: white;
            border-radius: 12px 12px 0 0;
        }

        .modal-content {
            border-radius: 12px;
            border: none;
        }

        .amount-input-group {
            margin-bottom: 1.5rem;
        }

        .amount-input {
            font-size: 1.5rem;
            text-align: center;
            padding: 1rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .amount-input:focus {
            border-color: #0087bd;
            box-shadow: 0 0 0 3px rgba(0, 135, 189, 0.1);
            outline: none;
        }

        .quick-amount-buttons {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .quick-amount-btn {
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            background: white;
            border-radius: 8px;
            font-weight: 600;
            color: #495057;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .quick-amount-btn:hover {
            border-color: #0087bd;
            color: #0087bd;
            transform: translateY(-2px);
        }

        .quick-amount-btn.selected {
            background: #0087bd;
            border-color: #0087bd;
            color: white;
        }

        .payment-method-card {
            padding: 1rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .payment-method-card:hover {
            border-color: #0087bd;
            background: #f8f9fa;
        }

        .payment-method-card.selected {
            border-color: #0087bd;
            background: rgba(0, 135, 189, 0.05);
        }

        .payment-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            background: #f8f9fa;
        }

        .payment-info h6 {
            margin: 0 0 0.25rem 0;
            font-weight: 600;
        }

        .payment-info p {
            margin: 0;
            font-size: 0.85rem;
            color: #6c757d;
        }

        .proceed-btn {
            background: #0087bd;
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            transition: all 0.3s ease;
        }

        .proceed-btn:hover {
            background: #006a96;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 135, 189, 0.3);
        }

        .proceed-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        /* Scrollbar Styling */
        /* Removed scrollbar styling as list is no longer scrollable */

        /* Responsive Design */
        @media (max-width: 992px) {
            .wallet-balance {
                font-size: 2.5rem;
            }

            .stats-container {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }
        }

        @media (max-width: 768px) {
            .wallet-header {
                padding: 1.5rem;
            }

            .wallet-balance {
                font-size: 2rem;
            }

            .wallet-icon {
                width: 60px;
                height: 60px;
                font-size: 1.5rem;
            }

            .add-money-btn {
                padding: 0.6rem 1.5rem;
                font-size: 0.9rem;
            }

            .stats-container {
                grid-template-columns: 1fr;
            }

            .transaction-section {
                padding: 1.5rem;
            }

            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .filter-buttons {
                width: 100%;
            }

            .filter-btn {
                flex: 1;
                min-width: 80px;
            }

            .transaction-item {
                padding: 1rem;
            }

            .transaction-icon-wrapper {
                width: 45px;
                height: 45px;
                font-size: 1rem;
            }

            .transaction-title {
                font-size: 0.95rem;
            }

            .transaction-amount {
                font-size: 1.1rem;
            }

            .quick-amount-buttons {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 576px) {
            .wallet-balance {
                font-size: 1.75rem;
            }

            .stat-amount {
                font-size: 1.5rem;
            }

            .transaction-section {
                padding: 1rem;
            }

            .section-title {
                font-size: 1.25rem;
            }

            .transaction-item {
                flex-wrap: wrap;
            }

            .transaction-amount {
                width: 100%;
                text-align: left;
                margin-top: 0.5rem;
                padding-left: 66px;
            }

            .amount-input {
                font-size: 1.25rem;
            }

            .quick-amount-buttons {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 375px) {
            .wallet-header {
                padding: 1.25rem;
            }

            .wallet-balance {
                font-size: 1.5rem;
            }

            .wallet-icon {
                width: 50px;
                height: 50px;
                font-size: 1.25rem;
            }

            .stat-card {
                padding: 1.25rem;
            }

            .stat-amount {
                font-size: 1.35rem;
            }

            .filter-btn {
                font-size: 0.85rem;
                padding: 0.4rem 0.8rem;
            }
        }

        /* Loading State */
        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 3rem;
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
            border-width: 0.3rem;
            color: #0087bd;
        }

        /* Toast Notification */
        .toast-container {
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 9999;
        }

        .custom-toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            min-width: 300px;
        }

        .custom-toast.success {
            border-left: 4px solid #28a745;
        }

        .custom-toast.error {
            border-left: 4px solid #dc3545;
        }

        /* Print Styles */
        @media print {
            .wallet-header,
            .add-money-btn,
            .filter-buttons,
            .section-header button,
            .view-more-btn {
                display: none !important;
            }

            .transaction-section {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }

        /* View More Button */
        .view-more-btn {
            background: white;
            color: #0087bd;
            border: 2px solid #0087bd;
            padding: 0.75rem 2rem;
            border-radius: 30px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .view-more-btn:hover {
            background: #0087bd;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 135, 189, 0.3);
        }

        .view-more-btn:active {
            transform: translateY(0);
        }

        .view-more-btn .transaction-count {
            background: rgba(0, 135, 189, 0.1);
            color: #0087bd;
            padding: 0.2rem 0.6rem;
            border-radius: 15px;
            font-size: 0.85rem;
            font-weight: 700;
        }

        .view-more-btn:hover .transaction-count {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .view-more-btn i {
            transition: transform 0.3s ease;
        }

        .view-more-btn:hover i {
            transform: translateY(3px);
        }

        @media (max-width: 576px) {
            .view-more-btn {
                padding: 0.6rem 1.5rem;
                font-size: 0.9rem;
            }
        }

        .payment-method-card {
            padding: 1rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .payment-method-card:hover {
            border-color: #0087bd;
            background: #f8f9fa;
            transform: translateX(5px);
        }

        .payment-method-card.selected {
            border-color: #0087bd;
            background: rgba(0, 135, 189, 0.05);
        }

        .payment-radio {
            color: #e0e0e0;
            transition: all 0.3s ease;
        }

        .payment-method-card.selected .payment-radio {
            color: #0087bd;
        }

        .payment-method-card.selected .payment-radio::before {
            content: '\f058'; /* fa-check-circle */
        }

        .payment-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            flex-shrink: 0;
        }

        .payment-info {
            flex: 1;
        }

        .payment-info h6 {
            margin: 0 0 0.25rem 0;
            font-weight: 600;
            font-size: 1rem;
        }

        .payment-info p {
            margin: 0;
            font-size: 0.85rem;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <%- include('../../views/partials/user/header.ejs') %>
    
    <div class="account-page-wrapper">
        <button class="mobile-toggle" id="mobileToggle">
            <i class="fas fa-bars"></i>
        </button>
        
        <div class="sidebar-overlay" id="sidebarOverlay"></div>
        
        <div class="main-container">
            <%- include('../../views/partials/user/sidebar.ejs') %>
            
            <div class="content-area">
                <div class="wallet-container">
                    <!-- Wallet Balance Header -->
                    <div class="wallet-header">
                        <div class="wallet-balance-card">
                            <div class="wallet-icon">
                                <i class="fas fa-wallet"></i>
                            </div>
                            <div class="wallet-label">Available Balance</div>
                            <div class="wallet-balance" id="totalBalance">₹0.00</div>
                            <button class="add-money-btn" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                                <i class="fas fa-plus-circle me-2"></i>Add Money
                            </button>
                        </div>
                    </div>

                    <!-- Statistics Cards -->
                    <div class="stats-container">
                        <div class="stat-card">
                            <div class="stat-icon">
                                <i class="fas fa-coins"></i>
                            </div>
                            <div class="stat-amount" id="totalCredits">₹0.00</div>
                            <div class="stat-label">Total Credits</div>
                        </div>

                        <div class="stat-card credit">
                            <div class="stat-icon">
                                <i class="fas fa-arrow-down"></i>
                            </div>
                            <div class="stat-amount" id="totalMoneyAdded">₹0.00</div>
                            <div class="stat-label">Money Added</div>
                        </div>

                        <div class="stat-card debit">
                            <div class="stat-icon">
                                <i class="fas fa-arrow-up"></i>
                            </div>
                            <div class="stat-amount" id="totalSpent">₹0.00</div>
                            <div class="stat-label">Total Spent</div>
                        </div>
                    </div>

                    <!-- Transaction History -->
                    <div class="transaction-section">
                        <div class="section-header">
                            <h2 class="section-title">Transaction History</h2>
                            <div class="filter-buttons">
                                <button class="filter-btn active" data-filter="all">All</button>
                                <button class="filter-btn" data-filter="credit">Credits</button>
                                <button class="filter-btn" data-filter="debit">Debits</button>
                            </div>
                        </div>

                        <div class="transaction-list" id="transactionList">
                            <!-- Loading State -->
                            <div class="loading-spinner" id="loadingSpinner">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>

                            <!-- Empty State (hidden by default) -->
                            <div class="empty-state" id="emptyState" style="display: none;">
                                <i class="fas fa-receipt"></i>
                                <h3>No Transactions Yet</h3>
                                <p>Your transaction history will appear here</p>
                            </div>

                            <!-- Transactions will be dynamically loaded here -->
                        </div>

                        <!-- View More Button -->
                        <div class="text-center mt-4" id="viewMoreContainer" style="display: none;">
                            <button class="view-more-btn" id="viewMoreBtn">
                                <i class="fas fa-chevron-down me-2"></i>View More Transactions
                                <span class="transaction-count" id="remainingCount"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Money Modal -->
    <div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addMoneyModalLabel">
                        <i class="fas fa-wallet me-2"></i>Add Money to Wallet
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="amount-input-group">
                        <label for="amountInput" class="form-label fw-semibold">Enter Amount</label>
                        <input type="number" class="form-control amount-input" id="amountInput" placeholder="₹ 0" min="1" max="50000">
                        <small class="text-muted">Minimum: ₹1 | Maximum: ₹50,000</small>
                    </div>

                    <div class="quick-amount-buttons">
                        <button class="quick-amount-btn" data-amount="500">₹500</button>
                        <button class="quick-amount-btn" data-amount="1000">₹1,000</button>
                        <button class="quick-amount-btn" data-amount="2000">₹2,000</button>
                        <button class="quick-amount-btn" data-amount="5000">₹5,000</button>
                        <button class="quick-amount-btn" data-amount="10000">₹10,000</button>
                        <button class="quick-amount-btn" data-amount="20000">₹20,000</button>
                    </div>

                    <h6 class="mb-3 fw-semibold">Select Payment Method</h6>

                    <div class="payment-method-card" data-method="card">
                        <div class="payment-icon" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                            <i class="fas fa-credit-card"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Credit/Debit Card</h6>
                            <p>Pay securely using your card</p>
                        </div>
                        <div class="ms-auto">
                            <i class="fas fa-circle payment-radio"></i>
                        </div>
                    </div>

                    <div class="payment-method-card" data-method="upi">
                        <div class="payment-icon" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white;">
                            <i class="fas fa-mobile-alt"></i>
                        </div>
                        <div class="payment-info">
                            <h6>UPI</h6>
                            <p>Pay using UPI apps like GPay, PhonePe</p>
                        </div>
                        <div class="ms-auto">
                            <i class="fas fa-circle payment-radio"></i>
                        </div>
                    </div>

                    <div class="payment-method-card" data-method="netbanking">
                        <div class="payment-icon" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white;">
                            <i class="fas fa-university"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Net Banking</h6>
                            <p>Pay directly from your bank account</p>
                        </div>
                        <div class="ms-auto">
                            <i class="fas fa-circle payment-radio"></i>
                        </div>
                    </div>

                    <button class="proceed-btn" id="proceedPaymentBtn" disabled>
                        <i class="fas fa-lock me-2"></i>Proceed to Payment
                    </button>
                </div>
            </div>
        </div>
    </div>

    <%- include('../../views/partials/user/footer.ejs') %>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    
    <script>
        
        // Get actual wallet data from server
        const walletDataFromServer = {
            balance: <%= wallet.balance %>,
            totalCredits: <%= wallet.totalCredits %>,
            totalMoneyAdded: <%= wallet.moneyAdded %>,
            totalSpent: <%= wallet.totalSpent %>,
            transactions: <%- JSON.stringify(transactions.map(t => ({
                id: t._id,
                type: t.direction,
                title: t.moneyFrom === 'addedViaRazorpay' ? 'Money Added' : 
                    t.moneyFrom === 'cancelRefund' ? 'Order Cancelled - Refund' : 
                    t.moneyFrom === 'returnRefund' ? 'Order Returned - Refund' : 
                    'Transaction',
                description: t.orderId ? `Order #${t.orderId.orderId}` : 
                    t.moneyFrom === 'addedViaRazorpay' ? `Via ${t.paymentMethod.toUpperCase()}` : 
                    t.description || 'Wallet Transaction',
                amount: t.amount,
                date: t.date,
                status: t.status,
                paymentMethod: t.paymentMethod,
                moneyFrom: t.moneyFrom
            }))) %>
        };

        // Initialize wallet data
        let walletData = {
            balance: 0,
            totalCredits: 0,
            totalMoneyAdded: 0,
            totalSpent: 0,
            transactions: []
        };

        // Pagination state
        let displayedTransactions = 10;
        const transactionsPerPage = 10;
        let currentFilter = 'all';

         // Global variable for selected payment method
        let selectedPaymentMethod = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadWalletData();
            setupEventListeners();
            
            // Set active filter based on URL parameter
            const urlParams = new URLSearchParams(window.location.search);
            const filterParam = urlParams.get('filter') || 'all';
            
            document.querySelectorAll('.filter-btn').forEach(btn => {
                if (btn.dataset.filter === filterParam) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
            
            currentFilter = filterParam;
        });

        
        // Load wallet data
        async function loadWalletData() {
            try {
                // Use server-provided data
                walletData.balance = walletDataFromServer.balance;
                walletData.totalCredits = walletDataFromServer.totalCredits;
                walletData.totalMoneyAdded = walletDataFromServer.totalMoneyAdded;
                walletData.totalSpent = walletDataFromServer.totalSpent;
                walletData.transactions = walletDataFromServer.transactions;
                
                updateUI();
                renderTransactions('all');
                hideLoading();
                
            } catch (error) {
                console.error('Error loading wallet data:', error);
                showToast('Failed to load wallet data', 'error');
                hideLoading();
            }
        }

        // Update UI with wallet data
        function updateUI() {
            document.getElementById('totalBalance').textContent = `₹${walletData.balance.toFixed(2)}`;
            document.getElementById('totalCredits').textContent = `₹${walletData.totalCredits.toFixed(2)}`;
            document.getElementById('totalMoneyAdded').textContent = `₹${walletData.totalMoneyAdded.toFixed(2)}`;
            document.getElementById('totalSpent').textContent = `₹${walletData.totalSpent.toFixed(2)}`;
        }

        // Render transactions
        function renderTransactions(filter = 'all', append = false) {
            const transactionList = document.getElementById('transactionList');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const emptyState = document.getElementById('emptyState');
            const viewMoreContainer = document.getElementById('viewMoreContainer');
            const viewMoreBtn = document.getElementById('viewMoreBtn');
            const remainingCount = document.getElementById('remainingCount');
            
            // Update current filter
            if (!append) {
                currentFilter = filter;
                displayedTransactions = transactionsPerPage;
            }

            // Filter transactions
            let filteredTransactions = walletData.transactions;
            if (currentFilter !== 'all') {
                filteredTransactions = walletData.transactions.filter(t => t.type === currentFilter);
            }

            // Clear existing transactions if not appending
            if (!append) {
                const existingTransactions = transactionList.querySelectorAll('.transaction-item');
                existingTransactions.forEach(item => item.remove());
            }

            // Show empty state if no transactions
            if (filteredTransactions.length === 0) {
                loadingSpinner.style.display = 'none';
                emptyState.style.display = 'block';
                viewMoreContainer.style.display = 'none';
                return;
            }

            emptyState.style.display = 'none';

            // Get transactions to display
            const transactionsToShow = filteredTransactions.slice(0, displayedTransactions);
            const remainingTransactions = filteredTransactions.length - displayedTransactions;

            // Clear if not appending
            if (!append) {
                const existingItems = transactionList.querySelectorAll('.transaction-item');
                existingItems.forEach(item => item.remove());
            }

            // Render each transaction
            transactionsToShow.forEach((transaction, index) => {
                if (!append || index >= displayedTransactions - transactionsPerPage) {
                    const transactionItem = createTransactionElement(transaction);
                    transactionList.appendChild(transactionItem);
                }
            });

            // Show/hide view more button
            if (remainingTransactions > 0) {
                viewMoreContainer.style.display = 'block';
                remainingCount.textContent = `(${remainingTransactions})`;
            } else {
                viewMoreContainer.style.display = 'none';
            }
        }

        // Create transaction element
        function createTransactionElement(transaction) {
            const item = document.createElement('div');
            item.className = 'transaction-item';
            
            const date = new Date(transaction.date);
            const formattedDate = date.toLocaleDateString('en-IN', { 
                day: '2-digit', 
                month: 'short', 
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            // Determine title based on status and moneyFrom
            let title = transaction.title;
            if (transaction.status === 'pending') {
                title = 'Payment Processing';
            } else if (transaction.status === 'failed') {
                title = 'Payment Failed';
            } else {
                // For success status
                if (transaction.moneyFrom === 'addedViaRazorpay') {
                    title = `Money Added via ${transaction.paymentMethod.toUpperCase()}`;
                } else if (transaction.moneyFrom === 'cancelRefund') {
                    title = 'Order Cancelled - Refund';
                } else if (transaction.moneyFrom === 'returnRefund') {
                    title = 'Order Returned - Refund';
                }
            }

            // Determine icon and styling based on transaction status and type
            let icon, amountClass;
            
            if (transaction.status === 'failed') {
                icon = 'fa-times-circle';
                amountClass = 'text-danger';
            } else if (transaction.status === 'pending') {
                icon = 'fa-clock';
                amountClass = 'text-warning';
            } else {
                icon = transaction.type === 'credit' ? 'fa-arrow-down' : 'fa-arrow-up';
                amountClass = transaction.type === 'credit' ? 'credit' : 'debit';
            }

            const amountSign = transaction.type === 'credit' && transaction.status === 'success' ? '+' : 
                            transaction.status === 'failed' ? '' : 
                            transaction.status === 'pending' ? '' : '-';

            // Determine icon wrapper class
            let iconWrapperClass = transaction.type;
            if (transaction.status === 'failed') {
                iconWrapperClass = 'failed';
            } else if (transaction.status === 'pending') {
                iconWrapperClass = 'pending';
            }

            item.innerHTML = `
                <div class="transaction-icon-wrapper ${iconWrapperClass}">
                    <i class="fas ${icon}"></i>
                </div>
                <div class="transaction-details">
                    <div class="transaction-title">${title}</div>
                    <div class="transaction-date">${formattedDate}</div>
                </div>
                <div class="transaction-amount ${amountClass}">
                    ${amountSign}₹${transaction.amount.toFixed(2)}
                </div>
            `;

            return item;
        }

        // Setup event listeners
        function setupEventListeners() {
            // Filter buttons
            const filterButtons = document.querySelectorAll('.filter-btn');
            filterButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    filterButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    displayedTransactions = transactionsPerPage;
                    const filter = this.dataset.filter;
                    
                    // Update URL with filter query parameter
                    const url = new URL(window.location);
                    if (filter === 'all') {
                        url.searchParams.delete('filter');
                    } else {
                        url.searchParams.set('filter', filter);
                    }
                    window.history.pushState({}, '', url);
                    
                    renderTransactions(filter, false);
                });
            });

            // View More button
            const viewMoreBtn = document.getElementById('viewMoreBtn');
            if (viewMoreBtn) {
                viewMoreBtn.addEventListener('click', function() {
                    displayedTransactions += transactionsPerPage;
                    renderTransactions(currentFilter, false);
                    
                    // Smooth scroll to newly loaded transactions
                    setTimeout(() => {
                        const transactions = document.querySelectorAll('.transaction-item');
                        if (transactions.length > transactionsPerPage) {
                            transactions[displayedTransactions - transactionsPerPage].scrollIntoView({ 
                                behavior: 'smooth', 
                                block: 'nearest' 
                            });
                        }
                    }, 100);
                });
            }

            // Payment method cards - MOVED UP BEFORE OTHER PAYMENT RELATED CODE
            const paymentMethodCards = document.querySelectorAll('.payment-method-card');
            paymentMethodCards.forEach(card => {
                card.addEventListener('click', function() {
                    paymentMethodCards.forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedPaymentMethod = this.dataset.method;
                    validateAmount();
                });
            });

            // Quick amount buttons
            const quickAmountButtons = document.querySelectorAll('.quick-amount-btn');
            quickAmountButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    quickAmountButtons.forEach(b => b.classList.remove('selected'));
                    this.classList.add('selected');
                    document.getElementById('amountInput').value = this.dataset.amount;
                    validateAmount();
                });
            });

            // Amount input
            const amountInput = document.getElementById('amountInput');
            amountInput.addEventListener('input', function() {
                quickAmountButtons.forEach(b => b.classList.remove('selected'));
                validateAmount();
            });

            // Proceed payment button
            document.getElementById('proceedPaymentBtn').addEventListener('click', initiatePayment);

            // Reset modal on close
            const addMoneyModal = document.getElementById('addMoneyModal');
            addMoneyModal.addEventListener('hidden.bs.modal', function() {
                document.getElementById('amountInput').value = '';
                quickAmountButtons.forEach(b => b.classList.remove('selected'));
                paymentMethodCards.forEach(c => c.classList.remove('selected'));
                selectedPaymentMethod = null;
                document.getElementById('proceedPaymentBtn').disabled = true;
            });
        }
        // Validate amount
        function validateAmount() {
            const amountInput = document.getElementById('amountInput');
            const proceedBtn = document.getElementById('proceedPaymentBtn');
            const amount = parseFloat(amountInput.value);

            if (amount >= 1 && amount <= 50000 && selectedPaymentMethod) {
                proceedBtn.disabled = false;
            } else {
                proceedBtn.disabled = true;
            }
        }

        // Initiate payment
        async function initiatePayment() {
            const amount = parseFloat(document.getElementById('amountInput').value);
            
            if (!amount || amount < 1 || amount > 50000) {
                showToast('Please enter a valid amount between ₹1 and ₹50,000', 'error');
                return;
            }

            try {
                // Create Razorpay order
                const response = await fetch('/wallet/create-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount })
                });

                const data = await response.json();

                if (!data.success) {
                    showToast(data.message || 'Failed to create order', 'error');
                    return;
                }

                const orderId = data.order.id;

                // Initialize Razorpay payment
                const options = {
                    key: data.order.keyId,
                    amount: data.order.amount,
                    currency: data.order.currency,
                    order_id: orderId,
                    name: 'CareZon',
                    description: 'Add Money to Wallet',
                    image: '/user/images/logo.png',
                    handler: function(response) {
                        handlePaymentSuccess(response, amount);
                    },
                    prefill: {
                        name: '<%= user.fullName %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone || "" %>'
                    },
                    theme: {
                        color: '#0087bd'
                    },
                    modal: {
                        ondismiss: function() {
                            handlePaymentFailure(orderId, null, amount, 'Payment cancelled by user');
                        }
                    }
                };

                const razorpay = new Razorpay(options);
                
                // Handle payment failure
                razorpay.on('payment.failed', function(response) {
                    handlePaymentFailure(
                        orderId,
                        response.error.metadata.payment_id,
                        amount,
                        response.error.description
                    );
                });
                
                razorpay.open();

            } catch (error) {
                console.error('Error initiating payment:', error);
                showToast('Failed to initiate payment', 'error');
            }
        }

        // Handle payment success
        async function handlePaymentSuccess(paymentResponse, amount) {
            try {
                if (!selectedPaymentMethod) {
                    showToast('Payment method not selected', 'error');
                    return;
                }

                // Verify payment with server
                const response = await fetch('/wallet/verify-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        razorpay_order_id: paymentResponse.razorpay_order_id,
                        razorpay_payment_id: paymentResponse.razorpay_payment_id,
                        razorpay_signature: paymentResponse.razorpay_signature,
                        amount: amount,
                        paymentMethod: selectedPaymentMethod
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addMoneyModal'));
                    modal.hide();

                    showToast(`₹${amount.toFixed(2)} added successfully via ${selectedPaymentMethod.toUpperCase()}!`, 'success');
                    
                    // Reload page to show updated data
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Failed to add money', 'error');
                }
            } catch (error) {
                console.error('Error processing payment:', error);
                showToast('Payment verification failed', 'error');
            }
        }

        // Handle payment failure
        async function handlePaymentFailure(orderId, paymentId, amount, errorDescription) {
            try {
                // Show immediate error message
                showToast('Payment failed: ' + errorDescription, 'error');
                
                // Wait 3 seconds before recording failure
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                const response = await fetch('/wallet/payment-failed', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        razorpay_order_id: orderId,
                        razorpay_payment_id: paymentId,
                        amount: amount,
                        error_description: errorDescription,
                        paymentMethod: selectedPaymentMethod || 'card'
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addMoneyModal'));
                    if (modal) {
                        modal.hide();
                    }

                    showToast('Transaction failure recorded.', 'error');
                    
                    // Reload page after additional 2 seconds
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                }
            } catch (error) {
                console.error('Error recording payment failure:', error);
                showToast('Payment failed', 'error');
                
                // Still reload after delay
                setTimeout(() => {
                    window.location.reload();
                }, 3000);
            }
        }

        // Hide loading spinner
        function hideLoading() {
            const loadingSpinner = document.getElementById('loadingSpinner');
            if (loadingSpinner) {
                loadingSpinner.style.display = 'none';
            }
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            const toastHTML = `
                <div class="custom-toast ${type}">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} fs-4 ${type === 'success' ? 'text-success' : 'text-danger'}"></i>
                    <div>
                        <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong>
                        <div>${message}</div>
                    </div>
                    <button type="button" class="btn-close ms-auto" onclick="this.parentElement.remove()"></button>
                </div>
            `;

            let toastContainer = document.querySelector('.toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container';
                document.body.appendChild(toastContainer);
            }

            toastContainer.insertAdjacentHTML('beforeend', toastHTML);

            // Auto remove after 5 seconds
            setTimeout(() => {
                const toasts = toastContainer.querySelectorAll('.custom-toast');
                if (toasts.length > 0) {
                    toasts[0].remove();
                }
            }, 5000);
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 2
            }).format(amount);
        }

        // Export transaction history (Optional feature)
        function exportTransactions() {
            const csvContent = "data:text/csv;charset=utf-8," 
                + "Date,Type,Description,Amount,Status\n"
                + walletData.transactions.map(t => {
                    const date = new Date(t.date).toLocaleDateString('en-IN');
                    return `${date},${t.type},${t.title},${t.amount},${t.status}`;
                }).join("\n");

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "wallet_transactions.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Refresh wallet data
        async function refreshWalletData() {
            window.location.reload();
        }

        // Handle window resize for responsive behavior
        let resizeTimer;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                // Adjust layout if needed
            }, 250);
        });

        // Prevent form submission on Enter key in amount input
        document.getElementById('amountInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (!document.getElementById('proceedPaymentBtn').disabled) {
                    initiatePayment();
                }
            }
        });

        // Initialize tooltips if using Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    </script>
</body>
</html>