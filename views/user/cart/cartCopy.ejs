<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/user/css/headerAndFooter.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .breadcrumb-nav {
            background: white;
            padding: 15px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .breadcrumb {
            background: none;
            padding: 0;
            margin: 0;
        }

        .breadcrumb-item a {
            color: #6c757d;
            text-decoration: none;
        }

        .breadcrumb-item.active {
            color: #212529;
            font-weight: 500;
        }

        .cart-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .products-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .price-summary {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 80px;
            height: fit-content;
        }

        .product-item {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .product-details h5 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #212529;
            margin-bottom: 5px;
        }

        .product-brand {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .availability-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-right: 10px;
        }

        .available {
            background-color: #d4edda;
            color: #155724;
        }

        .out-of-stock {
            background-color: #f8d7da;
            color: #721c24;
        }

        .stock-info {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .stock-info.low-stock {
            background-color: #f8d7da;
            color: #da0016;
        }

        .stock-info.good-stock {
            background-color: #d4edda;
            color: #155724;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 15px 0;
        }

        .quantity-btn {
            width: 35px;
            height: 35px;
            border: 1px solid #dee2e6;
            background: white;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

        .quantity-btn:hover:not(:disabled) {
            background-color: #f8f9fa;
            border-color: #adb5bd;
        }

        .quantity-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .quantity-input {
            width: 60px;
            text-align: center;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 8px;
            font-weight: 500;
        }

        .product-price {
            font-size: 1.3rem;
            font-weight: 700;
            color: #212529;
        }

        .product-actions {
            display: flex;
            gap: 15px;
            margin-top: 15px;
        }

        .action-btn {
            background: none;
            border: none;
            color: #007bff;
            font-size: 0.9rem;
            cursor: pointer;
            padding: 5px 0;
        }

        .action-btn.remove {
            color: #dc3545;
        }

        .action-btn:hover {
            text-decoration: underline;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            font-size: 1.1rem; /* Increased font size */
        }

        .summary-row span:last-child {
            font-weight: 600; /* Make prices bold */
        }

        .summary-row.total {
            border-top: 2px solid #e9ecef;
            padding-top: 15px;
            margin-top: 15px;
            font-size: 1.3rem; /* Larger for total */
            font-weight: 700;
        }

        /* Savings text styling */
        .savings-text {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border: 1px solid #c3e6cb;
            border-radius: 8px;
            padding: 12px 15px;
            margin-top: 15px;
            text-align: center;
            color: #0bb130;
            font-weight: 700;
            font-size: 1.1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .checkout-btn {
            background-color: #87CEEB !important;
            border: none;
            color: white;
            font-weight: 600;
            padding: 15px;
            border-radius: 8px;
            width: 100%;
            margin-top: 20px;
            transition: all 0.3s;
        }

        .checkout-btn:hover {
            background-color: #5DADE2 !important;
            transform: translateY(-1px);
        }

        .checkout-btn:disabled {
            background-color: #6c757d !important;
            cursor: not-allowed;
            transform: none;
        }

        .disabled-item {
            opacity: 0.6;
        }

        .disabled-item .product-details h5,
        .disabled-item .product-brand {
            color: #6c757d !important;
        }

        .empty-cart {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }

        .empty-cart i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .cart-container {
                padding: 10px;
            }
            
            .product-item {
                padding: 15px;
            }
            
            .product-image {
                width: 80px;
                height: 80px;
            }
            
            .products-section {
                margin-bottom: 20px;
            }
            
            .price-summary {
                position: static;
            }
            
            .product-details h5 {
                font-size: 1rem;
            }
            
            .product-price {
                font-size: 1.1rem;
            }

            .summary-row {
                font-size: 1rem;
            }

            .summary-row.total {
                font-size: 1.2rem;
            }

            .savings-text {
                font-size: 1rem;
                padding: 10px 12px;
            }
        }
    </style>
</head>
<body>

    <!-- Header -->
    <%-include("../../views/partials/user/header.ejs")%>

    <!-- Toast Container -->
    <div class="toast-container"></div>

    <!-- Breadcrumb Navigation -->
    <nav class="breadcrumb-nav">
        <div class="container-fluid">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="fas fa-home"></i> Home</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/products/shop"><i class="fas fa-store"></i> Shop</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-shopping-cart"></i> Shopping Cart
                    </li>
                    <li class="breadcrumb-item ms-auto" id="item-count-breadcrumb">
                        <%= cart && cart.items ? cart.items.reduce((count, item) => count + item.quantity, 0) : 0 %> Items
                    </li>
                </ol>
            </nav>
        </div>
    </nav>

    <div class="cart-container">
        <div class="row g-4">
            <!-- Products Section -->
            <div class="col-lg-8">
                <div class="products-section">
                    <% if (!cart || !cart.items || cart.items.length === 0) { %>
                        <!-- Empty Cart State -->
                        <div class="empty-cart">
                            <i class="fas fa-shopping-cart"></i>
                            <h3>Your cart is empty</h3>
                            <p>Looks like you haven't added anything to your cart yet.</p>
                            <a href="/products/shop" class="btn btn-primary mt-3">
                                <i class="fas fa-arrow-left me-2"></i> Continue Shopping
                            </a>
                        </div>
                    <% } else { %>
                        <!-- Cart Items -->
                        <% cart.items.forEach(function(item, index) { 
                            const product = item.productId;
                            const variant = product.variants.find(v => v._id.toString() === item.variantId.toString());
                            if (!variant) return;
                            
                            const isOutOfStock = variant.stock === 0;
                            const isDisabled = !product.brand?.isListed || !product.category?.isListed || !variant.isListed || item.quantity === 0;
                        %>
                            <div class="product-item d-flex <%= isDisabled ? 'disabled-item' : '' %>" 
                                 data-product-id="<%= product._id %>" 
                                 data-variant-id="<%= variant._id %>"
                                 data-price="<%= variant.salesPrice %>"
                                 data-regular-price="<%= variant.regularPrice %>"
                                 data-stock="<%= variant.stock %>">
                                
                                <a href="/products/details/<%= product._id %>" class="text-decoration-none">
                                    <img src="<%= variant.images && variant.images[0] && variant.images[0].url ? variant.images[0].url : '/user/images/logo.png' %>" 
                                         alt="<%= variant.images && variant.images[0] && variant.images[0].altText ? variant.images[0].altText : product.name %>" 
                                         class="product-image me-3" style="cursor: pointer;">
                                </a>
                                
                                <div class="product-details flex-grow-1">
                                    <h5><%= product.name %></h5>
                                    <div class="product-brand">
                                        <%= product.brand?.name || 'Unknown Brand' %>
                                        <% if (item.variantLabel) { %>
                                            / <%= item.variantLabel %>
                                        <% } %>
                                    </div>
                                    <div class="d-flex align-items-center mb-2">
                                        <% if (isOutOfStock) { %>
                                            <span class="availability-badge out-of-stock">
                                                <i class="fas fa-times-circle me-1"></i> Out of Stock
                                            </span>
                                        <% } else { %>
                                            <span class="availability-badge available">
                                                <i class="fas fa-circle me-1"></i> Available
                                            </span>
                                            <span class="stock-info <%= variant.stock <= 7 ? 'low-stock' : 'good-stock' %>"><%= variant.stock %> left</span>
                                        <% } %>
                                    </div>
                                    <div class="quantity-controls">
                                        <span>Quantity:</span>
                                        <button class="quantity-btn" onclick="updateQuantity('<%= product._id %>', '<%= variant._id %>', 'decrement')" 
                                                <%= isDisabled || item.quantity <= 1 ? 'disabled' : '' %>>-</button>
                                        <input type="number" class="quantity-input" value="<%= item.quantity %>" 
                                               min="1" max="<%= maxQuantity %>" readonly>
                                        <button class="quantity-btn" onclick="updateQuantity('<%= product._id %>', '<%= variant._id %>', 'increment')" 
                                                <%= isDisabled || item.quantity >= maxQuantity || item.quantity >= variant.stock ? 'disabled' : '' %>>+</button>
                                    </div>
                                    <div class="product-actions">
                                        <button class="action-btn remove" onclick="confirmRemove('<%= product._id %>', '<%= variant._id %>')">
                                            <i class="fas fa-trash"></i> Remove
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="text-end">
                                    <% 
                                        const regularPriceTotal = variant.regularPrice * item.quantity;
                                        const hasDiscount = variant.regularPrice > variant.salesPrice;
                                    %>
                                    <% if (hasDiscount) { %>
                                        <div class="text-muted small text-decoration-line-through">₹<%= new Intl.NumberFormat('en-IN').format(regularPriceTotal) %></div>
                                    <% } %>
                                    <div class="product-price">₹<span class="item-total"><%= new Intl.NumberFormat('en-IN').format(item.subtotal) %></span></div>
                                    <div class="text-muted small">per item: ₹<%= new Intl.NumberFormat('en-IN').format(variant.salesPrice) %></div>
                                    <% if (hasDiscount) { %>
                                        <div class="text-success small">You save ₹<%= new Intl.NumberFormat('en-IN').format(regularPriceTotal - item.subtotal) %></div>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>

                        <!-- Continue Shopping Link -->
                        <div class="p-3">
                            <a href="/products/shop" class="text-decoration-none">
                                <i class="fas fa-arrow-left me-2"></i> Continue Shopping
                            </a>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Price Summary Section -->
            <div class="col-lg-4">
                <div class="price-summary p-4">
                    <h5 class="mb-3">Order Summary</h5>
                    
                    <% 
                        let validItems = [];
                        let itemCount = 0;
                        let subtotal = 0;
                        let totalRegularPrice = 0;
                        let totalDiscount = 0;
                        
                        if (cart && cart.items) {
                            validItems = cart.items.filter(item => {
                                const product = item.productId;
                                const variant = product.variants.find(v => v._id.toString() === item.variantId.toString());
                                return product.brand?.isListed && product.category?.isListed && variant?.isListed;
                            });

                            itemCount = validItems.reduce((count, item) => {
                                const product = item.productId;
                                const variant = product.variants.find(v => v._id.toString() === item.variantId.toString());
                                // Only count items that have quantity > 0 (not out of stock)
                                return item.quantity > 0 ? count + item.quantity : count;
                            }, 0);

                           validItems.forEach(item => {
                                const product = item.productId;
                                const variant = product.variants.find(v => v._id.toString() === item.variantId.toString());
                                
                                // Only calculate totals for items with quantity > 0 (in stock)
                                if (item.quantity > 0) {
                                    const regularPriceTotal = variant.regularPrice * item.quantity;
                                    const salesPriceTotal = variant.salesPrice * item.quantity;
                                    
                                    totalRegularPrice += regularPriceTotal;
                                    subtotal += salesPriceTotal;
                                }
                            });
                                                        
                            totalDiscount = totalRegularPrice - subtotal;
                        }
                        
                        const total = subtotal;
                    %>
                    
                    <div class="summary-row">
                        <span>Price (<span id="item-count"><%= itemCount %></span> items)</span>
                        <span>₹<span id="regular-price"><%= new Intl.NumberFormat('en-IN').format(totalRegularPrice) %></span></span>
                    </div>
                    
                    <% if (totalDiscount > 0) { %>
                    <div class="summary-row">
                        <span>Discount</span>
                        <span class="text-success">-₹<span id="discount"><%= new Intl.NumberFormat('en-IN').format(totalDiscount) %></span></span>
                    </div>
                    <% } %>
                    
                    
                    
                    <div class="summary-row">
                        <span>Shipping <i class="fas fa-info-circle text-muted"></i></span>
                        <span class="text-success"><i class="fas fa-check"></i> Free</span>
                    </div>
                    
                    <div class="summary-row total">
                        <span>Total Amount</span>
                        <span>₹<span id="total"><%= new Intl.NumberFormat('en-IN').format(total) %></span></span>
                    </div>
                    
                    <!-- Savings Text -->
                    <% if (totalDiscount > 0) { %>
                    <div class="savings-text" id="savings-display">
                        <i class="fas fa-tag me-2"></i>
                        You will save ₹<span id="total-savings"><%= new Intl.NumberFormat('en-IN').format(totalDiscount) %></span> on this order
                    </div>
                    <% } %>
                    
                    <button class="checkout-btn" id="checkout-btn" onclick="proceedToCheckout()" <%= itemCount === 0 ? 'disabled' : '' %>>
                        Proceed to Checkout
                    </button>
                    
                    <div class="text-center mt-3">
                        <small class="text-muted">We accept :</small>
                        <div class="payment-methods d-flex justify-content-center gap-2 mt-2">
                            <img src="/user/images/visa.png" alt="Visa" style="width: 40px; height: auto;">
                            <img src="/user/images/Mastercard.png" alt="Mastercard" style="width: 40px; height: auto;">
                            <img src="/user/images/Amex.jpeg" alt="Amex" style="width: 40px; height: auto;">
                            <img src="/user/images/PayPal.png" alt="PayPal" style="width: 40px; height: auto;">
                            <img src="/user/images/RuPay.png" alt="RuPay" style="width: 40px; height: auto;">
                            <img src="/user/images/Bajaj.jpeg" alt="Bajaj" style="width: 40px; height: auto;">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Remove Confirmation Modal -->
    <div class="modal fade" id="removeModal" tabindex="-1" aria-labelledby="removeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title" id="removeModalLabel">Remove Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <i class="fas fa-exclamation-triangle text-warning fs-1 mb-3"></i>
                    <p>Are you sure you want to remove this item from your cart?</p>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmRemoveBtn">Remove</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentRemoveItem = null;
        const maxQuantity = <%= maxQuantity || 10 %>;

        // Utility Functions
        function showToast(message, type = 'success') {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = `toast-${Date.now()}`;
            
            const toastHTML = `
                <div class="toast align-items-center text-bg-${type} border-0" role="alert" id="${toastId}">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHTML);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
            toast.show();
            
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 2
            }).format(amount);
        }

        // Cart Operations
        async function updateQuantity(productId, variantId, action) {
            try {
                const itemElement = document.querySelector(`[data-product-id="${productId}"][data-variant-id="${variantId}"]`);
                const stock = parseInt(itemElement.getAttribute('data-stock'));
                
                if (stock === 0) {
                    showToast('This item is out of stock', 'warning');
                    return;
                }

                const response = await fetch('/cart/updateQuantity', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        variantId,
                        action
                    })
                });

                const result = await response.json();

                if (result.success) {
                    if (result.quantity === 0) {
                    // Item quantity is 0 (out of stock), update UI but don't remove
                    const itemElement = document.querySelector(`[data-product-id="${productId}"][data-variant-id="${variantId}"]`);
                    const quantityInput = itemElement.querySelector('.quantity-input');
                    const itemTotalSpan = itemElement.querySelector('.item-total');
                    
                    quantityInput.value = 0;
                    itemTotalSpan.textContent = '₹0';
                    
                    itemElement.classList.add('disabled-item');
                    
                    // Disable all buttons for this item
                    const buttons = itemElement.querySelectorAll('.quantity-btn, .action-btn');
                    buttons.forEach(btn => btn.disabled = true);
                    
                    updateCartSummary(result.totalAmount, result.cartItemsCount);
                    showToast('Item is out of stock', 'warning');
                } else {                                       
                        const itemElement = document.querySelector(`[data-product-id="${productId}"][data-variant-id="${variantId}"]`);
                        const quantityInput = itemElement.querySelector('.quantity-input');
                        const itemTotalSpan = itemElement.querySelector('.item-total');
                        
                        quantityInput.value = result.quantity;
                        itemTotalSpan.textContent = formatCurrency(result.subtotal);

                        // Update button states
                        const decrementBtn = itemElement.querySelector('.quantity-btn');
                        const incrementBtn = itemElement.querySelector('.quantity-btn:last-of-type');
                        const stock = parseInt(itemElement.getAttribute('data-stock'));
                        
                        decrementBtn.disabled = result.quantity <= 1;
                        incrementBtn.disabled = result.quantity >= maxQuantity || result.quantity >= stock;

                        // Update cart summary
                        updateCartSummary(result.totalAmount, result.cartItemsCount);
                        showToast('Cart updated successfully', 'success');
                    }
                } else {
                    showToast(result.message || 'Failed to update quantity', 'danger');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                showToast('Error updating quantity', 'danger');
            }
        }

        function confirmRemove(productId, variantId) {
            currentRemoveItem = { productId, variantId };
            const modal = new bootstrap.Modal(document.getElementById('removeModal'));
            modal.show();
        }

        async function removeFromCart(productId, variantId) {
            try {
                const response = await fetch('/cart/remove', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        variantId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Item removed from cart', 'success');
                    // Reload page to reflect changes
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showToast(result.message || 'Failed to remove item', 'danger');
                }
            } catch (error) {
                console.error('Error removing item:', error);
                showToast('Error removing item', 'danger');
            }
        }

        function updateCartSummary(totalAmount, itemCount) {
            // Calculate new totals
            let subtotal = 0;
            let totalRegularPrice = 0;
            let actualItemCount = 0; 

            document.querySelectorAll('.product-item:not(.disabled-item)').forEach(item => {
                const stock = parseInt(item.getAttribute('data-stock'));
                const quantity = parseInt(item.querySelector('.quantity-input').value);
                
                // Only calculate for items with stock > 0 and quantity > 0
                if (stock > 0 && quantity > 0) {
                    const price = parseFloat(item.getAttribute('data-price'));
                    const regularPrice = parseFloat(item.getAttribute('data-regular-price'));
                    
                    subtotal += price * quantity;
                    totalRegularPrice += regularPrice * quantity;
                    actualItemCount += quantity;
                }
            });

            const totalDiscount = totalRegularPrice - subtotal;
            const total = subtotal;

            document.getElementById('item-count').textContent = itemCount;
            document.getElementById('item-count-breadcrumb').textContent = `${itemCount} Items`;
            
            document.getElementById('checkout-btn').disabled = actualItemCount === 0;

            if (document.getElementById('regular-price')) {
                document.getElementById('regular-price').textContent = formatCurrency(totalRegularPrice);
            }
            if (document.getElementById('discount')) {
                document.getElementById('discount').textContent = formatCurrency(totalDiscount);
            }
            
            document.getElementById('subtotal').textContent = formatCurrency(subtotal);
            document.getElementById('total').textContent = formatCurrency(total);

            // Update savings text
            const savingsDisplay = document.getElementById('savings-display');
            const totalSavingsSpan = document.getElementById('total-savings');
            if (totalDiscount > 0) {
                if (savingsDisplay) {
                    savingsDisplay.style.display = 'block';
                    totalSavingsSpan.textContent = formatCurrency(totalDiscount);
                }
            } else {
                if (savingsDisplay) {
                    savingsDisplay.style.display = 'none';
                }
            }

            // Update checkout button
            document.getElementById('checkout-btn').disabled = itemCount === 0;
        }

        async function proceedToCheckout() {
            try {
                 const response = await fetch('/cart/validateForCheckout', {
                    method: 'POST',  // Change from GET to POST
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    if (result.isPartialCheckout) {
                        // Handle partial checkout scenario
                        const message = `${result.availableCount} items are available for checkout. ${result.unavailableCount} items will remain in cart.`;
                        if (confirm(message + '\\n\\nProceed with available items?')) {
                            window.location.href = '/cart/checkout';
                        }
                    } else {
                        // All items available, proceed normally
                        window.location.href = '/cart/checkout';
                    }
                }
            } catch (error) {
                console.error('Error validating checkout:', error);
                showToast('Error validating checkout', 'danger');
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Handle remove confirmation
            document.getElementById('confirmRemoveBtn').addEventListener('click', function() {
                if (currentRemoveItem) {
                    removeFromCart(currentRemoveItem.productId, currentRemoveItem.variantId);
                    const modal = bootstrap.Modal.getInstance(document.getElementById('removeModal'));
                    modal.hide();
                    currentRemoveItem = null;
                }
            });
            updateOutOfStockDisplay();
        });

        function updateOutOfStockDisplay() {
            document.querySelectorAll('.product-item').forEach(item => {
                const stock = parseInt(item.getAttribute('data-stock'));
                const quantity = parseInt(item.querySelector('.quantity-input').value);
                
                if (stock === 0 || quantity === 0) {
                    item.classList.add('disabled-item');
                    
                    // Update availability badge
                    const availabilityBadge = item.querySelector('.availability-badge');
                    if (availabilityBadge) {
                        availabilityBadge.className = 'availability-badge out-of-stock';
                        availabilityBadge.innerHTML = '<i class="fas fa-times-circle me-1"></i> Out of Stock';
                    }
                    
                    // Disable buttons
                    const buttons = item.querySelectorAll('.quantity-btn, .action-btn.remove');
                    buttons.forEach(btn => btn.disabled = true);
                }
            });
        }

    
    </script>
</body>
</html>