<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Your Order</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/user/css/headerAndFooter.css">
    <style>
        :root {
            --primary-color: #4f46e5;
            --secondary-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --dark-color: #1f2937;
            --light-bg: #f8fafc;
            --border-color: #e2e8f0;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--light-bg);
            color: var(--dark-color);
        }

        .page-container {
            min-height: 100vh;
            padding: 2rem 0;
        }

        .checkout-header {
            background: white;
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 0;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
        }

        .step-indicator {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .step {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: white;
            border: 2px solid var(--border-color);
            border-radius: 50px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .step.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .step.completed {
            background: var(--secondary-color);
            color: white;
            border-color: var(--secondary-color);
        }

        .card {
            border: none;
            box-shadow: var(--shadow);
            border-radius: 12px;
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
        }

        .card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

        .card-header {
            background: white;
            border-bottom: 1px solid var(--border-color);
            padding: 1.5rem;
            font-weight: 600;
            color: var(--dark-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .address-card {
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .address-card:hover {
            border-color: var(--primary-color);
        }

        .address-card.selected {
            border: 2px solid var(--primary-color);
            background: linear-gradient(135deg, rgba(79, 70, 229, 0.05), rgba(79, 70, 229, 0.1));
        }

        .address-card.selected::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary-color);
        }

        .address-type-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-weight: 600;
        }

        .badge-home { background: rgba(239, 68, 68, 0.1); color: var(--danger-color); }
        .badge-work { background: rgba(79, 70, 229, 0.1); color: var(--primary-color); }
        .badge-other { background: rgba(107, 114, 128, 0.1); color: #6b7280; }

        .product-item {
            border-bottom: 1px solid var(--border-color);
            padding: 1.5rem 0;
            transition: all 0.3s ease;
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .product-item:hover {
            background: rgba(79, 70, 229, 0.02);
        }

        .product-image {
            width: 80px;
            height: 80px;
            border-radius: 8px;
            object-fit: cover;
            box-shadow: var(--shadow);
        }

        .payment-option {
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            padding: 1rem;
        }

        .payment-option:hover {
            border-color: var(--primary-color);
            box-shadow: var(--shadow);
        }

        .payment-option.selected {
            border-color: var(--primary-color);
            background: linear-gradient(135deg, rgba(79, 70, 229, 0.05), rgba(79, 70, 229, 0.1));
        }

        .payment-icons {
            display: flex;
            gap: 0.5rem;
        }

        .payment-icon {
            width: 32px;
            height: 20px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
            color: white;
        }

        .visa { background: #1a1f71; }
        .mastercard { background: #eb001b; }
        .amex { background: #006fcf; }
        .gpay { background: #4285f4; }
        .phonepe { background: #5f259f; }
        .paytm { background: #002970; }

        .order-summary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            position: sticky;
            top: 5.5rem;
        }

        .order-summary .card-header {
            background: rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .summary-row .text-success {
                color: #10b981 !important;
            }

            /* For order summary discount specifically */
            .order-summary .summary-row .text-success,
            .order-summary .summary-row #discount-amount {
                color: #ffffff !important; /* Light green that works on dark background */
        }

        .summary-row:last-child {
            border-bottom: none;
            font-weight: 600;
            font-size: 1.1rem;
            margin-top: 0.5rem;
            padding-top: 1rem;
            border-top: 2px solid rgba(255, 255, 255, 0.2);
        }

        .btn-primary {
            background: var(--primary-color);
            border-color: var(--primary-color);
            padding: 0.75rem 2rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: #3730a3;
            border-color: #3730a3;
            transform: translateY(-1px);
            box-shadow: var(--shadow-lg);
        }

        .btn-outline-primary {
            border-color: var(--primary-color);
            color: var(--primary-color);
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: var(--shadow-lg);
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.25);
        }

        .success-page {
            display: none;
            text-align: center;
            padding: 3rem 1rem;
            position: relative;
            z-index: 100;
            background: var(--light-bg);
            min-height: 70vh;
        }

        .processing-page {
            display: none;
            text-align: center;
            padding: 3rem 1rem;
            position: relative;
            z-index: 100;
            background: var(--light-bg);
            min-height: 70vh;
        }

        .processing-animation {
            width: 150px;
            height: 150px;
            margin: 0 auto 2rem;
            border-radius: 50%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 4rem;
            animation: processingPulse 1.5s infinite;
            position: relative;
            overflow: hidden;
        }

        .processing-animation::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes processingPulse {
            0%, 100% { transform: scale(1); box-shadow: 0 0 20px rgba(102, 126, 234, 0.5); }
            50% { transform: scale(1.05); box-shadow: 0 0 40px rgba(102, 126, 234, 0.8); }
        }

        @keyframes shimmer {
            0% { transform: rotate(0deg) translate(-50%, -50%); }
            100% { transform: rotate(360deg) translate(-50%, -50%); }
        }

        .success-animation {
            width: 120px;
            height: 120px;
            margin: 0 auto 2rem;
            border-radius: 50%;
            background: var(--secondary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 3rem;
            animation: successPulse 2s infinite;
            position: relative;
        }

        .success-animation::before {
            content: '🎉';
            position: absolute;
            font-size: 2rem;
            animation: celebrate 3s infinite;
            top: -20px;
            left: -20px;
        }

        .success-animation::after {
            content: '✨';
            position: absolute;
            font-size: 1.5rem;
            animation: celebrate 3s infinite reverse;
            bottom: -15px;
            right: -15px;
        }

        @keyframes celebrate {
            0%, 100% { transform: rotate(0deg) scale(1); opacity: 0.7; }
            50% { transform: rotate(180deg) scale(1.2); opacity: 1; }
        }

        .input-group {
            position: relative;
        }

        .input-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
            z-index: 10;
            pointer-events: none;
        }

        .form-control {
            padding-right: 40px;
        }

        @keyframes successPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in-up {
            animation: fadeInUp 0.6s ease forwards;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 0.5rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .step-indicator {
                overflow-x: auto;
                padding: 0 1rem;
            }
            
            .step {
                white-space: nowrap;
                min-width: fit-content;
            }
            
            .product-image {
                width: 60px;
                height: 60px;
            }
            
            .payment-option {
                margin-bottom: 1rem;
            }
        }

        .security-badge {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.2));
            border: 1px solid var(--secondary-color);
            color: var(--secondary-color);
            padding: 0.75rem;
            border-radius: 8px;
            text-align: center;
            margin-top: 1rem;
        }
        .dropdown-menu {
            z-index: 1050;
        }

        .address-card .dropdown {
            position: relative;
        }

        .address-card .dropdown-menu {
            position: absolute;
            right: 0;
        }

        .coupon-card {
            border: 2px dashed var(--border-color);
            border-radius: 8px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .coupon-card:hover {
            border-color: var(--primary-color);
            background: rgba(79, 70, 229, 0.05);
        }

        .coupon-card.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .coupon-card .coupon-code {
            background: var(--light-bg);
            padding: 0.5rem;
            border-radius: 4px;
            font-weight: bold;
            color: var(--primary-color);
        }

        /* Toast Styles */
        .toast-container {
            z-index: 9999;
        }

        .toast {
            min-width: 300px;
            background: white;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .toast.warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .toast.info {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
        }

        .toast-body {
            padding: 1rem;
            font-weight: 500;
        }

        .toast-icon {
            font-size: 1.25rem;
        }
    </style>
</head>
<body>

    <!-- Header -->
    <%-include("../../views/partials/user/header.ejs")%>

    <div class="page-container">
        <!-- Checkout Header -->
        <div class="checkout-header">
            <div class="container">
                <div class="step-indicator">
                    <div class="step completed">
                        <i class="fas fa-check"></i>
                        <span>Cart</span>
                    </div>
                    <div class="step active">
                        <i class="fas fa-map-marker-alt"></i>
                        <span>Address</span>
                    </div>
                    <div class="step">
                        <i class="fas fa-credit-card"></i>
                        <span>Payment</span>
                    </div>
                    <div class="step">
                        <i class="fas fa-check-circle"></i>
                        <span>Complete</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <!-- Main Checkout Content -->
            <div id="checkout-content" class="row">
                <div class="col-lg-8">
                    <!-- Delivery Address Section -->
                    <div class="card fade-in-up">
                        <div class="card-header">
                            <i class="fas fa-map-marker-alt text-primary"></i>
                            <span>DELIVERY ADDRESS</span>
                        </div>
                        <div class="card-body">
                           
                            <div id="address-selection">
                                <% if (addresses && addresses.length > 0) { %>
                                    <% addresses.forEach(address => { %>
                                        <div class="address-card card mb-3" data-address-id="<%= address._id %>">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div class="flex-grow-1">
                                                        <div class="d-flex align-items-center gap-2 mb-2">
                                                            <strong><%= address.fullName %></strong>
                                                            <span class="address-type-badge badge-<%= address.addressType %>"><%= address.addressType.toUpperCase() %></span>
                                                            <% if (address.isDefault) { %>
                                                                <span class="badge bg-primary">DEFAULT</span>
                                                            <% } %>
                                                        </div>
                                                        <div class="text-muted mb-2">
                                                            <i class="fas fa-phone me-2"></i><%= address.phoneOne %>
                                                        </div>
                                                        <div class="address-text">
                                                            <%= address.area %>, <%= address.locality %><%= address.landmark ? ', ' + address.landmark : '' %>, <%= address.district %>, <%= address.state %> - <%= address.pin %>
                                                        </div>
                                                    </div>
                                                    <div class="dropdown">
                                                        <button class="btn btn-link text-muted p-0" data-bs-toggle="dropdown">
                                                            <i class="fas fa-ellipsis-v"></i>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item edit-address" href="#" data-address-id="<%= address._id %>"><i class="fas fa-edit me-2"></i>Edit</a></li>
                                                            <li><a class="dropdown-item delete-address" href="#" data-address-id="<%= address._id %>"><i class="fas fa-trash me-2"></i>Delete</a></li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <button class="btn btn-outline-primary btn-sm mt-2 deliver-here-btn">
                                                    <i class="fas fa-truck me-2"></i>DELIVER HERE
                                                </button>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <div class="text-center py-4">
                                        <p class="text-muted mb-3">No addresses found. Please add a delivery address.</p>
                                    </div>
                                <% } %>
                                <div class="text-center">
                                    <button class="btn btn-link text-primary fw-bold" data-bs-toggle="modal" data-bs-target="#addressModal">
                                        <i class="fas fa-plus me-2"></i>Add a new address
                                    </button>
                                </div>
                            </div>

                            <!-- Selected Address Display -->
                            <div id="selected-address-display" style="display: none;">
                                <div class="selected-address-info p-3 bg-light rounded mb-3">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div id="selected-address-details"></div>
                                        <button class="btn btn-outline-primary btn-sm change-address-btn">
                                            <i class="fas fa-edit me-1"></i>CHANGE
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Payment Method Section -->
                    <div class="card fade-in-up" id="payment-section" style="display: none;">
                        <div class="card-header">
                            <i class="fas fa-credit-card text-warning"></i>
                            <span>PAYMENT METHOD</span>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="payment-option" data-payment="card">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div>
                                                <div class="d-flex align-items-center gap-2 mb-2">
                                                    <i class="fas fa-credit-card text-primary"></i>
                                                    <strong>Card Payment</strong>
                                                </div>
                                                <small class="text-muted">Credit/Debit Card</small>
                                                <div class="payment-icons mt-2">
                                                    <div class="payment-icon visa">VISA</div>
                                                    <div class="payment-icon mastercard">MC</div>
                                                    <div class="payment-icon amex">AMEX</div>
                                                </div>
                                            </div>
                                            <input type="radio" name="payment" value="card" class="form-check-input">
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="payment-option" data-payment="upi">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div>
                                                <div class="d-flex align-items-center gap-2 mb-2">
                                                    <i class="fas fa-mobile-alt" style="color: #ff6b35;"></i>
                                                    <strong>UPI Payment</strong>
                                                </div>
                                                <small class="text-muted">Pay using UPI</small>
                                                <div class="payment-icons mt-2">
                                                    <div class="payment-icon gpay">GPay</div>
                                                    <div class="payment-icon phonepe">PhonePe</div>
                                                    <div class="payment-icon paytm">Paytm</div>
                                                </div>
                                            </div>
                                            <input type="radio" name="payment" value="upi" class="form-check-input">
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="payment-option" data-payment="netbanking">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div>
                                                <div class="d-flex align-items-center gap-2 mb-2">
                                                    <i class="fas fa-university text-success"></i>
                                                    <strong>Net Banking</strong>
                                                </div>
                                                <small class="text-muted">Online Banking</small>
                                                <div class="mt-2">
                                                    <small class="text-success">All major banks supported</small>
                                                </div>
                                            </div>
                                            <input type="radio" name="payment" value="netbanking" class="form-check-input">
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="payment-option" data-payment="wallet">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div>
                                                <div class="d-flex align-items-center gap-2 mb-2">
                                                    <i class="fas fa-wallet text-info"></i>
                                                    <strong>Wallet</strong>
                                                </div>
                                                <small class="text-muted">Pay from wallet balance</small>
                                                <div class="mt-2">
                                                    <small class="text-info" id="wallet-balance">Balance: ₹0</small>
                                                </div>
                                            </div>
                                            <input type="radio" name="payment" value="wallet" class="form-check-input">
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="payment-option <%= !isCODAllowed ? 'disabled' : '' %>" data-payment="cod">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div>
                                                <div class="d-flex align-items-center gap-2 mb-2">
                                                    <i class="fas fa-money-bill-wave text-success"></i>
                                                    <strong>Cash on Delivery</strong>
                                                </div>
                                                <small class="text-muted">Pay when delivered</small>
                                                <div class="mt-2">
                                                    <% if (!isCODAllowed) { %>
                                                        <small class="text-danger">Not available for orders above ₹<%= COD_MAX_AMOUNT %></small>
                                                    <% } %>
                                                </div>
                                            </div>
                                            <input type="radio" name="payment" value="cod" class="form-check-input" <%= isCODAllowed ? 'checked' : 'disabled' %>>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="security-badge mt-3">
                                <i class="fas fa-shield-alt me-2"></i>
                                Your payment information is encrypted and secure
                            </div>
                        </div>
                    </div>

                    <!-- Order Items Section -->
                    <div class="card fade-in-up" id="order-items-section" style="display: none;">
                        <div class="card-header">
                            <i class="fas fa-shopping-cart text-success"></i>
                            <span>ORDER ITEMS</span>
                        </div>
                        
                        <div class="card-body">
                            <% if (cart && cart.items && cart.items.length > 0) { %>
                                <% cart.items.forEach(item => { %>
                                    <div class="product-item">
                                        <div class="d-flex gap-3">
                                            <img src="<%= item.productId.variants.find(v => v._id.toString() === item.variantId.toString()).images[0]?.url || '/user/images/logo.png' %>" 
                                                alt="<%= item.productId.name %>" class="product-image">
                                            <div class="flex-grow-1">
                                                <h6><%= item.productId.name %></h6>
                                                <div class="text-muted small"><%= item.productId.brand.name %></div>
                                                <div class="text-muted small">Qty: <%= item.quantity %> • <%= item.variantLabel || 'N/A' %></div>
                                                <div class="text-success fw-bold">₹<%= item.effectiveSalesPrice ? (item.effectiveSalesPrice * item.quantity) : item.subtotal %></div>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <!-- Order Summary -->
                    <div class="card order-summary fade-in-up">
                        <div class="card-header text-white">
                            <i class="fas fa-receipt"></i>
                            <span>ORDER SUMMARY</span>
                        </div>
                        <div class="card-body">
                           
                        <div class="mt-4">

                        <!-- Coupon Section -->
                        <div class="coupon-section mb-3">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" id="coupon-code-input" placeholder="Enter coupon code">
                                <button class="btn btn-outline-light" id="apply-coupon-code-btn" type="button">
                                    <i class="fas fa-check me-1"></i>Apply
                                </button>
                            </div>
                            <button type="button" class="btn btn-link text-white p-0 text-decoration-none" id="select-coupon-btn">
                                <i class="fas fa-ticket-alt me-1"></i>View Available Coupons
                            </button>
                            
                            <!-- Applied Coupon Display -->
                            <div id="applied-coupon-display" style="display: none;" class="mt-2 p-2 bg-white bg-opacity-10 rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <small class="text-white"><strong id="applied-coupon-code"></strong></small>
                                        <small class="d-block text-white-50" id="applied-coupon-desc"></small>
                                    </div>
                                    <button class="btn btn-sm btn-link text-white p-0" id="remove-coupon-btn">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                            <div class="summary-row">
                                <span>Subtotal (<%= cart?.items?.length || 0 %> items)</span>
                                <span>₹<%= cart?.totalAmount || 0 %></span>
                            </div>
                            <div class="summary-row">
                                <span>Delivery Fee</span>
                                <span id="delivery-fee">₹50</span>
                            </div>

                            <div class="summary-row" id="discount-row" style="display: none;">
                                <span>Discount (Coupon)</span>
                                <span class="text-success" id="discount-amount">-₹0</span>
                            </div>

                            <div class="text-center mt-2 mb-3">
                                <small class="text-light">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Free delivery on orders above ₹300
                                </small>
                            </div>

                            <div class="summary-row">
                                <strong>Total</strong>
                                <strong id="total-amount">₹<%= (cart?.totalAmount || 0) + 50 %></strong>
                            </div>
                        </div>

                            <button class="btn btn-warning w-100 mt-3 fw-bold" id="place-order-btn" disabled>
                                <div class="loading-spinner" id="loading-spinner"></div>
                                <span id="btn-text">SELECT ADDRESS TO CONTINUE</span>
                                <i class="fas fa-arrow-right ms-2"></i>
                            </button>

                            <div class="text-center mt-3">
                                <small class="text-light">
                                    <i class="fas fa-lock me-1"></i>
                                    256-bit SSL secured checkout
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Processing Page -->
            <div id="processing-content" class="processing-page">
                <div class="processing-animation">
                    <i class="fas fa-credit-card"></i>
                </div>
                <h3 class="text-primary mb-3">Processing Your Order...</h3>
                <p class="text-muted mb-4">Please wait while we confirm your payment and prepare your order.</p>
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>

            <!-- Success Page -->
            <div id="success-content" class="success-page">
                <div class="success-animation">
                    <i class="fas fa-check"></i>
                </div>
                <h2 class="text-success mb-3">Order Placed Successfully!</h2>
                <p class="text-muted mb-4">Thank you for your purchase. Your order has been confirmed and will be delivered to your address soon.</p>
                <div class="d-flex gap-3 justify-content-center flex-wrap">
                    <button class="btn btn-primary" id="view-order-details">
                        <i class="fas fa-eye me-2"></i>View Order Details
                    </button>
                    <a href="/products/shop"><button class="btn btn-outline-primary" id="continue-shopping">
                        <i class="fas fa-shopping-bag me-2"></i>Continue Shopping
                    </button></a>       
                </div>
            </div>

            <!-- Payment Failure Page -->
            <div id="failure-content" class="success-page" style="display: none;">
                <div class="success-animation" style="background: var(--danger-color);">
                    <i class="fas fa-times"></i>
                </div>
                <h2 class="text-danger mb-3">Payment Failed!</h2>
                <p class="text-muted mb-4" id="failure-message">Unfortunately, we couldn't process your payment. Please try again.</p>
                <div class="d-flex gap-3 justify-content-center flex-wrap">
                    <button class="btn btn-primary" id="retry-payment">
                        <i class="fas fa-redo me-2"></i>Retry Payment
                    </button>
                    <a href="/cart"><button class="btn btn-outline-primary">
                        <i class="fas fa-shopping-cart me-2"></i>Back to Cart
                    </button></a>
                </div>
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div class="modal fade" id="addressModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-map-marker-alt me-2"></i>
                        <span id="modal-title">Add New Address</span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addressForm">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Full Name *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="fullName" required>
                                    <i class="fas fa-user input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Phone Number *</label>
                                <div class="input-group">
                                    <input type="tel" class="form-control" id="phoneOne" required>
                                    <i class="fas fa-phone input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Alternate Phone</label>
                                <div class="input-group">
                                    <input type="tel" class="form-control" id="phoneTwo">
                                    <i class="fas fa-phone input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">PIN Code *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="pin" required>
                                    <i class="fas fa-map-pin input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Locality *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="locality" required>
                                    <i class="fas fa-map-marker-alt input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Area *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="area" required>
                                    <i class="fas fa-location-arrow input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">District *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="district" required>
                                    <i class="fas fa-city input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">State *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="state" required>
                                    <i class="fas fa-flag input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Country *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="country" value="India" required>
                                    <i class="fas fa-globe input-icon"></i>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Landmark</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="landmark">
                                    <i class="fas fa-landmark input-icon"></i>
                                </div>
                            </div>
                            <div class="col-12">
                                <label class="form-label">Address Type *</label>
                                <div class="d-flex gap-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="addressType" id="home" value="home" checked>
                                        <label class="form-check-label" for="home">
                                            <i class="fas fa-home me-1"></i>Home
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="addressType" id="work" value="work">
                                        <label class="form-check-label" for="work">
                                            <i class="fas fa-building me-1"></i>Work
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="addressType" id="other" value="other">
                                        <label class="form-check-label" for="other">
                                            <i class="fas fa-map-pin me-1"></i>Other
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isDefault" name="isDefault">
                                    <label class="form-check-label" for="isDefault">
                                        Make this my default address
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveAddress">
                        <i class="fas fa-save me-2"></i>Save Address
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Insufficient Balance Modal -->
    <div class="modal fade" id="insufficientBalanceModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title text-danger">
                        <i class="fas fa-exclamation-circle me-2"></i>Insufficient Balance
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center py-4">
                    <p class="mb-0">Your wallet balance is insufficient to complete this order.</p>
                    <p class="text-muted mt-2">Please add money to your wallet or choose another payment method.</p>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <a href="/account/wallet" class="btn btn-primary">Go to Wallet</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Coupon Selection Modal -->
    <div class="modal fade" id="couponModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-ticket-alt me-2"></i>Select Coupon
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- Coupon Filter Tabs -->
                    <ul class="nav nav-pills mb-3" id="coupon-tabs">
                        <li class="nav-item">
                            <button class="nav-link active" data-filter="all">All Coupons</button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" data-filter="available">Available</button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" data-filter="expired">Expired</button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" data-filter="upcoming">Upcoming</button>
                        </li>
                    </ul>
                    
                    <!-- Coupon List -->
                    <div id="coupon-list" class="row g-3">
                        <!-- Coupons will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Coupon Confirmation Modal -->
    <div class="modal fade" id="couponConfirmModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title text-info">
                        <i class="fas fa-info-circle me-2"></i>Coupon Policy
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Important information about coupon usage:</strong></p>
                    <ul class="text-muted">
                        <li>You can cancel or return individual items/order from this order</li>
                        <li>If cancellation/return breaks the minimum purchase requirement, the coupon will be restored to your account</li>
                        <li><strong class="text-warning">When coupon eligibility is broken, you will receive a refund with the discount amount deducted (not the full discounted price you paid)</strong></li>
                        <li>The remaining active items will also lose their discount benefit once eligibility is broken</li>
                        <li>If the remaining items still meet the coupon requirements, you'll keep the full discount benefit and receive the full refund amount</li>
                    </ul>
                    <p class="mb-0 fw-semibold text-dark">Do you want to proceed with this coupon?</p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirm-coupon-btn">Apply Coupon</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Retry Modal -->
    <div class="modal fade" id="paymentRetryModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title text-warning">
                        <i class="fas fa-exclamation-circle me-2"></i>Payment Incomplete
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center py-4">
                    <p>Your order has been created but payment was not completed.</p>
                    <p class="text-muted mb-0">You can retry the payment now or view order details to pay later.</p>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" class="btn btn-outline-primary" id="view-pending-order-btn">
                        <i class="fas fa-eye me-2"></i>View Details
                    </button>
                    <button type="button" class="btn btn-primary" id="retry-payment-btn">
                        <i class="fas fa-redo me-2"></i>Retry Payment
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
        <div id="toast" class="toast align-items-center border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body d-flex align-items-center">
                    <i class="toast-icon me-2"></i>
                    <span class="toast-message"></span>
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        // Application State
        let selectedAddress = null;
        let selectedPayment = 'cod';
        let addresses = <%- JSON.stringify(addresses || []) %>;
        let cart = <%- JSON.stringify(cart || {}) %>;
        const isCODAllowed = <%= isCODAllowed || false %>;
        const COD_MAX_AMOUNT = <%= COD_MAX_AMOUNT || 5000 %>;

        // DOM Elements
        const addressSelection = document.getElementById('address-selection');
        const selectedAddressDisplay = document.getElementById('selected-address-display');
        const selectedAddressDetails = document.getElementById('selected-address-details');
        const paymentSection = document.getElementById('payment-section');
        const orderItemsSection = document.getElementById('order-items-section');
        const placeOrderBtn = document.getElementById('place-order-btn');
        const btnText = document.getElementById('btn-text');
        const loadingSpinner = document.getElementById('loading-spinner');
        const checkoutContent = document.getElementById('checkout-content');
        const processingContent = document.getElementById('processing-content');
        const successContent = document.getElementById('success-content');
        const deliveryFee = document.getElementById('delivery-fee');
        const totalAmount = document.getElementById('total-amount');
        const addressModal = new bootstrap.Modal(document.getElementById('addressModal'));
        const addressForm = document.getElementById('addressForm');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeEventListeners();
            updateStepIndicator(2);
            applyAnimations();

            console.log('✅ Event listeners initialized');
            console.log('Select coupon button exists:', document.getElementById('select-coupon-btn') !== null);
            console.log('Apply coupon button exists:', document.getElementById('apply-coupon-code-btn') !== null);
        });

        function initializeEventListeners() {
            // Address selection
            document.addEventListener('click', function(e) {
                if (e.target.closest('.deliver-here-btn')) {
                    const addressCard = e.target.closest('.address-card');
                    const addressId = addressCard.dataset.addressId; // Remove parseInt since we're using ObjectId
                    selectAddress(addressId);
                }

                if (e.target.closest('.change-address-btn')) {
                    showAddressSelection();
                }

                if (e.target.closest('.edit-address')) {
                    e.preventDefault();
                    e.stopPropagation(); // Prevent dropdown from interfering
                    
                    const addressId = e.target.closest('.edit-address').dataset.addressId;
                    editAddress(addressId);
                }

                if (e.target.closest('.delete-address')) {
                    e.preventDefault();
                    const addressId = parseInt(e.target.dataset.addressId);
                    deleteAddress(addressId);
                }
            });

            // Payment selection
            document.addEventListener('click', function(e) {
                if (e.target.closest('.payment-option')) {
                    const paymentOption = e.target.closest('.payment-option');
                    const paymentType = paymentOption.dataset.payment;
                    selectPayment(paymentType);
                }
            });

            // Payment radio buttons
            document.addEventListener('change', function(e) {
                if (e.target.name === 'payment') {
                    selectPayment(e.target.value);
                }
            });

            // Place order
            placeOrderBtn.addEventListener('click', placeOrder);

            // Address form
            document.getElementById('saveAddress').addEventListener('click', saveAddress);


            document.getElementById('continue-shopping').addEventListener('click', () => {
                window.location.href = '/products/shop';
            });

            // Address modal reset
            document.getElementById('addressModal').addEventListener('hidden.bs.modal', function() {
                resetAddressForm();
            });
        }

        function selectAddress(addressId) {
            selectedAddress = addresses.find(addr => addr._id === addressId);
            
            if (selectedAddress) {
                showSelectedAddress();
                showPaymentSection();
                updatePlaceOrderButton();
                updateStepIndicator(3);
            }
        }

        function showSelectedAddress() {
            // Hide address selection
            addressSelection.style.display = 'none';
            
            // Show selected address
            selectedAddressDisplay.style.display = 'block';
            
            // Update selected address details
            const addressHtml = `
                <div class="d-flex align-items-center gap-2 mb-2">
                    <strong>${selectedAddress.fullName}</strong>
                    <span class="address-type-badge badge-${selectedAddress.addressType}">${selectedAddress.addressType.toUpperCase()}</span>
                    ${selectedAddress.isDefault ? '<span class="badge bg-primary">DEFAULT</span>' : ''}
                </div>
                <div class="text-muted mb-2">
                    <i class="fas fa-phone me-2"></i>${selectedAddress.phoneOne}
                </div>
                <div class="address-text">
                    ${formatAddress(selectedAddress)}
                </div>
            `;
            selectedAddressDetails.innerHTML = addressHtml;
        }

        function showAddressSelection() {
            selectedAddressDisplay.style.display = 'none';
            addressSelection.style.display = 'block';
            paymentSection.style.display = 'none';
            orderItemsSection.style.display = 'none';
            selectedAddress = null;
            updatePlaceOrderButton();
            updateStepIndicator(2);
        }

        function showPaymentSection() {
            paymentSection.style.display = 'block';
            paymentSection.classList.add('fade-in-up');
            
            // Show order items section after payment
            setTimeout(() => {
                orderItemsSection.style.display = 'block';
                orderItemsSection.classList.add('fade-in-up');
            }, 300);
        }

        function selectPayment(paymentType) {
            // Dynamically check if COD is allowed based on current total (including coupon)
            if (paymentType === 'cod') {
                const subtotal = cart.totalAmount || 0;
                const fee = subtotal < 300 ? 50 : 0;
                const discount = appliedCoupon ? appliedCoupon.discountValue : 0;
                const finalTotal = subtotal + fee - discount;
                
                if (finalTotal > COD_MAX_AMOUNT) {
                    showToast(`Cash on Delivery is not available for orders above ₹${COD_MAX_AMOUNT}`, 'warning');
                    return;
                }
            }
            
            selectedPayment = paymentType;
            
            // Update UI
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });
            
            document.querySelector(`[data-payment="${paymentType}"]`).classList.add('selected');
            
            // Update radio button
            document.querySelector(`input[value="${paymentType}"]`).checked = true;
            
            updatePlaceOrderButton();
        }

        function updateDeliveryFee() {
            const subtotal = cart.totalAmount || 0;
            const fee = subtotal < 300 ? 50 : 0;
            deliveryFee.textContent = `₹${fee}`;
            
            const total = subtotal + fee;
            totalAmount.textContent = `₹${total}`;
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toastEl = document.getElementById('toast');
            const toastBody = toastEl.querySelector('.toast-message');
            const toastIcon = toastEl.querySelector('.toast-icon');
            
            // Remove previous type classes
            toastEl.classList.remove('success', 'error', 'warning', 'info');
            
            // Set message
            toastBody.textContent = message;
            
            // Set icon based on type
            let icon = 'fa-info-circle';
            if (type === 'success') {
                icon = 'fa-check-circle';
                toastEl.classList.add('success');
            } else if (type === 'error') {
                icon = 'fa-exclamation-circle';
                toastEl.classList.add('error');
            } else if (type === 'warning') {
                icon = 'fa-exclamation-triangle';
                toastEl.classList.add('warning');
            } else {
                toastEl.classList.add('info');
            }
            
            toastIcon.className = `toast-icon fas ${icon} me-2`;
            
            // Show toast
            const toast = new bootstrap.Toast(toastEl, {
                autohide: true,
                delay: 3000
            });
            toast.show();
        }

        function updatePlaceOrderButton() {
            if (selectedAddress && selectedPayment) {
                placeOrderBtn.disabled = false;
                placeOrderBtn.classList.remove('btn-secondary');
                placeOrderBtn.classList.add('btn-warning');
                btnText.textContent = 'PLACE ORDER';
            } else if (selectedAddress && !selectedPayment) {
                placeOrderBtn.disabled = false;
                placeOrderBtn.classList.remove('btn-secondary');
                placeOrderBtn.classList.add('btn-warning');
                btnText.textContent = 'SELECT PAYMENT METHOD';
            } else {
                placeOrderBtn.disabled = true;
                placeOrderBtn.classList.add('btn-secondary');
                placeOrderBtn.classList.remove('btn-warning');
                btnText.textContent = 'SELECT ADDRESS TO CONTINUE';
            }
        }

        async function placeOrder() {
            if (!selectedAddress || !selectedPayment || !cart.items || cart.items.length === 0) return;

            // Validate COD eligibility with coupon discount before sending request
            if (selectedPayment === 'cod') {
                const subtotal = cart.totalAmount || 0;
                const fee = subtotal < 300 ? 50 : 0;
                const discount = appliedCoupon ? appliedCoupon.discountValue : 0;
                const finalTotal = subtotal + fee - discount;
                
                if (finalTotal > COD_MAX_AMOUNT) {
                    showToast(`Cash on Delivery is not available for orders above ₹${COD_MAX_AMOUNT}`, 'warning');
                    loadingSpinner.style.display = 'none';
                    btnText.textContent = 'PLACE ORDER';
                    placeOrderBtn.disabled = false;
                    return;
                }
            }
            
             // Check wallet balance if wallet payment is selected
            if (selectedPayment === 'wallet') {
                const subtotal = cart.totalAmount || 0;
                const fee = subtotal < 300 ? 50 : 0;
                const totalAmount = subtotal + fee - (appliedCoupon ? appliedCoupon.discountValue : 0);
                
                if (walletBalance < totalAmount) {
                    insufficientBalanceModal.show();
                    return;
                }
            }

            // Show loading state
            loadingSpinner.style.display = 'inline-block';
            btnText.textContent = 'PROCESSING...';
            placeOrderBtn.disabled = true;
            
            try {
                const subtotal = cart.totalAmount || 0;
                const fee = subtotal < 300 ? 50 : 0;
                const discount = appliedCoupon ? appliedCoupon.discountValue : 0;
                const totalAmount = Math.round(subtotal + fee - discount); // Ensure it's an integer
                
                const orderData = {
                    addressId: selectedAddress._id,
                    paymentMethod: selectedPayment,
                    orderedItems: cart.items.map(item => ({
                        productId: item.productId._id,
                        variantId: item.variantId,
                        quantity: item.quantity
                    })),
                    couponId: appliedCoupon ? appliedCoupon._id : null
                };
                
                // If COD or Wallet, process directly
                if (selectedPayment === 'cod' || selectedPayment === 'wallet') {
                    await processOrder(orderData);
                } else {
                    // For online payments, create Razorpay order first
                    const razorpayResponse = await fetch('/order/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ amount: totalAmount })
                    });
                    
                    const razorpayData = await razorpayResponse.json();
                    
                    if (!razorpayData.success) {
                        throw new Error(razorpayData.message || 'Error creating payment order');
                    }
                    
                    // Initialize Razorpay payment
                    const options = {
                        key: razorpayData.key_id,
                        amount: razorpayData.order.amount,
                        currency: razorpayData.order.currency,
                        name: "CareZon", 
                        description: "Order Payment",
                        order_id: razorpayData.order.id,
                        handler: async function (response) {
                            // Payment successful
                            orderData.razorpay_order_id = response.razorpay_order_id;
                            orderData.razorpay_payment_id = response.razorpay_payment_id;
                            orderData.razorpay_signature = response.razorpay_signature;
                            orderData.paymentStatus = 'completed';
                            
                            await processOrder(orderData);
                        },
                        prefill: {
                            name: selectedAddress.fullName,
                            contact: selectedAddress.phoneOne
                        },
                        theme: {
                            color: "#4f46e5"
                        },
                        modal: {
                            ondismiss: function() {
                                // Payment cancelled - show retry option
                                showPaymentRetryModal();
                            }
                        }
                    };
                    
                    // CREATE RAZORPAY INSTANCE HERE
                    const rzp = new Razorpay(options);
                    
                    rzp.on('payment.failed', async function (response){
                        // Payment failed - create pending order only once
                        if (!pendingOrderId) {  // Check if pending order already created
                            orderData.paymentStatus = 'failed';
                            orderData.paymentFailureReason = response.error.description;
                            
                            await processFailedPaymentOrder(orderData);
                        } else {
                            // If pending order already exists, just show retry modal
                            showPaymentRetryModal();
                        }
                    });
                    
                    // Open Razorpay payment modal
                    rzp.open();
                    
                    // Reset button for Razorpay modal
                    loadingSpinner.style.display = 'none';
                    btnText.textContent = 'PLACE ORDER';
                    placeOrderBtn.disabled = false;
                }
                
            } catch (error) {
                console.error('Error placing order:', error);
                showPaymentFailurePage(error.message || 'Error placing order');
                
                // Reset loading state
                loadingSpinner.style.display = 'none';
                btnText.textContent = 'PLACE ORDER';
                placeOrderBtn.disabled = false;
            }
        }

        // this NEW helper function
        async function processOrder(orderData) {
            try {
                showProcessingPage();
                
                const response = await fetch('/order/place', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(orderData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    setTimeout(() => {
                        showSuccessPage(data.orderId);
                    }, 2000);
                } else {
                    throw new Error(data.message || 'Error placing order');
                }
            } catch (error) {
                showPaymentFailurePage(error.message);
            }
        }

        let walletBalance = 0;
        const insufficientBalanceModal = new bootstrap.Modal(document.getElementById('insufficientBalanceModal'));

        // Fetch wallet balance
        async function fetchWalletBalance() {
            try {
                const response = await fetch('/account/wallet/balance');
                const data = await response.json();
                if (data.success) {
                    walletBalance = data.balance;
                    document.getElementById('wallet-balance').textContent = `Balance: ₹${walletBalance}`;
                }
            } catch (error) {
                console.error('Error fetching wallet balance:', error);
            }
        }

        // Call on page load
        fetchWalletBalance();

        function showProcessingPage() {
            checkoutContent.style.display = 'none';
            successContent.style.display = 'none'; // Ensure success content is hidden
            processingContent.style.display = 'block';
            processingContent.classList.add('fade-in-up');
        }

        function showSuccessPage(orderId) {
            processingContent.style.display = 'none';
            checkoutContent.style.display = 'none';
            successContent.style.display = 'block';
            successContent.classList.add('fade-in-up');
            updateStepIndicator(4);

            // Update the view order details button with correct URL
            if (orderId) {
                document.getElementById('view-order-details').onclick = function() {
                    window.location.href = `/account/orders/details/${orderId}`;
                };
            } else {
                // Fallback
                document.getElementById('view-order-details').onclick = function() {
                    window.location.href = '/account/orders';
                };
            }
            
            // Reset loading state
            loadingSpinner.style.display = 'none';
            btnText.textContent = 'PLACE ORDER';
            placeOrderBtn.disabled = false;
        }

        function editAddress(addressId) {
            const address = addresses.find(addr => addr._id === addressId);
            if (!address) return;
            
            // Populate form fields
            document.getElementById('fullName').value = address.fullName;
            document.getElementById('phoneOne').value = address.phoneOne;
            document.getElementById('phoneTwo').value = address.phoneTwo || '';
            document.getElementById('pin').value = address.pin;
            document.getElementById('locality').value = address.locality;
            document.getElementById('area').value = address.area;
            document.getElementById('district').value = address.district;
            document.getElementById('state').value = address.state;
            document.getElementById('country').value = address.country;
            document.getElementById('landmark').value = address.landmark || '';
            
            // Set address type radio button
            const addressTypeRadio = document.querySelector(`input[name="addressType"][value="${address.addressType}"]`);
            if (addressTypeRadio) {
                addressTypeRadio.checked = true;
            }
            
            document.getElementById('isDefault').checked = address.isDefault;
            
            // Update modal title
            document.getElementById('modal-title').textContent = 'Edit Address';
            
            // Store editing address ID
            addressForm.dataset.editingId = addressId;
            
            // Force show modal
            const modalElement = document.getElementById('addressModal');
            const modal = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
            modal.show();
        }

        function deleteAddress(addressId) {
            if (confirm('Are you sure you want to delete this address?')) {
                fetch(`/account/address/delete/${addressId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        showToast(data.message || 'Error deleting address', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error deleting address', 'error');
                });
            }
        }

        function saveAddress() {
            const addressData = {
                fullName: document.getElementById('fullName').value,
                phoneOne: document.getElementById('phoneOne').value,
                phoneTwo: document.getElementById('phoneTwo').value || null,
                pin: document.getElementById('pin').value,
                locality: document.getElementById('locality').value,
                area: document.getElementById('area').value,
                district: document.getElementById('district').value,
                state: document.getElementById('state').value,
                country: document.getElementById('country').value,
                landmark: document.getElementById('landmark').value || null,
                addressType: document.querySelector('input[name="addressType"]:checked').value,
                isDefault: document.getElementById('isDefault').checked
            };
            
            // Validate required fields
            const requiredFields = ['fullName', 'phoneOne', 'pin', 'locality', 'area', 'district', 'state', 'country'];
            for (let field of requiredFields) {
                if (!addressData[field]) {
                    showToast(`Please fill in the ${field.replace(/([A-Z])/g, ' $1').toLowerCase()}`, 'error');
                    return;
                }
            }
            
            const editingId = addressForm.dataset.editingId;
            const url = editingId ? `/account/address/edit/${editingId}` : '/account/address/add';
            const method = editingId ? 'PUT' : 'POST';
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(addressData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reload the page to reflect changes
                    window.location.reload();
                } else {
                    showToast(data.message || 'Error saving address', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error saving address', 'error');
            });
        }

        function resetAddressForm() {
            addressForm.reset();
            document.getElementById('country').value = 'India';
            document.getElementById('home').checked = true;
            document.getElementById('modal-title').textContent = 'Add New Address';
            delete addressForm.dataset.editingId;
        }

        function renderAddresses() {
            const addressCardsHtml = addresses.map(address => `
                <div class="address-card card mb-3" data-address-id="${address.id}">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <strong>${address.fullName}</strong>
                                    <span class="address-type-badge badge-${address.addressType}">${address.addressType.toUpperCase()}</span>
                                    ${address.isDefault ? '<span class="badge bg-primary">DEFAULT</span>' : ''}
                                </div>
                                <div class="text-muted mb-2">
                                    <i class="fas fa-phone me-2"></i>${address.phoneOne}
                                </div>
                                <div class="address-text">
                                    ${formatAddress(address)}
                                </div>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-link text-muted p-0" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item edit-address" href="#" data-address-id="${address.id}"><i class="fas fa-edit me-2"></i>Edit</a></li>
                                    <li><a class="dropdown-item delete-address" href="#" data-address-id="${address.id}"><i class="fas fa-trash me-2"></i>Delete</a></li>
                                </ul>
                            </div>
                        </div>
                        <button class="btn btn-outline-primary btn-sm mt-2 deliver-here-btn">
                            <i class="fas fa-truck me-2"></i>DELIVER HERE
                        </button>
                    </div>
                </div>
            `).join('');
            
            const addNewAddressBtn = `
                <div class="text-center">
                    <button class="btn btn-link text-primary fw-bold" data-bs-toggle="modal" data-bs-target="#addressModal">
                        <i class="fas fa-plus me-2"></i>Add a new address
                    </button>
                </div>
            `;
            
            addressSelection.innerHTML = addressCardsHtml + addNewAddressBtn;
        }

        function formatAddress(address) {
            const parts = [
                address.area,
                address.locality,
                address.landmark,
                address.district,
                address.state,
                address.pin
            ].filter(Boolean);
            
            return parts.join(', ');
        }

        function updateStepIndicator(currentStep) {
            document.querySelectorAll('.step').forEach((step, index) => {
                const stepNumber = index + 1;
                step.classList.remove('active', 'completed');
                
                if (stepNumber < currentStep) {
                    step.classList.add('completed');
                } else if (stepNumber === currentStep) {
                    step.classList.add('active');
                }
            });
        }

        function applyAnimations() {
            const elements = document.querySelectorAll('.fade-in-up');
            elements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.opacity = '1';
                    el.style.transform = 'translateY(0)';
                }, index * 150);
            });
        }

        let appliedCoupon = null;
        // Initialize payment method - select COD only if allowed
        if (isCODAllowed) {
            selectPayment('cod');
        } else {
            // Don't pre-select any payment method if COD is not allowed
            selectedPayment = null;
            updatePlaceOrderButton();
        }

        // Initialize delivery fee calculation
        updateDeliveryFee();

        // Initial COD eligibility check
        checkCODEligibility();

        function showPaymentFailurePage(message) {
            processingContent.style.display = 'none';
            checkoutContent.style.display = 'none';
            successContent.style.display = 'none';
            
            const failureContent = document.getElementById('failure-content');
            failureContent.style.display = 'block';
            failureContent.classList.add('fade-in-up');
            
            document.getElementById('failure-message').textContent = message || 'Payment failed. Please try again.';
            
            // Add retry handler
            document.getElementById('retry-payment').onclick = function() {
                window.location.reload();
            };
        }

       const couponModal = new bootstrap.Modal(document.getElementById('couponModal'));

        // Event listeners for coupon buttons
        document.addEventListener('click', function(e) {
            const target = e.target.closest('button');
            if (!target) return;
            
            // Handle select-coupon-btn click
            if (target.id === 'select-coupon-btn') {
                e.preventDefault();
                e.stopPropagation();
                loadCoupons();
                return;
            }
            
            // Handle remove-coupon-btn-alt click
            if (target.id === 'remove-coupon-btn-alt') {
                e.preventDefault();
                e.stopPropagation();
                removeCoupon();
                return;
            }
            
            // Handle apply-coupon-code-btn click
            if (target.id === 'apply-coupon-code-btn') {
                e.preventDefault();
                e.stopPropagation();
                applyCouponCode();
                return;
            }
            
            // Handle remove-coupon-btn click
            if (target.id === 'remove-coupon-btn') {
                e.preventDefault();
                e.stopPropagation();
                removeCoupon();
                return;
            }
        });


        // Coupon filter tabs
        document.querySelectorAll('#coupon-tabs .nav-link').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('#coupon-tabs .nav-link').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                const filter = this.dataset.filter;
                renderCoupons(allCoupons, filter); // Use stored coupons
            });
        });

        let allCoupons = []; 

        async function loadCoupons() {
            console.log('🎯 loadCoupons() function called!');
            try {
                const subtotal = cart.totalAmount || 0;
                const response = await fetch(`/cart/coupons?orderAmount=${subtotal}`);
                const data = await response.json();
                
                if (data.success) {
                    allCoupons = data.coupons; // Store globally
                    renderCoupons(allCoupons, 'all');
                    couponModal.show();
                }
            } catch (error) {
                console.error('Error loading coupons:', error);
            }
        }

        function renderCoupons(coupons, filter = 'all') {
            const couponList = document.getElementById('coupon-list');
            const subtotal = cart.totalAmount || 0;
            
            let filteredCoupons = coupons;
            if (filter === 'available') {
                filteredCoupons = coupons.filter(c => c.canUse && c.minPurchaseValue <= subtotal);
            } else if (filter === 'expired') {
                filteredCoupons = coupons.filter(c => c.status === 'expired');
            } else if (filter === 'upcoming') {
                filteredCoupons = coupons.filter(c => c.status === 'upcoming');
            }
            
            if (filteredCoupons.length === 0) {
                couponList.innerHTML = '<div class="col-12 text-center py-4"><p class="text-muted">No coupons available in this category</p></div>';
                return;
            }
            
            couponList.innerHTML = filteredCoupons.map(coupon => {
                const isAvailable = coupon.canUse && coupon.minPurchaseValue <= subtotal;
                let statusBadge = '';
                let statusClass = '';
                
                if (coupon.status === 'expired') {
                    statusBadge = '<span class="badge bg-danger">Expired</span>';
                    statusClass = 'disabled';
                } else if (coupon.status === 'upcoming') {
                    statusBadge = '<span class="badge bg-warning">Upcoming</span>';
                    statusClass = 'disabled';
                } else if (coupon.usageCount >= coupon.limit) {
                    statusBadge = '<span class="badge bg-secondary">Limit Reached</span>';
                    statusClass = 'disabled';
                } else if (!isAvailable) {
                    statusBadge = '<span class="badge bg-secondary">Not Eligible</span>';
                    statusClass = 'disabled';
                }
                
                return `
                    <div class="col-12">
                        <div class="coupon-card ${statusClass}" 
                            data-coupon='${JSON.stringify(coupon)}' 
                            ${isAvailable ? `onclick="selectCoupon(this)"` : ''}>
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <div class="coupon-code mb-2">${coupon.code}</div>
                                    <p class="mb-1">${coupon.description}</p>
                                    <small class="text-muted">
                                        Save ₹${coupon.discountValue} • Min purchase: ₹${coupon.minPurchaseValue}
                                        ${coupon.usageCount > 0 ? ` • Used: ${coupon.usageCount}/${coupon.limit}` : ''}
                                    </small>
                                </div>
                                ${isAvailable ? '<i class="fas fa-chevron-right text-primary"></i>' : statusBadge}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function filterCoupons(filter) {
            // This will be called when filter tabs are clicked
            // Re-fetch or re-render with filter
            loadCoupons(); // You'll need to modify this to pass filter
        }

        function selectCoupon(element) {
            const coupon = JSON.parse(element.dataset.coupon);
            showCouponConfirmation(coupon);
        }

        async function applyCouponCode() {
            const code = document.getElementById('coupon-code-input').value.trim();
            if (!code) return;
            
            try {
                const subtotal = cart.totalAmount || 0;
                const response = await fetch('/cart/apply-coupon', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({ code, orderAmount: subtotal })
                });
                
                const data = await response.json();
                if (data.success) {
                    showCouponConfirmation(data.coupon);
                } else {
        
                    showToast(data.message || 'Invalid coupon code', 'error');
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                showToast('Error applying coupon', 'error');
            }
        }

        const couponConfirmModal = new bootstrap.Modal(document.getElementById('couponConfirmModal'));
        let pendingCoupon = null;

        function showCouponConfirmation(coupon) {
            pendingCoupon = coupon;

            // Wait for the first modal to finish hiding before showing the next
            const modalElement = document.getElementById('couponModal');
            modalElement.addEventListener('hidden.bs.modal', function handler() {
                couponConfirmModal.show();
                modalElement.removeEventListener('hidden.bs.modal', handler);
            });

            couponModal.hide();
        }


        document.getElementById('confirm-coupon-btn').addEventListener('click', function() {
            if (pendingCoupon) {
                applyCoupon(pendingCoupon);
                couponConfirmModal.hide();
            }
        });

        function applyCoupon(coupon) {
            appliedCoupon = coupon;
            
            // Update UI
            document.getElementById('coupon-code-input').value = coupon.code;
            document.getElementById('applied-coupon-code').textContent = coupon.code;
            document.getElementById('applied-coupon-desc').textContent = `Saved ₹${coupon.discountValue}`;
            document.getElementById('applied-coupon-display').style.display = 'block';
            document.getElementById('select-coupon-btn').innerHTML = '<i class="fas fa-times me-1"></i>Remove Coupon';
            document.getElementById('select-coupon-btn').id = 'remove-coupon-btn-alt';
            
            // Show discount row
            document.getElementById('discount-row').style.display = 'flex';
            document.getElementById('discount-amount').textContent = `-₹${coupon.discountValue}`;
            
            // Update total and check COD eligibility
            updateOrderTotal();
            checkCODEligibility();
        }

        function removeCoupon() {
            console.log('🗑️ removeCoupon() function called!');
            appliedCoupon = null;
            document.getElementById('coupon-code-input').value = '';
            document.getElementById('applied-coupon-display').style.display = 'none';
            document.getElementById('discount-row').style.display = 'none';
            
            const btn = document.getElementById('remove-coupon-btn-alt');
            if (btn) {
                btn.innerHTML = '<i class="fas fa-ticket-alt me-1"></i>View Available Coupons';
                btn.id = 'select-coupon-btn';
                // No need to re-attach listener, event delegation handles it
            }
            updateOrderTotal();
            checkCODEligibility();
        }

        function updateOrderTotal() {
            const subtotal = cart.totalAmount || 0;
            const fee = subtotal < 300 ? 50 : 0;
            const discount = appliedCoupon ? appliedCoupon.discountValue : 0;
            const total = subtotal + fee - discount;
            
            totalAmount.textContent = `₹${total}`;
        }

        function checkCODEligibility() {
            const subtotal = cart.totalAmount || 0;
            const fee = subtotal < 300 ? 50 : 0;
            const discount = appliedCoupon ? appliedCoupon.discountValue : 0;
            const total = subtotal + fee - discount;
            
            // DEBUG LOGS
            console.log('=== COD ELIGIBILITY CHECK ===');
            console.log('Subtotal:', subtotal);
            console.log('Delivery Fee:', fee);
            console.log('Applied Coupon:', appliedCoupon);
            console.log('Discount:', discount);
            console.log('Final Total:', total);
            console.log('COD_MAX_AMOUNT:', COD_MAX_AMOUNT);
            console.log('Is COD Allowed?:', total <= COD_MAX_AMOUNT);
            console.log('==============================');
            
            // Check if COD should be disabled/enabled based on final total (including coupon discount)
            const codAllowed = total <= COD_MAX_AMOUNT;
            const codOption = document.querySelector('[data-payment="cod"]');
            const codRadio = document.querySelector('input[value="cod"]');
            const codWarning = codOption.querySelector('.mt-2');
            
            // Store previous state to detect changes
            const wasCODAllowed = !codOption.classList.contains('disabled');
            
            console.log('Was COD Allowed Before?:', wasCODAllowed);
            console.log('COD Allowed Now?:', codAllowed);
            
            if (codAllowed) {
                codOption.classList.remove('disabled');
                codRadio.disabled = false;
                if (codWarning) {
                    codWarning.innerHTML = '';
                }
                
                // Only show toast if COD wasn't available before and became available now
                if (!wasCODAllowed && appliedCoupon) {
                    console.log('✅ Showing success toast - COD now available');
                    showToast('Cash on Delivery is now available!', 'success');
                }
            } else {
                codOption.classList.add('disabled');
                codRadio.disabled = true;
                if (codWarning) {
                    codWarning.innerHTML = `<small class="text-danger">Not available for orders above ₹${COD_MAX_AMOUNT}</small>`;
                }
                
                // If COD was selected, deselect it
                if (selectedPayment === 'cod') {
                    console.log('⚠️ Showing warning toast - COD was selected but now not available');
                    selectedPayment = null;
                    codRadio.checked = false;
                    document.querySelectorAll('.payment-option').forEach(option => {
                        option.classList.remove('selected');
                    });
                    updatePlaceOrderButton();
                    showToast(`Cash on Delivery is not available for orders above ₹${COD_MAX_AMOUNT}. Please select another payment method.`, 'warning');
                }
            }
        }

        const paymentRetryModal = new bootstrap.Modal(document.getElementById('paymentRetryModal'));

        function showPaymentRetryModal() {
            loadingSpinner.style.display = 'none';
            btnText.textContent = 'PLACE ORDER';
            placeOrderBtn.disabled = false;
            paymentRetryModal.show();
        }

        let pendingOrderId = null; 

        document.getElementById('retry-payment-btn').addEventListener('click', async function() {
            if (!pendingOrderId) {
                showToast('Order ID not found', 'warning');
                return;
            }
            
            paymentRetryModal.hide();
            
            // Show loading
            loadingSpinner.style.display = 'inline-block';
            btnText.textContent = 'PROCESSING...';
            placeOrderBtn.disabled = true;
            
            try {
                const subtotal = cart.totalAmount || 0;
                const fee = subtotal < 300 ? 50 : 0;
                const discount = appliedCoupon ? appliedCoupon.discountValue : 0;
                const totalAmount = Math.round(subtotal + fee - discount); // Ensure it's an integer
                
                // For COD or Wallet, directly retry
                if (selectedPayment === 'cod' || selectedPayment === 'wallet') {
                    await retryOrderPayment(pendingOrderId);
                } else {
                    // For online payments, create new Razorpay order
                    const razorpayResponse = await fetch('/order/create-razorpay-order', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ amount: totalAmount })
                    });
                    
                    const razorpayData = await razorpayResponse.json();
                    
                    if (!razorpayData.success) {
                        throw new Error(razorpayData.message || 'Error creating payment order');
                    }
                    
                    // Initialize Razorpay payment
                    const options = {
                        key: razorpayData.key_id,
                        amount: razorpayData.order.amount,
                        currency: razorpayData.order.currency,
                        name: "Your Store Name",
                        description: "Retry Order Payment",
                        order_id: razorpayData.order.id,
                        handler: async function (response) {
                            await retryOrderPayment(pendingOrderId, response);
                        },
                        prefill: {
                            name: selectedAddress.fullName,
                            contact: selectedAddress.phoneOne
                        },
                        theme: {
                            color: "#4f46e5"
                        },
                        modal: {
                            ondismiss: function() {
                                loadingSpinner.style.display = 'none';
                                btnText.textContent = 'PLACE ORDER';
                                placeOrderBtn.disabled = false;
                            }
                        }
                    };
                    
                    const rzp = new Razorpay(options);
                    
                    rzp.on('payment.failed', function (response){
                        showToast('Payment failed: ' + response.error.description, 'error');
                        loadingSpinner.style.display = 'none';
                        btnText.textContent = 'PLACE ORDER';
                        placeOrderBtn.disabled = false;
                    });
                    
                    rzp.open();
                    
                    // Reset button
                    loadingSpinner.style.display = 'none';
                    btnText.textContent = 'PLACE ORDER';
                    placeOrderBtn.disabled = false;
                }
                
            } catch (error) {
                console.error('Error retrying payment:', error);
                showToast(error.message || 'Error processing payment', 'error');
                loadingSpinner.style.display = 'none';
                btnText.textContent = 'PLACE ORDER';
                placeOrderBtn.disabled = false;
            }
        });

        document.getElementById('view-pending-order-btn').addEventListener('click', function() {
            if (pendingOrderId) {
                window.location.href = `/account/orders/details/${pendingOrderId}`;
            } else {
                // Fallback to orders list if orderId not available
                window.location.href = '/account/orders';
            }
        });


            async function processFailedPaymentOrder(orderData) {
                try {
                    // Add coupon info if applied
                    if (appliedCoupon) {
                        orderData.couponId = appliedCoupon._id;
                    }
                    
                    const response = await fetch('/order/place-failed', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(orderData)
                    });
                    
                    const data = await response.json();
                    if (data.success) {
                        pendingOrderId = data.orderId; // Store the orderId
                        showPaymentRetryModal();
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showPaymentRetryModal();
                }
            }

        async function retryOrderPayment(orderId, razorpayResponse = null) {
            try {
                showProcessingPage();
                
                const retryData = {
                    orderId: orderId
                };
                
                // Add Razorpay details for online payments
                if (razorpayResponse) {
                    retryData.razorpay_order_id = razorpayResponse.razorpay_order_id;
                    retryData.razorpay_payment_id = razorpayResponse.razorpay_payment_id;
                    retryData.razorpay_signature = razorpayResponse.razorpay_signature;
                }
                
                const response = await fetch('/order/retry-payment', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(retryData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    setTimeout(() => {
                        showSuccessPage(orderId);
                    }, 2000);
                } else {
                    
                    showToast(data.message || 'Error processing payment', 'error');
                    throw new Error(data.message);
                }
            } catch (error) {
                showPaymentFailurePage(error.message);
            }
        }
    </script>
</body>
</html>