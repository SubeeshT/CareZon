<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medical Product Details - MedStore</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/user/css/headerAndFooter.css">
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --light-bg: #f8f9fa;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
        }

        .breadcrumb {
            background: transparent;
            padding: 0.5rem 0;
            margin-bottom: 1rem;
        }

        .breadcrumb-item a {
            color: var(--secondary-color);
            text-decoration: none;
        }

        .breadcrumb-item.active {
            color: #6c757d;
        }

        .product-gallery {
            position: sticky;
            top: 20px;
            z-index: 1;
        }

        .main-image {
            width: 100%;
            height: 400px;
            object-fit: contain;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            cursor: zoom-in;
            transition: transform 0.3s ease;
        }

        .main-image:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transform: scale(1.02);
        }

        .thumbnail-container {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: contain;
            border: 2px solid #e9ecef;
            border-radius: 5px;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        .thumbnail:hover, .thumbnail.active {
            border-color: var(--secondary-color);
            box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
        }

        .zoom-container {
            position: relative;
            overflow: visible;
            border-radius: 8px;
        }

        .zoom-lens {
            position: absolute;
            border: 1px solid #000;
            width: 100px;
            height: 100px;
            background: rgba(255, 255, 255, 0.4);
            cursor: crosshair;
            display: none;
            border-radius: 50%;
            pointer-events: none;
        }

.zoom-result {
    position: absolute;
    left: calc(100% + 20px);
    top: 0;
    width: 700px;  
    height: 600px; 
    border: 1px solid #ddd;
    background-repeat: no-repeat;
    z-index: 1000;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    display: none;
    background-color: white;
    pointer-events: none;
}

        .product-right-panel {
            height: 80vh;
            overflow-y: auto;
            padding-right: 15px;
        }

        .product-right-panel::-webkit-scrollbar {
            width: 6px;
        }

        .product-right-panel::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .product-right-panel::-webkit-scrollbar-thumb {
            background: var(--secondary-color);
            border-radius: 3px;
        }

        .product-right-panel::-webkit-scrollbar-thumb:hover {
            background: var(--primary-color);
        }

        .prescription-status {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            margin-left: 15px;
            border: 2px solid;
        }

        .prescription-status.pending {
            background: #fff3cd;
            color: #856404;
            border-color: #ffc107;
        }

        .prescription-status.accepted {
            background: #d1edff;
            color: #0c5460;
            border-color: #0dcaf0;
        }

        .prescription-status.rejected {
            background: #f8d7da;
            color: #721c24;
            border-color: #dc3545;
        }

        .product-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .brand-name {
            color: var(--secondary-color);
            font-weight: 500;
            margin-bottom: 1rem;
        }

        .rating-section {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .stars {
            color: #ffc107;
        }

        .rating-text {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .assured-badge {
            background: linear-gradient(45deg, #2196F3, #1976D2);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .price-section {
            margin: 1.5rem 0;
        }

        .current-price {
            font-size: 2rem;
            font-weight: bold;
            color: var(--success-color);
        }

        .original-price {
            font-size: 1.2rem;
            color: #6c757d;
            text-decoration: line-through;
            margin-left: 10px;
        }

        .discount-badge {
            background: var(--success-color);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9rem;
            margin-left: 10px;
        }

        .stock-info {
            margin: 1rem 0;
        }

        .in-stock {
            color: var(--success-color);
            font-weight: 500;
        }

        .out-of-stock {
            color: var(--danger-color);
            font-weight: 500;
        }

        .prescription-btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            font-weight: 500;
            margin: 1rem 0;
            transition: background 0.3s ease;
            box-shadow: 0 2px 10px rgba(255, 107, 107, 0.3);
        }

        .prescription-btn:hover {
            background: linear-gradient(45deg, #ee5a24, #ff6b6b);
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
            color: white;
        }

        .prescription-btn.uploaded {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            box-shadow: 0 2px 10px rgba(39, 174, 96, 0.3);
        }

        .prescription-btn.uploaded:hover {
            background: linear-gradient(45deg, #2ecc71, #27ae60);
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.4);
        }

        .modal-content {
            border-radius: 15px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
        }

        .modal-header {
            background: linear-gradient(45deg, var(--secondary-color), #2980b9);
            color: white;
            border-radius: 15px 15px 0 0;
            border: none;
        }

        .modal-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .form-control {
            border: 2px solid #e9ecef;
            border-radius: 25px;
            padding: 12px 15px;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
        }

        .upload-area-small {
    border: 2px solid #e9ecef;
    border-radius: 6px;
    padding: 12px 15px;
    text-align: left;
    background: #f8f9fa;
    transition: all 0.3s ease;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    min-height: 50px;
}

.upload-area-small:hover {
    background: #e9ecef;
    border-color: var(--secondary-color);
}

.upload-area-small.dragover {
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}

.upload-content {
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 500;
}

.upload-content i {
    color: var(--secondary-color);
}

.upload-area-small:hover .upload-content i {
    color: var(--primary-color);
}

.upload-area-small.dragover .upload-content i {
    color: white;
}
        .upload-area:hover {
            background: #f0f4ff;
            border-color: var(--primary-color);
        }

        .upload-area.dragover {
            background: var(--secondary-color);
            color: white;
        }

        .prescription-preview {
            max-width: 200px;
            max-height: 150px;
            object-fit: contain;
            border-radius: 8px;
            border: 2px solid #e9ecef;
        }

        .size-selector, .variant-selector {
            margin: 1rem 0;
        }

        .action-buttons {
            margin-top: 2rem;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .btn-primary {
            background: var(--secondary-color);
            border: none;
            padding: 12px 30px;
            font-weight: 500;
            border-radius: 6px;
            transition: background 0.3s ease;
        }

        .btn-primary:hover {
            background: #2980b9;
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
        }

        .btn-outline-danger {
            border: 2px solid var(--danger-color);
            color: var(--danger-color);
            padding: 10px 28px;
            font-weight: 500;
            border-radius: 6px;
            transition: background 0.3s ease, color 0.3s ease;
        }

        .btn-outline-danger:hover {
            background: var(--danger-color);
            color: white;
        }

        .product-description {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .reviews-section {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            margin-top: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .review-item {
            border-bottom: 1px solid #e9ecef;
            padding: 1.5rem 0;
        }

        .review-item:last-child {
            border-bottom: none;
        }

        .reviewer-info {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 0.5rem;
        }

        .reviewer-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--secondary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .similar-products {
            margin-top: 3rem;
            padding: 2rem 0;
        }

        .product-card:hover {
    box-shadow: 0 8px 25px rgba(0,0,0,0.15); 
    transform: translateY(-5px); 
    border-color: var(--secondary-color); 
}
.product-card:hover img {
    transform: scale(1.05); /* Slight zoom on image */
}

.product-card:hover h6 {
    color: var(--secondary-color);
    transition: color 0.3s ease;
}
.product-card .text-success {
    transition: all 0.3s ease;
}

.product-card:hover .text-success {
    font-weight: bold;
    transform: scale(1.1);
}

.product-card .text-muted {
    transition: all 0.3s ease;
}

.product-card:hover .text-muted {
    color: #495057 !important;
}
        .product-card img {
            width: 100%;
            height: 200px;
            object-fit: contain;
            margin-bottom: 1rem;
            transition: transform 0.3s ease;
        }

        .error-message {
            background: #ffebee;
            color: var(--danger-color);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid var(--danger-color);
            margin: 1rem 0;
            display: none;
        }

        .success-message {
            background: #e8f5e8;
            color: var(--success-color);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid var(--success-color);
            margin: 1rem 0;
            display: none;
        }

        @media (max-width: 768px) {
            .product-title {
                font-size: 1.5rem;
            }
            
            .current-price {
                font-size: 1.8rem;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .action-buttons .btn {
                width: 100%;
            }
            
            .zoom-result, .zoom-lens {
                display: none !important;
            }
            
            .thumbnail-container {
                justify-content: center;
            }
        }

        @media (max-width: 1400px) {
    .zoom-result {
        width: 750px;
        height: 500px;
    }
}

@media (max-width: 1200px) {
    .zoom-result {
        width: 500px;
        height: 400px;
    }
}
@media (max-width: 992px) {
    .zoom-result {
        display: none !important; /* Hide zoom on tablets */
    }
}

.variant-selector {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 8px;
    display: block !important;
    position: static;
    z-index: 1;
}

.variant-option {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    padding: 12px;
    margin: 5px 10px 5px 0;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 100px;
    text-align: center;
    position: relative;
}
.variant-option:hover {
    border-color: #007bff;
    background-color: #e3f2fd;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,123,255,0.15);
}

.variant-option.active {
    border-color: #007bff;
    background-color: #007bff;
    color: white;
}

.variant-option.out-of-stock {
    opacity: 0.6;
    cursor: not-allowed;
    background-color: #f5f5f5;
}
.variant-image {
    width: 60px;
    height: 60px;
    margin-bottom: 8px;
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid #e9ecef;
}
.variant-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background-color: white;
}
.variant-option.active .variant-image {
    border-color: white;
}
.variant-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
    width: 100%;
}
.variant-attribute {
    font-weight: 600;
    font-size: 0.85rem;
    color: #495057;
}
.variant-option.active .variant-attribute {
    color: white;
}
.variant-name {
    font-weight: 600;
    font-size: 0.9rem;
}

.variant-price {
    font-weight: 500;
    color: #28a745;
    font-size: 0.8rem;
}

.variant-option.active .variant-price {
    color: #e8f5e9;
}
.out-of-stock-label {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #dc3545;
    color: white;
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: 10px;
    font-weight: 500;
}
@media (max-width: 768px) {
    .variant-option {
        min-width: 85px;
        padding: 10px;
    }
    
    .variant-image {
        width: 50px;
        height: 50px;
    }
    
    .variant-attribute {
        font-size: 0.8rem;
    }
    
    .variant-price {
        font-size: 0.75rem;
    }
}
.variant-stock-status {
    font-size: 0.75rem;
    margin-top: 4px;
    opacity: 0.8;
}

.products-carousel-container {
    position: relative;
    overflow: hidden;
    width: 100%;
}

.products-carousel {
    display: flex;
    transition: transform 0.3s ease;
    gap: 15px;
}

.carousel-controls {
    display: flex;
    gap: 10px;
}

.carousel-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    border: 2px solid var(--secondary-color);
    background: white;
    color: var(--secondary-color);
    transition: all 0.3s ease;
}

.carousel-btn:hover {
    background: var(--secondary-color);
    color: white;
    transform: scale(1.1);
}

.carousel-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.product-card-carousel {
    flex: 0 0 200px;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    text-align: center;
    background: white;
    transition: all 0.3s ease;
    cursor: pointer;
    height: 320px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.product-card-carousel:hover {
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    transform: translateY(-5px);
    border-color: var(--secondary-color);
}

.product-card-carousel img {
    width: 100%;
    height: 140px;
    object-fit: contain;
    margin-bottom: 10px;
    transition: transform 0.3s ease;
}

.product-card-carousel:hover img {
    transform: scale(1.05);
}

.product-card-carousel .brand-name {
    font-size: 0.8rem;
    color: #6c757d;
    margin-bottom: 5px;
    font-weight: 500;
}

.product-card-carousel .product-name {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 8px;
    line-height: 1.2;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.product-card-carousel .price-section {
    margin-top: auto;
}

.product-card-carousel .current-price {
    font-size: 1rem;
    font-weight: bold;
    color: var(--success-color);
}

.product-card-carousel .original-price {
    font-size: 0.8rem;
    color: #6c757d;
    text-decoration: line-through;
    margin-left: 5px;
}

.product-card-carousel .offer-badge {
    background: var(--success-color);
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.7rem;
    margin-top: 3px;
    display: inline-block;
}

@media (max-width: 768px) {
    .product-card-carousel {
        flex: 0 0 160px;
        height: 280px;
    }
    
    .carousel-controls {
        margin-top: 10px;
    }
}
.wishlist-icon-container {
    position: absolute;
    top: 15px;
    right: 15px;
    z-index: 10;
}

.wishlist-icon-btn {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 45px;
    height: 45px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.wishlist-icon-btn:hover {
    background: white;
    transform: scale(1.1);
}

.wishlist-icon-btn.active i {
    color: #e74c3c;
}

.action-buttons {
    display: flex;
    gap: 15px;
    align-items: center;
    margin-top: 20px;
}

.quantity-selector {
    display: flex;
    align-items: center;
    border: 2px solid #ddd;
    border-radius: 8px;
    background: white;
}

.quantity-btn {
    background: none;
    border: none;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s;
}

.quantity-btn:hover:not(:disabled) {
    background-color: #f8f9fa;
}

.quantity-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.quantity-display {
    min-width: 50px;
    text-align: center;
    font-weight: 600;
    padding: 0 10px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}
.modal-xl {
    max-width: 1000px;
}

.form-group {
    margin-bottom: 1rem;
}

.text-primary {
    color: var(--secondary-color) !important;
}

.border-bottom {
    border-bottom: 1px solid #e9ecef !important;
}

.alert-info {
    background-color: #e3f2fd;
    border-color: #2196f3;
    color: #1976d2;
}

.prescription-preview {
    max-width: 200px;
    max-height: 150px;
    object-fit: contain;
    border-radius: 8px;
    border: 2px solid #e9ecef;
}

@media (max-width: 768px) {
    .modal-xl {
        max-width: 95%;
        margin: 1rem auto;
    }
    
    .modal-body {
        padding: 1rem;
    }
    
    .row > [class*="col-"] {
        margin-bottom: 1rem;
    }
}
    </style>
</head>
<body>

    <body data-user-authenticated="<%= locals.user ? 'true' : 'false' %>"></body>

<!-- Header -->
<%-include("../../views/partials/user/header.ejs")%>


    <div class="container-fluid">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mt-3">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/home"><i class="fas fa-home"></i> Home</a></li>
                <li class="breadcrumb-item"><a href="/products/shop">Products</a></li>
                <li class="breadcrumb-item"><a href="#"><%= product.category.name %></a></li>
                <li class="breadcrumb-item active"><%= product.name %></li>
            </ol>
        </nav>

        <div class="row">
            <!-- Product Image Gallery -->
            <div class="col-lg-5 col-md-6">
                <div class="product-gallery">
                    <div class="wishlist-icon-container">
                        <button class="wishlist-icon-btn" id="wishlistBtn" onclick="toggleWishlist()">
                            <i class="far fa-heart"></i>
                        </button>
                    </div>
                    <div class="zoom-container">
                        <img src="<%= product.variant.images && product.variant.images[0].url %>" 
                             alt="<%= product.variant.images && product.variant.images[0].altText || product.name %>" 
                             class="main-image" 
                             id="mainImage">
                        <div class="zoom-lens" id="zoomLens"></div>
                        <div class="zoom-result" id="zoomResult"></div>
                    </div>
                    
                    <div class="thumbnail-container">
                        <% if(product.variant.images && product.variant.images.length > 0){ %>
                            <% product.variant.images.forEach((img, index) => { %>
                                <img src="<%= img.url %>" 
                                     alt="<%= img.altText || `Thumbnail ${index + 1}` %>" 
                                     class="thumbnail <%= index === 0 ? 'active' : '' %> " 
                                     onclick="changeMainImage(this)">
                            <% }) %>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Product Details -->
            <div class="col-lg-7 col-md-6">
                <div class="product-right-panel">
                    <div class="product-info">
                        <div class="brand-name"><%- product.brand.name %></div>
                        <h1 class="product-title"><%- product.name %></h1>
                        
                        <!-- Rating Section -->
                        <div class="rating-section">
                            <div class="stars">
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star-half-alt"></i>
                                <span class="ms-2">4.5</span>
                            </div>
                            <span class="rating-text">461 ratings and 23 reviews</span>
                            <span class="assured-badge">
                                <i class="fas fa-shield-alt"></i> Assured
                            </span>
                        </div>

                        <!-- Prescription Button and Status -->
                         <% if(product.variant.prescriptionRequired) { %>
                        <div class="prescription-section d-flex align-items-center">
                            <button class="btn prescription-btn" id="prescriptionBtn" onclick="openPrescriptionModal()">
                                <i class="fas fa-prescription"></i> Add Prescription (Required)
                            </button>
                            <span class="prescription-status pending" id="prescriptionStatus" style="display: none;">
                                <i class="fas fa-clock"></i> Pending Review
                            </span>
                        </div>
                        <div id="prescriptionUploadStatus" style="display: none;">
                            <small class="text-success">
                                <i class="fas fa-check-circle"></i> You can know the result within 1 hour. <span id="patientNameDisplay"></span>
                            </small>
                        </div>
                        <% } %>

                        <!-- Price Section -->
                        <div class="price-section">
                            <span class="current-price">₹<%= product.variant.salesPrice || product.variant.regularPrice %></span>
                            <span class="original-price">₹<%= product.variant.regularPrice %></span>
                            <% if(product.variant.salesPrice && product.variant.salesPrice < product.variant.regularPrice) { %>
                                <span class="discount-badge">
                                    <%= Math.round((1 - product.variant.salesPrice / product.variant.regularPrice) * 100) %>% off
                                </span>
                            <% } %>
                            <% if(product.variant.offerStatus || product.variant.discountStatus){ %>
                            <div class="mt-2">
                                <small class="text-muted">Price including with all taxes! <i class="fas fa-coins text-warning"></i></small>
                            </div>
                            <% } %>
                        </div>

                        <!-- Stock Information -->
                        <div class="stock-info">
                            <% if(product.variant.stock > 6){ %>
                            <span class="in-stock" id="stockStatus">
                                <i class="fas fa-check-circle"></i> In Stock - <%= product.variant.stock %> units available
                            </span>
                            <% } else if(product.variant.stock > 0 && product.variant.stock <= 6){ %>
                            <span class="in-stock" id="stockStatus" style="color: #f39c12;">
                                <i class="fas fa-exclamation-triangle"></i> Only few items left - <%= product.variant.stock %> units available
                            </span>
                            <% } else { %>
                            <span class="out-of-stock" id="stockStatus">
                                <i class="fas fa-times-circle"></i> Out of Stock<br>
                                <small style="font-weight: normal;">This item is currently unavailable</small>
                            </span>
                            <% } %>
                        </div> 

                        <div class="variant-selector" id="variantSelector" style="display: none;">
                            <h6><i class="fas fa-layer-group"></i> Available Variants:</h6>
                            <div id="variantOptions">
                                <!-- Variants will be populated here -->
                            </div>
                        </div>

                        <!-- Error/Success Messages -->
                        <div class="error-message" id="errorMessage">
                            <i class="fas fa-exclamation-circle"></i> 
                            <span id="errorText">Please upload prescription to proceed.</span>
                        </div>
                        <div class="success-message" id="successMessage">
                            <i class="fas fa-check-circle"></i> 
                            <span id="successText">Product added to cart successfully!</span>
                        </div>

                        <!-- Action Buttons -->
                        <div class="action-buttons">
                            <div class="quantity-selector">
                                <button class="quantity-btn" id="decrementBtn" onclick="updateQuantity('decrement')">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <span class="quantity-display" id="quantityDisplay">1</span>
                                <button class="quantity-btn" id="incrementBtn" onclick="updateQuantity('increment')">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                            <button class="btn btn-primary btn-lg flex-grow-1" id="addToCartBtn" onclick="addToCart()">
                                <i class="fas fa-shopping-cart"></i> Add to Cart
                            </button>
                        </div>
                    </div>

                    <!-- Product Description -->
                    <div class="product-description mt-4">
                        <h3><i class="fas fa-info-circle text-primary"></i> Product Description</h3>
                        <p><%- product.description %></p>
                        
                        <% if (product.variant.attributes && product.variant.attributes.size > 0) { %>
                        <h5 class="mt-4">Product Details:</h5>
                        <ul>
                            <% for (const [key, value] of product.variant.attributes) { %>
                                <li><strong><%= key %>:</strong> <%= value %></li>
                            <% } %>
                            <li><strong>Unit of Measure:</strong> <%= product.variant.uom %></li>
                            <% if (product.variant.manufacturingDate) { %>
                                <li><strong>Manufacturing Date:</strong> <%= new Date(product.variant.manufacturingDate).toLocaleDateString() %></li>
                            <% } %>
                            <% if (product.variant.expiryDate) { %>
                                <li><strong>Expiry Date:</strong> <%= new Date(product.variant.expiryDate).toLocaleDateString() %></li>
                            <% } %>
                        </ul>
                        <% } %>

                        <% if (product.variant.ingredients && product.variant.ingredients.length > 0) { %>
                        <h5 class="mt-4">Ingredients:</h5>
                        <p><%= product.variant.ingredients.join(', ') %></p>
                        <% } %>
                        
                        <% if (product.variant.prescriptionRequired) { %>
                        <div class="alert alert-warning mt-3">
                            <i class="fas fa-exclamation-triangle"></i> 
                            <strong>Important:</strong> This product requires a valid prescription. Please upload your prescription before adding to cart.
                        </div>
                        <% } %>
                    </div>

                    <!-- Ratings & Reviews -->
                    <div class="reviews-section mt-4">
                        <h3><i class="fas fa-star text-warning"></i> Ratings & Reviews</h3>
                        
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="text-center">
                                    <h2 class="text-success">4.5</h2>
                                    <div class="stars mb-2">
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star-half-alt"></i>
                                    </div>
                                    <p>Based on 461 reviews</p>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="mb-2">
                                    <span class="me-2">5★</span>
                                    <div class="progress" style="height: 10px;">
                                        <div class="progress-bar bg-success" style="width: 65%"></div>
                                    </div>
                                    <span class="ms-2">65%</span>
                                </div>
                                <div class="mb-2">
                                    <span class="me-2">4★</span>
                                    <div class="progress" style="height: 10px;">
                                        <div class="progress-bar bg-info" style="width: 25%"></div>
                                    </div>
                                    <span class="ms-2">25%</span>
                                </div>
                                <div class="mb-2">
                                    <span class="me-2">3★</span>
                                    <div class="progress" style="height: 10px;">
                                        <div class="progress-bar bg-warning" style="width: 8%"></div>
                                    </div>
                                    <span class="ms-2">8%</span>
                                </div>
                                <div class="mb-2">
                                    <span class="me-2">2★</span>
                                    <div class="progress" style="height: 10px;">
                                        <div class="progress-bar bg-orange" style="width: 1%"></div>
                                    </div>
                                    <span class="ms-2">1%</span>
                                </div>
                                <div class="mb-2">
                                    <span class="me-2">1★</span>
                                    <div class="progress" style="height: 10px;">
                                        <div class="progress-bar bg-danger" style="width: 1%"></div>
                                    </div>
                                    <span class="ms-2">1%</span>
                                </div>
                            </div>
                        </div>

                        <!-- Individual Reviews -->
                        <div class="review-item">
                            <div class="reviewer-info">
                                <div class="reviewer-avatar">R</div>
                                <div>
                                    <strong>Unnikuttan</strong>
                                    <div class="stars">
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                    </div>
                                    <small class="text-muted">Verified Purchase • 2 months ago</small>
                                </div>
                            </div>
                            <p>Excellent product! Works effectively for fever and headaches. Good quality medicine from a trusted brand. Fast delivery and proper packaging.</p>
                        </div>

                        <div class="review-item">
                            <div class="reviewer-info">
                                <div class="reviewer-avatar">P</div>
                                <div>
                                    <strong>Appukuttan</strong>
                                    <div class="stars">
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="fas fa-star"></i>
                                        <i class="far fa-star"></i>
                                    </div>
                                    <small class="text-muted">Verified Purchase • 1 month ago</small>
                                </div>
                            </div>
                            <p>Good medicine for pain relief. The tablets are easy to swallow and provide quick relief. Would recommend for basic pain management.</p>
                        </div>

                        <button class="btn btn-outline-primary">View All Reviews</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Similar Products -->
        <div class="row similar-products">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3><i class="fas fa-pills text-primary"></i> Similar Products</h3>
                    <div class="carousel-controls">
                        <button class="btn btn-outline-primary carousel-btn" id="prevBtn" onclick="scrollCarousel('prev')">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="btn btn-outline-primary carousel-btn" id="nextBtn" onclick="scrollCarousel('next')">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
                <div class="products-carousel-container">
                    <div class="products-carousel" id="productsCarousel">
                        <!-- Products will be populated here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Prescription Upload Modal -->
        <div class="modal fade" id="prescriptionModal" tabindex="-1" aria-labelledby="prescriptionModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="prescriptionModalLabel">
                            <i class="fas fa-prescription"></i> Upload Prescription Details
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="existingPrescriptionSection" style="display: none;">
                            <div class="alert alert-info">
                                <h6><i class="fas fa-info-circle"></i> Your Last Uploaded Prescription:</h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <p><strong>Doctor:</strong> <span id="existingDoctorName"></span></p>
                                        <p><strong>Hospital:</strong> <span id="existingHospitalName"></span></p>
                                        <p><strong>Patient:</strong> <span id="existingPatientName"></span></p>
                                        <p><strong>Medicine:</strong> <span id="existingMedicineName"></span></p>
                                    </div>
                                    <div class="col-md-6">
                                        <p><strong>Quantity:</strong> <span id="existingUom"></span></p>
                                        <p><strong>Prescription Date:</strong> <span id="existingPrescriptionDate"></span></p>
                                        <p><strong>Valid Until:</strong> <span id="existingExpiryDate"></span></p>
                                        <p><strong>Status:</strong> <span id="existingStatus"></span></p>
                                    </div>
                                </div>
                                <div id="existingPrescriptionImage" class="text-center mt-3">
                                    <!-- Image will be populated here -->
                                </div>
                            </div>
                            <hr>
                            <h6 class="text-primary">Upload New Prescription (Optional):</h6>
                        </div>

                        <form id="prescriptionForm">
                            <!-- Doctor Information Section -->
                            <div class="mb-4">
                                <h6 class="text-primary border-bottom pb-2">
                                    <i class="fas fa-user-md"></i> Doctor Information
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="doctorName" class="form-label">
                                                <i class="fas fa-user-md"></i> Doctor Name *
                                            </label>
                                            <input type="text" class="form-control" id="doctorName" required>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="hospitalName" class="form-label">
                                                <i class="fas fa-hospital"></i> Hospital/Clinic Name
                                            </label>
                                            <input type="text" class="form-control" id="hospitalName">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Patient Information Section -->
                            <div class="mb-4">
                                <h6 class="text-primary border-bottom pb-2">
                                    <i class="fas fa-user"></i> Patient Information
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="patientName" class="form-label">
                                                <i class="fas fa-user"></i> Patient Name *
                                            </label>
                                            <input type="text" class="form-control" id="patientName" required>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="patientAge" class="form-label">
                                                <i class="fas fa-calendar-alt"></i> Age *
                                            </label>
                                            <input type="number" class="form-control" id="patientAge" min="1" max="120" required>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="patientGender" class="form-label">
                                                <i class="fas fa-venus-mars"></i> Gender *
                                            </label>
                                            <select class="form-control" id="patientGender" required>
                                                <option value="">Select Gender</option>
                                                <option value="Male">Male</option>
                                                <option value="Female">Female</option>
                                                <option value="Other">Other</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Medicine Information Section -->
                            <div class="mb-4">
                                <h6 class="text-primary border-bottom pb-2">
                                    <i class="fas fa-pills"></i> Medicine Information
                                </h6>
                                <div class="row">
                                    <div class="col-md-8">
                                        <div class="form-group">
                                            <label for="medicineName" class="form-label">
                                                <i class="fas fa-pills"></i> Medicine Name *
                                            </label>
                                            <input type="text" class="form-control" id="medicineName" required>
                                            <small class="text-muted">Enter the exact medicine name as prescribed</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="uom" class="form-label">
                                                <i class="fas fa-calculator"></i> Quantity/Count *
                                            </label>
                                            <input type="number" class="form-control" id="uom" min="1" required>
                                            <small class="text-muted">Total tablets/capsules prescribed</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Prescription Dates Section -->
                            <div class="mb-4">
                                <h6 class="text-primary border-bottom pb-2">
                                    <i class="fas fa-calendar"></i> Prescription Dates
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="prescriptionDate" class="form-label">
                                                <i class="fas fa-calendar-plus"></i> Prescription Date *
                                            </label>
                                            <input type="date" class="form-control" id="prescriptionDate" required>
                                            <small class="text-muted">Date when prescription was issued</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="expiryDate" class="form-label">
                                                <i class="fas fa-calendar-times"></i> Treatment End Date *
                                            </label>
                                            <input type="date" class="form-control" id="expiryDate" required>
                                            <small class="text-muted">Until when this medicine should be taken</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Prescription Image Upload Section -->
                            <div class="mb-4">
                                <h6 class="text-primary border-bottom pb-2">
                                    <i class="fas fa-file-image"></i> Prescription Document
                                </h6>
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="fas fa-camera"></i> Upload Prescription Image/PDF *
                                    </label>
                                    <div class="upload-area-small" id="uploadArea" onclick="document.getElementById('prescriptionFile').click()">
                                        <div class="upload-content">
                                            <i class="fas fa-camera"></i>
                                            <span>Choose File</span>
                                        </div>
                                        <small class="text-muted d-block mt-1">JPG, PNG, PDF (Max 5MB)</small>
                                    </div>
                                    <input type="file" id="prescriptionFile" accept="image/*,.pdf" style="display: none;" required>
                                    
                                    <div id="imagePreview" style="display: none;" class="mt-3 text-center">
                                        <img id="previewImage" class="prescription-preview">
                                        <div class="mt-2">
                                            <span id="fileName" class="text-muted"></span>
                                            <button type="button" class="btn btn-sm btn-outline-danger ms-2" onclick="removeImage()">
                                                <i class="fas fa-times"></i> Remove
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Important Notes -->
                            <div class="alert alert-info">
                                <h6><i class="fas fa-info-circle"></i> Important Notes:</h6>
                                <ul class="mb-0">
                                    <li>Ensure all information matches your prescription exactly</li>
                                    <li>Upload a clear image showing all prescription details</li>
                                    <li>Your prescription will be verified by our pharmacy team</li>
                                    <li>You can only purchase medicines within the prescribed quantity</li>
                                </ul>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="savePrescriptionBtn" onclick="savePrescription()">
                            <i class="fas fa-save"></i> Upload Prescription
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- footer -->
<%-include("../../views/partials/user/footer.ejs")%>

    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>

        const productData = {
            id: '<%= product.id %>',
            name: `<%= product.name %>`,
            prescriptionRequired: <%= product.variant.prescriptionRequired %>,
            stock: <%= product.variant.stock %>,
            price: {
                regular: <%= product.variant.regularPrice %>,
                sales: <%= product.variant.salesPrice || 0 %>
            },
            distinguishingAttributes: <%- JSON.stringify(product.distinguishingAttributes || []) %> // Add this line
        };

        // Global variables
        let isInWishlist = false;
        let prescriptionUploaded = <%= product.variant.prescriptionRequired ? 'false' : 'true' %>;
        let currentStock = <%= product.variant.stock %>;
        let currentQuantity = 1;
        let isProductInCart = false;

        function isUserAuthenticated() {
            return document.body.getAttribute('data-user-authenticated') === 'true';
        }

        // Function to update cart count
        async function updateCartCount() {
            try {
                const response = await fetch('/cart/count');
                const data = await response.json();
                
                if (data.success) {
                    const badge = document.getElementById('cartCountBadge');
                    if (badge) {
                        badge.textContent = data.count;
                        badge.setAttribute('data-count', data.count);
                    }
                }
            } catch (error) {
                console.error('Error fetching cart count:', error);
            }
}
    
        async function fetchProductData() {
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const productId = window.location.pathname.split('/').pop();
                const variantIndex = urlParams.get('variantIndex') || 0;
                
                const response = await fetch(`/products/details/${productId}?variantIndex=${variantIndex}`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Product not found');
                }
                
                return await response.json();
            } catch (error) {
                console.error('Error fetching product data:', error);
                window.location.href = '/products/shop';
            }
        }

        // Image zoom functionality
        function initializeImageZoom() {
            const mainImage = document.getElementById('mainImage');
            const zoomLens = document.getElementById('zoomLens');
            const zoomResult = document.getElementById('zoomResult');

            if (!mainImage || !zoomLens || !zoomResult) return;

            // Clear any existing listeners
            const newImage = mainImage.cloneNode(true);
            mainImage.parentNode.replaceChild(newImage, mainImage);
            
            const img = document.getElementById('mainImage');
            
            img.addEventListener('mouseenter', function() {
                if (window.innerWidth > 768) {
                    zoomLens.style.display = 'block';
                    zoomResult.style.display = 'block';
                }
            });

            img.addEventListener('mousemove', function(e) {
                if (window.innerWidth <= 768) return;
                
                e.preventDefault();
                
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left - window.pageXOffset;
                const y = e.clientY - rect.top - window.pageYOffset;
                
                const lensWidth = 100;
                const lensHeight = 100;
                
                let posX = x - (lensWidth / 2);
                let posY = y - (lensHeight / 2);
                
                if (posX < 0) posX = 0;
                if (posY < 0) posY = 0;
                if (posX > rect.width - lensWidth) posX = rect.width - lensWidth;
                if (posY > rect.height - lensHeight) posY = rect.height - lensHeight;
                
                zoomLens.style.left = posX + 'px';
                zoomLens.style.top = posY + 'px';
                
       
            let zoomWidth, zoomHeight;
            if (window.innerWidth > 1400) {
                zoomWidth = 400; zoomHeight = 350; // Reduced from 700x600
            } else if (window.innerWidth > 1200) {
                zoomWidth = 350; zoomHeight = 300; // Reduced from 750x530
            } else {
                zoomWidth = 300; zoomHeight = 250; // Reduced from 500x400
            }

            // Reduce the zoom factor for less aggressive zooming
            const cx = (zoomWidth / lensWidth) * 0.7; // Multiply by 0.7 to reduce zoom
            const cy = (zoomHeight / lensHeight) * 0.7;
                
                zoomResult.style.backgroundImage = `url('${this.src}')`;
                zoomResult.style.backgroundSize = `${rect.width * cx}px ${rect.height * cy}px`;
                zoomResult.style.backgroundPosition = `-${posX * cx}px -${posY * cy}px`;
            });

            img.addEventListener('mouseleave', function() {
                zoomLens.style.display = 'none';
                zoomResult.style.display = 'none';
            });
        }

        // Change main image
        function changeMainImage(thumbnail) {
            const mainImage = document.getElementById('mainImage');
            const currentActive = document.querySelector('.thumbnail.active');
            
            if (currentActive) {
                currentActive.classList.remove('active');
            }
            
            thumbnail.classList.add('active');
            mainImage.src = thumbnail.src;
            
            mainImage.style.opacity = '0.7';
            setTimeout(() => {
                mainImage.style.opacity = '1';
                // Reinitialize zoom after image change
                setTimeout(() => {
                    initializeImageZoom();
                }, 50);
            }, 150);
        }

        // Prescription modal functionality
        function openPrescriptionModal() {
            if (!isUserAuthenticated()) {
                showErrorMessage('Please sign in first to upload prescription');
                return;
            }
            
            const modal = new bootstrap.Modal(document.getElementById('prescriptionModal'));
            modal.show();
        }

        function initializePrescriptionUpload() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('prescriptionFile');
            const imagePreview = document.getElementById('imagePreview');
            const previewImage = document.getElementById('previewImage');
            const fileName = document.getElementById('fileName');

            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFileSelection(files[0]);
                    this.querySelector('span').textContent = files[0].name;
                }
            });

            fileInput.addEventListener('change', function(e) {
                if (e.target.files.length > 0) {
                    handleFileSelection(e.target.files[0]);
                }
            });

            function handleFileSelection(file) {
                if (file.size > 5 * 1024 * 1024) {
                    alert('File size must be less than 5MB');
                    return;
                }

                const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Please select a valid image file (JPG, PNG) or PDF');
                    return;
                }

                fileName.textContent = file.name;

                 document.querySelector('#uploadArea span').textContent = file.name.length > 20 ? 
        file.name.substring(0, 20) + '...' : file.name;
                
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        previewImage.src = e.target.result;
                        imagePreview.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                } else {
                    previewImage.src = '/user/images/logo.png';
                    imagePreview.style.display = 'block';
                }
            }
        }

        function removeImage() {
            document.getElementById('prescriptionFile').value = '';
            document.getElementById('imagePreview').style.display = 'none';
        }


        //live validation for form fields
        function initializeFormValidation() {
            const requiredFields = [
                'doctorName', 'patientName', 'patientAge', 'patientGender', 
                'medicineName', 'uom', 'prescriptionDate', 'expiryDate'
            ];
            
            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.addEventListener('blur', () => validateField(fieldId));
                    field.addEventListener('input', () => clearFieldError(fieldId));
                }
            });
            
            // Special validation for dates
            const prescriptionDate = document.getElementById('prescriptionDate');
            const expiryDate = document.getElementById('expiryDate');
            
            if (prescriptionDate) {
                prescriptionDate.addEventListener('change', validateDates);
            }
            if (expiryDate) {
                expiryDate.addEventListener('change', validateDates);
            }
        }

        function validateField(fieldId) {
            const field = document.getElementById(fieldId);
            const value = field.value.trim();
            let isValid = true;
            let errorMessage = '';
            
            // Remove existing error
            clearFieldError(fieldId);
            
            switch(fieldId) {
                case 'doctorName':
                    if (!value) {
                        errorMessage = 'Doctor name is required';
                        isValid = false;
                    }
                    break;
                case 'patientName':
                    if (!value) {
                        errorMessage = 'Patient name is required';
                        isValid = false;
                    }
                    break;
                case 'patientAge':
                    if (!value || parseInt(value) < 1 || parseInt(value) > 120) {
                        errorMessage = 'Please enter a valid age (1-120)';
                        isValid = false;
                    }
                    break;
                case 'patientGender':
                    if (!value) {
                        errorMessage = 'Please select gender';
                        isValid = false;
                    }
                    break;
                case 'medicineName':
                    if (!value) {
                        errorMessage = 'Medicine name is required';
                        isValid = false;
                    }
                    break;
                case 'uom':
                    if (!value || parseInt(value) < 1) {
                        errorMessage = 'Please enter valid quantity';
                        isValid = false;
                    }
                    break;
                case 'prescriptionDate':
                    if (!value) {
                        errorMessage = 'Prescription date is required';
                        isValid = false;
                    } else {
                        const prescDate = new Date(value);
                        const today = new Date();
                        today.setHours(23, 59, 59, 999); // End of today
                        if (prescDate > today) {
                            errorMessage = 'Prescription date cannot be in the future';
                            isValid = false;
                        }
                    }
                    break;
                case 'expiryDate':
                    if (!value) {
                        errorMessage = 'Treatment end date is required';
                        isValid = false;
                    }
                    break;
            }
            
            if (!isValid) {
                showFieldError(fieldId, errorMessage);
            }
            
            return isValid;
        }

        function validateDates() {
            const prescriptionDate = document.getElementById('prescriptionDate').value;
            const expiryDate = document.getElementById('expiryDate').value;
            
            if (prescriptionDate && expiryDate) {
                const prescDate = new Date(prescriptionDate);
                const expDate = new Date(expiryDate);
                
                if (expDate <= prescDate) {
                    showFieldError('expiryDate', 'Treatment end date must be after prescription date');
                    return false;
                } else {
                    clearFieldError('expiryDate');
                }
            }
            return true;
        }

        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const formGroup = field.closest('.form-group');
            
            // Remove existing error
            const existingError = formGroup.querySelector('.field-error');
            if (existingError) {
                existingError.remove();
            }
            
            // Add new error
            const errorDiv = document.createElement('div');
            errorDiv.className = 'field-error text-danger mt-1';
            errorDiv.innerHTML = `<small><i class="fas fa-exclamation-circle"></i> ${message}</small>`;
            formGroup.appendChild(errorDiv);
            
            // Add error styling to field
            field.classList.add('is-invalid');
        }

        function clearFieldError(fieldId) {
            const field = document.getElementById(fieldId);
            const formGroup = field.closest('.form-group');
            const existingError = formGroup.querySelector('.field-error');
            
            if (existingError) {
                existingError.remove();
            }
            
            field.classList.remove('is-invalid');
        }

        function validateAllFields() {
            const requiredFields = [
                'doctorName', 'patientName', 'patientAge', 'patientGender', 
                'medicineName', 'uom', 'prescriptionDate', 'expiryDate'
            ];
            
            let isAllValid = true;
            
            requiredFields.forEach(fieldId => {
                if (!validateField(fieldId)) {
                    isAllValid = false;
                }
            });
            
            // Validate file upload
            const prescriptionFile = document.getElementById('prescriptionFile');
            if (!prescriptionFile.files[0]) {
                showFieldError('prescriptionFile', 'Prescription image/PDF is required');
                isAllValid = false;
            }
            
            // Validate dates relationship
            if (!validateDates()) {
                isAllValid = false;
            }
            
            return isAllValid;
        }


        async function savePrescription() {
            // Check if user is logged in first
            if (!isUserAuthenticated()) {
                // Show error near the save button
                const saveBtn = document.getElementById('savePrescriptionBtn');
                const existingError = saveBtn.parentElement.querySelector('.auth-error');
                if (existingError) existingError.remove();
                
                const errorDiv = document.createElement('div');
                errorDiv.className = 'auth-error text-danger mt-2 text-center';
                errorDiv.innerHTML = '<small><i class="fas fa-exclamation-circle"></i> Please sign in first to upload prescription</small>';
                saveBtn.parentElement.appendChild(errorDiv);
                
                setTimeout(() => {
                    if (errorDiv.parentElement) errorDiv.remove();
                }, 5000);
                return;
            }
            
            // Validate all fields
            if (!validateAllFields()) {
                return;
            }

            // Get all form values
            const doctorName = document.getElementById('doctorName').value.trim();
            const hospitalName = document.getElementById('hospitalName').value.trim();
            const patientName = document.getElementById('patientName').value.trim();
            const patientAge = document.getElementById('patientAge').value;
            const patientGender = document.getElementById('patientGender').value;
            const medicineName = document.getElementById('medicineName').value.trim();
            const uom = document.getElementById('uom').value;
            const prescriptionDate = document.getElementById('prescriptionDate').value;
            const expiryDate = document.getElementById('expiryDate').value;
            const prescriptionFile = document.getElementById('prescriptionFile').files[0];

            // Validation
            if (!doctorName || !patientName || !patientAge || !patientGender || 
                !medicineName || !uom || !prescriptionDate || !expiryDate || !prescriptionFile) {
                showErrorMessage('Please fill all required fields');
                return;
            }

            // Create FormData for backend
            const formData = new FormData();
            formData.append('productId', productData.id);
            formData.append('variantId', getCurrentVariantId());
            formData.append('doctorName', doctorName);
            formData.append('hospitalName', hospitalName);
            formData.append('patientName', patientName);
            formData.append('patientAge', patientAge);
            formData.append('patientGender', patientGender);
            formData.append('medicineName', medicineName);
            formData.append('uom', uom);
            formData.append('prescriptionDate', prescriptionDate);
            formData.append('expiryDate', expiryDate);
            formData.append('prescriptionFile', prescriptionFile);

            const saveBtn = document.getElementById('savePrescriptionBtn');
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
            saveBtn.disabled = true;

            try {
                // REAL API CALL TO BACKEND
                const response = await fetch('/cart/prescription', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Update UI based on REAL backend response
                    if (result.canAddToCart) {
                        prescriptionUploaded = true;
                        updatePrescriptionUI('verified', patientName);
                    } else {
                        prescriptionUploaded = false;
                        updatePrescriptionUI('pending', patientName);
                    }
                    
                    const modal = bootstrap.Modal.getInstance(document.getElementById('prescriptionModal'));
                    modal.hide();
                    showSuccessMessage(result.message);
                } else {
                    showErrorMessage(result.message);
                }
            } catch (error) {
                showErrorMessage('Failed to upload prescription');
            } finally {
                saveBtn.innerHTML = '<i class="fas fa-save"></i> Upload Prescription';
                saveBtn.disabled = false;
            }
        }

        function getCurrentVariantId() {
            const urlParams = new URLSearchParams(window.location.search);
            const currentVariantIndex = urlParams.get('variantIndex') || 0;
            
            if (productData.allVariants && productData.allVariants[currentVariantIndex]) {
                return productData.allVariants[currentVariantIndex]._id;
            }
            return productData.variant._id;
        }
                

        function updatePrescriptionStatus(status) {
            const statusElement = document.getElementById('prescriptionStatus');
            statusElement.className = `prescription-status ${status}`;
            
            switch(status) {
                case 'pending':
                    statusElement.innerHTML = '<i class="fas fa-clock"></i> Pending Review';
                    break;
                case 'accepted':
                    statusElement.innerHTML = '<i class="fas fa-check-circle"></i> Accepted';
                    break;
                case 'rejected':
                    statusElement.innerHTML = '<i class="fas fa-times-circle"></i> Rejected';
                    break;
            }
        }

       function addToCart() {
            // Check authentication first
                if (!isUserAuthenticated()) {
                showErrorMessage('Please sign in first to add items to cart');
                return;
            }
            
            // Then check prescription requirements
            if (!prescriptionUploaded && productData.prescriptionRequired) {
                const prescriptionStatus = document.getElementById('prescriptionStatus');
                if (prescriptionStatus && prescriptionStatus.style.display !== 'none') {
                    const statusText = prescriptionStatus.textContent;
                    if (statusText.includes('Pending')) {
                        showErrorMessage('Your prescription is pending verification. Please wait for admin approval.');
                    } else if (statusText.includes('Rejected')) {
                        showErrorMessage('Your prescription was rejected. Please upload a new prescription.');
                    } else if (statusText.includes('Expired')) {
                        showErrorMessage('Your prescription has expired. Please upload a new prescription.');
                    } else {
                        showErrorMessage('Please upload prescription to proceed.');
                    }
                } else {
                    showErrorMessage('Please upload prescription to proceed.');
                }
                return;
            }

            if (currentStock <= 0) {
                showErrorMessage('This item is currently out of stock.');
                return;
            }

            const addToCartBtn = document.getElementById('addToCartBtn');
            const originalText = addToCartBtn.innerHTML;
            
            addToCartBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            addToCartBtn.disabled = true;


            const currentVariantIndex = new URLSearchParams(window.location.search).get('variantIndex') || 0;
            
            const currentVariant = productData.allVariants ? 
                productData.allVariants[currentVariantIndex] : 
                productData.variant;
            
            const variantId = currentVariant._id || currentVariant.id;

            fetch('/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId: productData.id,
                    variantId: variantId,  
                    quantity: currentQuantity
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addToCartBtn.innerHTML = '<i class="fas fa-check"></i> Added to Cart';
                    showSuccessMessage(`${currentQuantity} item(s) added to cart successfully!`);
                    
                    //Update cart count in header
                    updateCartCount();

                    //Reset quantity to 1 after successful addition
                    currentQuantity = 1;
                    document.getElementById('quantityDisplay').textContent = currentQuantity;
                    updateQuantity('reset');
                } else {
                    showErrorMessage(data.message || 'Failed to add to cart');
                    addToCartBtn.innerHTML = originalText;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorMessage('Failed to add to cart');
                addToCartBtn.innerHTML = originalText;
            })
            .finally(() => {
                addToCartBtn.disabled = false;
                setTimeout(() => {
                    if (addToCartBtn.innerHTML.includes('Added to Cart')) {
                        addToCartBtn.innerHTML = originalText;
                    }
                }, 2000);
            });
        }

        function toggleWishlist() {
            const wishlistBtn = document.getElementById('wishlistBtn');
            const icon = wishlistBtn.querySelector('i');
            
            isInWishlist = !isInWishlist;
            
            if (isInWishlist) {
                icon.className = 'fas fa-heart';
                wishlistBtn.innerHTML = '<i class="fas fa-heart"></i> Added to Wishlist';
                showSuccessMessage('Product added to wishlist!');
            } else {
                icon.className = 'far fa-heart';
                wishlistBtn.innerHTML = '<i class="far fa-heart"></i> Wishlist';
                showSuccessMessage('Product removed from wishlist!');
            }
        }

        function showErrorMessage(message) {
            const errorDiv = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');
            
            errorText.textContent = message;
            errorDiv.style.display = 'block';
            
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        function hideErrorMessage() {
            document.getElementById('errorMessage').style.display = 'none';
        }

        function showSuccessMessage(message) {
            const successDiv = document.getElementById('successMessage');
            const successText = document.getElementById('successText');
            
            successText.textContent = message;
            successDiv.style.display = 'block';
            
            setTimeout(() => {
                successDiv.style.display = 'none';
            }, 3000);
        }

        function initializeSmoothScrolling() {
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
        }

        document.addEventListener('DOMContentLoaded', async function() {
            // Fetch product data
            const data = await fetchProductData();
            if (data && data.success) {
                console.log('Raw fetched data:', data);
                console.log('Product variants:', data.product?.allVariants);
                console.log('Variant count:', data.product?.allVariants?.length);
                populateProductData(data);
            }
            
            //existing initialization code
            setTimeout(() => {
                initializeImageZoom();
            }, 100);
            
            initializePrescriptionUpload();
            initializeFormValidation();
            initializeSmoothScrolling();
            
            document.body.style.opacity = '0';
            setTimeout(() => {
                document.body.style.transition = 'opacity 0.5s ease';
                document.body.style.opacity = '1';
            }, 100);

            document.querySelectorAll('img').forEach(img => {
                img.addEventListener('error', function() {
                    console.error(`Failed to load image: ${this.src}`);
                    this.src = '/user/images/logo.png';
                    this.alt = 'Image not available';
                });
            });

            // Initialize quantity controls
            updateQuantity('reset');
            checkCartStatus();
        });

    function populateProductData(data) {
    
        const { product, relatedProducts } = data;
        const variant = product.variant;

        productData.variant = variant;  
        productData.allVariants = product.allVariants;
        
        // Update all existing sections...
        updateBreadcrumb(product);
        updateProductImages(variant.images);
        updateProductInfo(product, variant);
        updatePricing(variant);
        updateStockStatus(variant);
        updatePrescriptionRequirement(variant.prescriptionRequired);
        
        // Add variants section
        console.log('About to populate variants:', {
        allVariants: product.allVariants,
        length: product.allVariants?.length,
        currentIndex: product.currentVariantIndex,
        distinguishingAttrs: product.distinguishingAttributes
        });
        // Check if variants actually exist and have different attributes
        if (product.allVariants && product.allVariants.length > 1) {
            console.log('Variant comparison:');
            product.allVariants.forEach((variant, index) => {
                console.log(`Variant ${index}:`, {
                    attributes: variant.attributes,
                    stock: variant.stock,
                    price: variant.salesPrice || variant.regularPrice
                });
            });
        }

        populateVariants(product.allVariants, product.currentVariantIndex, product.distinguishingAttributes);
        // fix 3 : pending

        
        updateRelatedProducts(relatedProducts);
        
        // Update global variables
        currentStock = variant.stock;

        if (data.product.prescriptionStatus) {
            updatePrescriptionUI(
                data.product.prescriptionStatus.status, 
                data.product.prescriptionStatus.patientName,
                data.product.prescriptionStatus // Pass full prescription data
            );
            
            // Store rejection reason globally
            if (data.product.prescriptionStatus.rejectionReason) {
                productData.prescriptionStatus = data.product.prescriptionStatus;
            }
        } else {
            prescriptionUploaded = !variant.prescriptionRequired;
        }

        setTimeout(() => {
            document.body.offsetHeight; // Force reflow
            initializeImageZoom(); // Re-initialize zoom
        }, 100);
    }

console.log('Product data populated, checking variant selector...');
setTimeout(() => {
    const variantSelector = document.getElementById('variantSelector');
    console.log('Variant selector display:', variantSelector?.style.display);
    console.log('Variant options HTML:', document.getElementById('variantOptions')?.innerHTML);
}, 500);

    function updateBreadcrumb(product) {
    const breadcrumb = document.querySelector('.breadcrumb');
    if (breadcrumb) {
        breadcrumb.innerHTML = `
            <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i> Home</a></li>
            <li class="breadcrumb-item"><a href="/products/shop">Products</a></li>
            <li class="breadcrumb-item"><a href="#">${product.category.name}</a></li>
            <li class="breadcrumb-item active">${product.name}</li>
        `;
    }
}

function updateProductImages(images) {
    const mainImage = document.getElementById('mainImage');
    const thumbnailContainer = document.querySelector('.thumbnail-container');
    
    if (images && images.length > 0) {
        // Update main image with error handling
        mainImage.src = images[0].url;
        mainImage.alt = images[0].altText || 'Product image';
        mainImage.onerror = function() {
            this.src = '/user/images/logo.png';
        };
        
        // Update thumbnails with error handling
        thumbnailContainer.innerHTML = images.map((img, index) => `
            <img src="${img.url}" 
                 alt="${img.altText || `Thumbnail ${index + 1}`}" 
                 class="thumbnail ${index === 0 ? 'active' : ''}" 
                 onerror="this.src='/user/images/logo.png'"
                 onclick="changeMainImage(this)">
        `).join('');
    }
}

function updateProductInfo(product, variant) {
    // Update brand name
    document.querySelector('.brand-name').textContent = product.brand.name;
    
    // Update product title
    document.querySelector('.product-title').textContent = product.name;
    
    // Update description
    document.querySelector('.product-description p').innerHTML = product.description;
    
    // You can add more specific product details based on variant.attributes
    updateProductAttributes(variant);
}

function updateProductAttributes(variant) {
    const descriptionSection = document.querySelector('.product-description');
    let attributesHtml = '<h5 class="mt-4">Product Details:</h5><ul>';
    
    if (variant.attributes) {
        // Handle different attribute formats
        let attrs;
        if (variant.attributes instanceof Map) {
            attrs = Object.fromEntries(variant.attributes);
        } else if (typeof variant.attributes === 'object') {
            attrs = variant.attributes;
        } else {
            attrs = {};
        }
        
        // Iterate through attributes safely
        for (const [key, value] of Object.entries(attrs)) {
            attributesHtml += `<li><strong>${key}:</strong> ${value}</li>`;
        }
    }
    
    attributesHtml += `<li><strong>UOM:</strong> ${variant.uom}</li>`;
    
    if (variant.manufacturingDate) {
        attributesHtml += `<li><strong>Manufacturing Date:</strong> ${new Date(variant.manufacturingDate).toLocaleDateString()}</li>`;
    }
    
    if (variant.expiryDate) {
        attributesHtml += `<li><strong>Expiry Date:</strong> ${new Date(variant.expiryDate).toLocaleDateString()}</li>`;
    }
    
    attributesHtml += '</ul>';
    
    // Find and replace existing attributes section or append
    const existingDetails = descriptionSection.querySelector('h5');
    if (existingDetails && existingDetails.textContent.includes('Product Details')) {
        // Replace existing details
        const detailsSection = existingDetails.parentNode;
        const newDiv = document.createElement('div');
        newDiv.innerHTML = attributesHtml;
        detailsSection.replaceChild(newDiv, existingDetails.nextElementSibling);
        detailsSection.replaceChild(newDiv.firstElementChild, existingDetails);
    } else {
        // Append to existing description
        descriptionSection.innerHTML += attributesHtml;
    }
}

function updatePricing(variant) {
    const currentPrice = document.querySelector('.current-price');
    const originalPrice = document.querySelector('.original-price');
    const discountBadge = document.querySelector('.discount-badge');
    
    currentPrice.textContent = `₹${variant.salesPrice || variant.regularPrice}`;
    
    if (variant.salesPrice && variant.salesPrice < variant.regularPrice) {
        originalPrice.textContent = `₹${variant.regularPrice}`;
        originalPrice.style.display = 'inline';
        
        const discount = Math.round((1 - variant.salesPrice / variant.regularPrice) * 100);
        discountBadge.textContent = `${discount}% off`;
        discountBadge.style.display = 'inline';
    } else {
        if (originalPrice) originalPrice.style.display = 'none';
        if (discountBadge) discountBadge.style.display = 'none';
    }
    
    // Force a reflow to ensure DOM updates are applied
    if (currentPrice) currentPrice.offsetHeight;
}

function updateStockStatus(variant) {
    currentStock = variant.stock;
    const stockElement = document.getElementById('stockStatus');
    const addToCartBtn = document.getElementById('addToCartBtn');
    const incrementBtn = document.getElementById('incrementBtn');
    const decrementBtn = document.getElementById('decrementBtn');

    if (currentStock > 6) {
        stockElement.innerHTML = `<i class="fas fa-check-circle"></i> In Stock - ${currentStock} units available`;
        stockElement.className = 'in-stock';
        addToCartBtn.disabled = false;
    } else if (currentStock > 0 && currentStock <= 6) {
        stockElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> Only few items left - ${currentStock} units available`;
        stockElement.className = 'in-stock';
        stockElement.style.color = '#f39c12';
        addToCartBtn.disabled = false;
    } else {
        stockElement.innerHTML = `<i class="fas fa-times-circle"></i> Out of Stock<br><small style="font-weight: normal;">This item is currently unavailable</small>`;
        stockElement.className = 'out-of-stock';
        addToCartBtn.disabled = true;
    }
    if (incrementBtn && decrementBtn) {
        incrementBtn.disabled = currentQuantity >= Math.min(currentStock, 10) || currentStock <= 0;
        decrementBtn.disabled = currentQuantity <= 1;
    }
}

function updatePrescriptionRequirement(required) {
    const prescriptionSection = document.querySelector('.prescription-section');
    
    if (prescriptionSection) {  // Add null check
        if (required) {
            prescriptionSection.style.display = 'flex';
        } else {
            prescriptionSection.style.display = 'none';
            prescriptionUploaded = true; // No prescription needed
        }
    } else if (required) {
        // If prescription is required but section doesn't exist, create it
        console.warn('Prescription required but section not found');
    }
    
    // Update global state regardless
    if (!required) {
        prescriptionUploaded = true;
    }
}

let currentCarouselIndex = 0;
let totalProducts = 0;
const productsPerPage = 6;

function updateRelatedProducts(relatedProducts) {
    const carousel = document.getElementById('productsCarousel');
    totalProducts = relatedProducts ? relatedProducts.length : 0;
    
    if (relatedProducts && relatedProducts.length > 0) {
        const relatedHtml = relatedProducts.map(product => {
            const discountPercentage = product.salesPrice && product.salesPrice < product.regularPrice ? 
                Math.round((1 - product.salesPrice / product.regularPrice) * 100) : 0;
            
            return `
                <div class="product-card-carousel" onclick="window.location.href='/products/details/${product.id}?variantIndex=${product.variantIndex || 0}'">
                    <div>
                        <img src="${product.images && product.images.length > 0 ? product.images[0].url || product.images[0] : '/user/images/logo.png'}" 
                             alt="${product.name}" 
                             onerror="this.src='/user/images/logo.png'">
                        <div class="brand-name">${product.brand?.name || ''}</div>
                        <div class="product-name">${product.name}</div>
                    </div>
                    <div class="price-section">
                        <div class="current-price">₹${product.salesPrice || product.regularPrice}</div>
                        ${product.salesPrice && product.salesPrice < product.regularPrice ? 
                            `<span class="original-price">₹${product.regularPrice}</span>` : ''}
                        ${discountPercentage > 0 ? 
                            `<div class="offer-badge">${discountPercentage}% OFF</div>` : ''}
                    </div>
                </div>
            `;
        }).join('');
        
        carousel.innerHTML = relatedHtml;
        updateCarouselControls();
    } else {
        carousel.innerHTML = '<p class="text-center">No related products found.</p>';
    }
}

function scrollCarousel(direction) {
    const carousel = document.getElementById('productsCarousel');
    const cardWidth = 215; // 200px + 15px gap
    
    if (direction === 'next') {
        if (currentCarouselIndex + productsPerPage < totalProducts) {
            currentCarouselIndex += Math.min(productsPerPage, totalProducts - currentCarouselIndex - productsPerPage);
        }
    } else {
        currentCarouselIndex = Math.max(0, currentCarouselIndex - productsPerPage);
    }
    
    carousel.style.transform = `translateX(-${currentCarouselIndex * cardWidth}px)`;
    updateCarouselControls();
}

function updateCarouselControls() {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    prevBtn.disabled = currentCarouselIndex === 0;
    nextBtn.disabled = currentCarouselIndex + productsPerPage >= totalProducts;
}

        function populateVariants(allVariants, currentIndex, distinguishingAttrs) {
    console.log('populateVariants called with:', {
        variantsCount: allVariants?.length,
        currentIndex,
        distinguishingAttrs,
        firstVariant: allVariants?.[0]
    });
    
    const variantSelector = document.getElementById('variantSelector');
    const variantOptions = document.getElementById('variantOptions');
    
    if (!variantSelector || !variantOptions) {
        console.error('Variant selector elements not found');
        return;
    }
    
    // Filter only active variants (isListed = true)
    const activeVariants = allVariants ? allVariants.filter(variant => variant.isListed !== false) : [];

    console.log('Active variants:', activeVariants);

    if (activeVariants && activeVariants.length > 0) {
        console.log('Showing variants for multiple active options');
        
        variantSelector.style.display = 'block';
        
        const variantHtml = activeVariants.map((variant) => {
            const isActive = variant.variantIndex === currentIndex;
            const isOutOfStock = variant.stock <= 0;
            const priceText = variant.salesPrice ? `₹${variant.salesPrice}` : `₹${variant.regularPrice}`;
            
            // Get variant attribute label
            const variantAttribute = getVariantAttributeLabel(variant.attributes, distinguishingAttrs);
            
            // Get first image
            const firstImage = variant.images && variant.images.length > 0 ? 
                variant.images[0].url : 
                '/user/images/logo.png';
            
            return `
    <div class="variant-option ${isActive ? 'active' : ''} ${isOutOfStock ? 'out-of-stock' : ''}" 
         onclick="${isOutOfStock ? '' : `selectVariant(${variant.variantIndex})`}" 
         data-variant-index="${variant.variantIndex}">
        <div class="variant-image">
            <img src="${firstImage}" 
                 alt="Variant ${variant.variantIndex}" 
                 onerror="this.src='/user/images/logo.png'">
        </div>
        <div class="variant-info">
            <div class="variant-attribute">${variantAttribute}</div>
            <div class="variant-price">${priceText}</div>
            <div class="variant-stock-status">${isOutOfStock ? 'Out of Stock' : 'In Stock'}</div>
        </div>
        ${isOutOfStock ? '<div class="out-of-stock-label">Out of Stock</div>' : ''}
    </div>
`;
        }).join('');
        
        variantOptions.innerHTML = variantHtml;
    } else {
        console.log('Single active variant, hiding selector');
        variantSelector.style.display = 'none';
    }
}

function getVariantAttributeLabel(attributes, distinguishingAttrs) {
    const attrs = getAttributesObject(attributes);
    console.log('Processing attributes:', attrs); // Debug log
    
    // Remove ingredients from attributes object
    const filteredAttrs = { ...attrs };
    delete filteredAttrs.ingredients;
    
    // First try distinguishing attributes from category (excluding ingredients)
    if (distinguishingAttrs && distinguishingAttrs.length > 0) {
        for (const attr of distinguishingAttrs) {
            if (filteredAttrs[attr] && attr !== 'ingredients') {
                return `${attr.toUpperCase()}: ${filteredAttrs[attr]}`;
            }
        }
    }
    
    // Fallback: look for specific variant attributes (mg, ml, kg, size, color)
    const priorityKeys = ['mg', 'ml', 'kg', 'size', 'color'];
    for (const key of priorityKeys) {
        if (filteredAttrs[key]) {
            return `${key.toUpperCase()}: ${filteredAttrs[key]}`;
        }
    }
    
    // Look for any non-ingredients attribute
    const entries = Object.entries(filteredAttrs);
    if (entries.length > 0) {
        const [key, value] = entries[0];
        return `${key.toUpperCase()}: ${value}`;
    }
    
    return 'Standard';
}

//this helper function
function getAttributesObject(attributes) {
    if (!attributes) return {};
    
    console.log('Raw attributes:', attributes); // Debug log to see structure
    
    // Handle MongoDB Map type - it often comes as an object with $__ properties
    if (typeof attributes === 'object') {
        // Check if it has a direct structure we can use
        if (attributes._doc) {
            return attributes._doc;
        }
        
        // Check if it's a plain object with the data we need
        const keys = Object.keys(attributes);
        const hasMongooseProps = keys.some(key => key.startsWith('$') || key.startsWith('_'));
        
        if (!hasMongooseProps && keys.length > 0) {
            return attributes;
        }
        
        // Try to extract from mongoose map structure
        if (attributes instanceof Map) {
            return Object.fromEntries(attributes);
        }
        
        // Handle mongoose document map
        if (typeof attributes.toJSON === 'function') {
            return attributes.toJSON();
        }
        
        // Last resort - try to find the actual data
        for (const key of keys) {
            if (!key.startsWith('$') && !key.startsWith('_') && typeof attributes[key] !== 'function') {
                return attributes;
            }
        }
    }
    
    return {};
}

        function selectVariant(variantIndex) {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('variantIndex', variantIndex);
            // Also update the global productData
            productData.currentVariantIndex = variantIndex;
                        
            // Show loading state
            const loadingOverlay = document.createElement('div');
            loadingOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(255,255,255,0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                
            `;
            loadingOverlay.innerHTML = '<i class="fas fa-spinner fa-spin fa-2x"></i>';
            document.body.appendChild(loadingOverlay);
            
            // Fetch new variant data
            fetch(currentUrl.href, {
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update URL without page reload
                    window.history.pushState({}, '', currentUrl.href);
                    
                    // Update all product data
                    populateProductData(data);
                    
                    // Re-initialize image zoom
                    setTimeout(() => {
                        initializeImageZoom();
                    }, 100);
                    
                    showSuccessMessage('Variant updated successfully!');
                } else {
                    showErrorMessage('Failed to load variant data .then');
                }
            })
            .catch(error => {
                console.error('Error selecting variant:', error);
                showErrorMessage('Failed to load variant data .catch');
            })
            .finally(() => {
                document.body.removeChild(loadingOverlay);
            });
        }

        window.addEventListener('resize', function() {
            if (window.innerWidth <= 768) {
                document.getElementById('zoomResult').style.display = 'none';
                document.getElementById('zoomLens').style.display = 'none';
            }
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                if (e.target.classList.contains('variant-option') || e.target.classList.contains('size-option')) {
                    e.preventDefault();
                    e.target.click();
                }
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.variant-option, .size-option').forEach(option => {
                option.setAttribute('tabindex', '0');
                option.setAttribute('role', 'button');
                option.setAttribute('aria-label', option.textContent + ' option');
            });
        });

        // Temporary debug function - call this in console to see data
window.debugProductData = function() {
    fetch(window.location.pathname + window.location.search, {
        headers: { 'Accept': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
        console.log('=== PRODUCT DEBUG ===');
        console.log('Full response:', data);
        console.log('All variants:', data.product?.allVariants);
        console.log('Current variant:', data.product?.variant);
        console.log('Distinguishing attrs:', data.product?.distinguishingAttributes);
        console.log('Category:', data.product?.category?.name);
        
        // Check if variants have different distinguishing attributes
        if (data.product?.allVariants?.length > 1) {
            console.log('=== VARIANT COMPARISON ===');
            data.product.allVariants.forEach((variant, index) => {
                console.log(`Variant ${index}:`, {
                    attributes: variant.attributes,
                    stock: variant.stock,
                    price: variant.salesPrice || variant.regularPrice,
                    ingredients: variant.ingredients
                });
            });
        }
    });
};

function updateQuantity(action) {
    const quantityDisplay = document.getElementById('quantityDisplay');
    const incrementBtn = document.getElementById('incrementBtn');
    const decrementBtn = document.getElementById('decrementBtn');
    
    if (action === 'increment' && currentQuantity < Math.min(currentStock, 10)) {
        currentQuantity++;
    } else if (action === 'decrement' && currentQuantity > 1) {
        currentQuantity--;
    }
    
    quantityDisplay.textContent = currentQuantity;
    decrementBtn.disabled = currentQuantity <= 1;
    incrementBtn.disabled = currentQuantity >= Math.min(currentStock, 10) || currentStock <= 0;
}

//Check if product is in cart on page load
async function checkCartStatus() {
    try {
        const response = await fetch('/cart/count');
        const data = await response.json();
    
    } catch (error) {
        console.error('Error checking cart status:', error);
    }
}


function updatePrescriptionUI(status, patientName, prescriptionData = null) {
    const prescriptionBtn = document.getElementById('prescriptionBtn');
    const prescriptionStatus = document.getElementById('prescriptionStatus');
    const prescriptionUploadStatus = document.getElementById('prescriptionUploadStatus');
    const patientNameDisplay = document.getElementById('patientNameDisplay');

    // Populate existing prescription data if available
    if (prescriptionData) {
        populateExistingPrescription(prescriptionData);
    }

    switch(status.toLowerCase()) {
        case 'verified':
            prescriptionUploaded = true;
            prescriptionBtn.classList.add('uploaded');
            prescriptionBtn.innerHTML = '<i class="fas fa-check-circle"></i> Prescription Verified';
            prescriptionStatus.className = 'prescription-status accepted';
            prescriptionStatus.innerHTML = '<i class="fas fa-check-circle"></i> Verified';
            prescriptionUploadStatus.innerHTML = `<small class="text-success"><i class="fas fa-check-circle"></i> Your prescription has been verified and approved.</small>`;
            break;
            
        case 'pending':
            prescriptionUploaded = false;
            prescriptionStatus.className = 'prescription-status pending';
            prescriptionStatus.innerHTML = '<i class="fas fa-clock"></i> Pending Review';
            prescriptionUploadStatus.innerHTML = `<small class="text-warning"><i class="fas fa-clock"></i> You can know the result within 1 hour.</small>`;
            break;
            
        case 'rejected':
            prescriptionUploaded = false;
            prescriptionStatus.className = 'prescription-status rejected';
            prescriptionStatus.innerHTML = `
                <i class="fas fa-times-circle"></i> Rejected 
                <button class="btn btn-sm btn-outline-danger ms-2" onclick="showRejectionReason()">
                    <i class="fas fa-exclamation-circle"></i> View Reason
                </button>`;
            prescriptionUploadStatus.innerHTML = `<small class="text-danger"><i class="fas fa-times-circle"></i> Your prescription was rejected. Please upload a new one. </small>`;
            break;
            
        case 'expired':
            prescriptionUploaded = false;
            prescriptionStatus.className = 'prescription-status rejected';
            prescriptionStatus.innerHTML = '<i class="fas fa-calendar-times"></i> Expired';
            prescriptionUploadStatus.innerHTML = `<small class="text-danger"><i class="fas fa-calendar-times"></i> Your prescription has expired. Please upload a new one.</small>`;
            break;
    }
    
    prescriptionStatus.style.display = 'inline-block';
    prescriptionUploadStatus.style.display = 'block';
}

function populateExistingPrescription(prescriptionData) {
    const existingSection = document.getElementById('existingPrescriptionSection');
    
    document.getElementById('existingDoctorName').textContent = prescriptionData.doctorName;
    document.getElementById('existingHospitalName').textContent = prescriptionData.hospitalName || 'N/A';
    document.getElementById('existingPatientName').textContent = prescriptionData.patientName;
    document.getElementById('existingMedicineName').textContent = prescriptionData.medicineName;
    document.getElementById('existingUom').textContent = prescriptionData.uom;
    document.getElementById('existingPrescriptionDate').textContent = new Date(prescriptionData.prescriptionDate).toLocaleDateString();
    document.getElementById('existingExpiryDate').textContent = new Date(prescriptionData.expiryDate).toLocaleDateString();
    document.getElementById('existingStatus').textContent = prescriptionData.status;
    
    // Show prescription image if available
    if (prescriptionData.prescriptionImages && prescriptionData.prescriptionImages.length > 0) {
        document.getElementById('existingPrescriptionImage').innerHTML = `
            <img src="${prescriptionData.prescriptionImages[0].url}" 
                 alt="Existing Prescription" 
                 class="prescription-preview" 
                 onclick="window.open('${prescriptionData.prescriptionImages[0].url}', '_blank')">
            <p><small class="text-muted">Click to view full image</small></p>
        `;
    }
    
    existingSection.style.display = 'block';
}

function showRejectionReason() {
    const reason = productData.prescriptionStatus?.rejectionReason || 'No reason provided';
    
    // Create a small popup div
    const popup = document.createElement('div');
    popup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        z-index: 10000;
        max-width: 400px;
        border-left: 4px solid #dc3545;
    `;
    
    popup.innerHTML = `
        <h6><i class="fas fa-exclamation-triangle text-danger"></i> Rejection Reason</h6>
        <p>${reason}</p>
        <button class="btn btn-sm btn-secondary" onclick="this.parentElement.remove()">Close</button>
    `;
    
    document.body.appendChild(popup);
    
    // Auto remove after 10 seconds
    setTimeout(() => {
        if (popup.parentElement) {
            popup.remove();
        }
    }, 10000);
}


    </script>
</body>
</html>;