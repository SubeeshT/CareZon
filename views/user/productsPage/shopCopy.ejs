<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CareZon</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/user/css/headerAndFooter.css">

<style>
    :root {
        --primary-color: #007bff;
        --secondary-color: #264653;
        --light-color: #f8f9fa;
        --dark-color: #212529;
    }
    body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        padding-top: 80px;
        background-color: #f8f9fa;
        line-height: 1.6;
        overflow-x: hidden;
        overflow-y: auto;
    }
    .main-content {
        padding: 40px 0;
    }
    .container-fluid {
        padding-left: 15px;
        padding-right: 15px;
        position: relative;
    }
    .page-title {
        text-align: center;
        margin-bottom: 40px;
        font-weight: 600;
        color: #333;
        animation: fadeInUp 0.8s ease;
    }
    body.shop-page .navbar .search-container {
    display: none !important;
}

    .shop-search-section {
        margin-bottom: 40px;
        animation: fadeInUp 0.8s ease 0.2s both;
        position: relative;
        z-index: 1000;
    }
    .shop-search-container {
        position: relative;
        max-width: 600px;
        margin: 0 auto;
        z-index: 1050;
        isolation: isolate;
    }
    .shop-search-input {
        width: 100%;
        padding: 15px 90px 15px 20px;
        border: 2px solid #e9ecef;
        border-radius: 50px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    .shop-search-input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
    }
    .shop-search-btn {
        position: absolute;
        right: 45px;
        top: 50%;
        transform: translateY(-50%);
        background: #007bff;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .shop-search-btn:hover {
        background: #0056b3;
        transform: translateY(-50%) scale(1.05);
    }
    .shop-search-cancel {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        background: #dc3545;
        border: none;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        display: none;
    }
    .shop-search-cancel:hover {
        background: #c82333;
        transform: translateY(-50%) scale(1.05);
    }
    .shop-search-history {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        z-index: 1060;
        max-height: 300px;
        overflow-y: auto;
        display: none;
        animation: slideDown 0.3s ease;
    }
    .shop-search-history-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        cursor: pointer;
        transition: background 0.2s ease;
        border-bottom: 1px solid #f8f9fa;
        background-color: white;
    }
    .shop-search-history-item:hover {
        background: #f8f9fa;
    }
    .shop-search-history-item:last-child {
        border-bottom: none;
    }
    .history-item-image {
        width: 35px;
        height: 35px;
        object-fit: cover;
        border-radius: 5px;
        margin-right: 12px;
        background-color: #f8f9fa;
    }
    .history-item-text {
        flex: 1;
        font-size: 14px;
        color: #333;
    }
    .shop-search-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        z-index: 1060;
        max-height: 300px;
        overflow-y: auto;
        display: none;
        animation: slideDown 0.3s ease;
    }
    .shop-suggestion-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        cursor: pointer;
        transition: background 0.2s ease;
        border-bottom: 1px solid #f8f9fa;
        background-color: white;
    }
    .shop-suggestion-item:hover {
        background: #f8f9fa;
    }
    .shop-suggestion-item:last-child {
        border-bottom: none;
    }
    .suggestion-item-image {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 5px;
        margin-right: 12px;
    }
    .suggestion-item-details {
        flex: 1;
    }
    .suggestion-item-name {
        font-size: 14px;
        font-weight: 500;
        color: #333;
        margin-bottom: 2px;
    }
    .suggestion-item-price {
        font-size: 12px;
        color: #007bff;
    }
   .filter-section {
    background: white;
    border-radius: 10px;
    padding: 25px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    margin-bottom: 30px;
    animation: fadeInLeft 0.8s ease 0.3s both;
    height: auto; 
    max-height: none; 
    overflow: visible; 
    position: static;
    top: auto;
    z-index: 1;
}
    .filter-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .filter-title {
        font-weight: 600;
        color: #333;
        margin: 0;
    }
    .clear-filters {
        color: #007bff;
        text-decoration: none;
        font-weight: 500;
        cursor: pointer;
        transition: color 0.3s ease;
        display: none;
    }
    .clear-filters.show {
        display: inline-block;
    }
    .clear-filters:hover {
        color: #0056b3;
    }
    .active-filters {
        margin-bottom: 20px;
    }
    .filter-tag {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: #f8f9fa;
        padding: 8px 12px;
        border-radius: 6px;
        margin: 8px 0;
        font-size: 0.9rem;
        animation: fadeIn 0.3s ease;
        border: 1px solid #e9ecef;
    }
    .filter-tag-text {
        flex: 1;
        color: #333;
    }
    .remove-filter {
        margin-left: 10px;
        cursor: pointer;
        color: #666;
        font-size: 1rem;
        padding: 2px;
        transition: color 0.2s ease;
    }
    .remove-filter:hover {
        color: #dc3545;
    }
    .filter-group {
        margin-bottom: 25px;
        border-bottom: 1px solid #000000;
        padding-bottom: 20px;
    }
    .filter-group:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }
    .filter-group-title {
        font-weight: 600;
        color: #333;
        margin-bottom: 15px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
        transition: color 0.3s ease;
        padding: 5px 0;
    }
    .filter-group-title i {
        transition: transform 0.3s ease;
    }
    .filter-group-title[aria-expanded="false"] i {
        transform: rotate(-90deg);
    }
    .filter-group-title[aria-expanded="true"] i {
        transform: rotate(0deg);
    }
    .filter-options {
        max-height: 200px;
        overflow-y: auto;
        overflow-x: hidden;
        transition: all 0.3s ease;
    }
    .filter-option {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 2px 0;
    }
    .filter-option input[type="checkbox"] {
        margin-right: 10px;
        transform: scale(1.2);
    }
    .filter-option label {
        cursor: pointer;
        margin: 0;
    }
    .price-range {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 10px;
    }
    .price-input {
        flex: 1;
        padding: 8px 12px;
        border: 1px solid #e9ecef;
        border-radius: 5px;
        font-size: 0.9rem;
    }
    .rating-filter {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 2px 0;
    }
    .rating-filter input[type="checkbox"] {
        margin-right: 10px;
        transform: scale(1.2);
    }
    .rating-stars {
        display: flex;
        gap: 2px;
        margin-right: 8px;
    }
    .rating-stars i {
        color: #ffc107;
        font-size: 0.9rem;
    }
    .rating-text {
        font-size: 0.9rem;
        color: #666;
    }
    .products-section {
        animation: fadeInRight 0.8s ease 0.4s both;
        position: relative;
        z-index: 1;
    }
    .products-header {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 15px;
    }
    .sort-select {
        padding: 8px 15px;
        border: 1px solid #e9ecef;
        border-radius: 5px;
        background: white;
        cursor: pointer;
    }
    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
        margin-bottom: 50px;
    }
    @media (min-width: 1400px) {
        .products-grid {
            grid-template-columns: repeat(4, 1fr);
        }
    }
    @media (min-width: 1200px) and (max-width: 1399px) {
        .products-grid {
            grid-template-columns: repeat(4, 1fr);
        }
    }
    @media (min-width: 992px) and (max-width: 1199px) {
        .products-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }
    .product-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        animation: fadeInUp 0.6s ease;
        position: relative;
        pointer-events: auto !important;
    }
    .product-card * {
    pointer-events: none; /* Prevent child elements from blocking clicks */
}
.product-card {
    pointer-events: auto !important; /* Re-enable on the card itself */
}
    .product-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        cursor: pointer;
    }
    .product-image {
        position: relative;
        overflow: hidden;
        height: 250px;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .product-card:hover .product-image img {
        transform: scale(1.05);
    }
    .wishlist-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    z-index: 10;
}

.wishlist-btn:hover {
    background: #dc3545;
    color: white;
    transform: scale(1.1);
}

.wishlist-btn.active {
    background: #dc3545;
    color: white;
}
    .product-info {
        padding: 20px;
    }
    .product-brand {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 5px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .product-name {
    font-weight: 600;
    color: #333;
    margin-bottom: 15px;
    font-size: 1.1rem;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    height: 4.1rem; 
    min-height: 4.1rem; 
}

.discount-badge {
    background: #ff4444;
    color: white;
    padding: 3px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    display: inline-block;
    margin-bottom: 8px;
}
    .product-rating {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        gap: 5px;
    }
    .product-rating .stars {
        display: flex;
        gap: 2px;
    }
    .product-rating .stars i {
        color: #ffc107;
        font-size: 0.9rem;
    }
    .product-rating .rating-text {
        font-size: 0.8rem;
        color: #666;
    }
    .product-price {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 15px;
    }
    .price-current {
        font-weight: 700;
        color: #333;
        font-size: 1.2rem;
    }
    .price-original {
        color: #999;
        text-decoration: line-through;
        font-size: 0.9rem;
        margin-left: 10px;
    }
    .add-to-cart-btn {
        width: 100%;
        padding: 12px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }
    .add-to-cart-btn:hover {
        background: #0056b3;
        transform: translateY(-2px);
    }
    .add-to-cart-btn:active {
        transform: translateY(0);
    }
    .popup-message {
        position: fixed;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%) translateY(100px);
        background: #28a745;
        color: white;
        padding: 15px 25px;
        border-radius: 50px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        opacity: 0;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .popup-message.show {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
    }
    .popup-message.error {
        background: #dc3545;
    }
    .filter-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        display: none;
        animation: fadeIn 0.3s ease;
    }
    .filter-modal-content {
        position: absolute;
        top: 0;
        right: 0;
        width: 350px;
        height: 100%;
        background: white;
        padding: 30px;
        overflow-y: auto;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    }
    .filter-modal.show .filter-modal-content {
        transform: translateX(0);
    }
    .filter-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 1px solid #e9ecef;
    }
    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
        transition: color 0.3s ease;
    }
    .close-modal:hover {
        color: #333;
    }
    .mobile-filter-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        font-size: 1.2rem;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
        z-index: 1000;
        display: none;
    }
    .mobile-filter-btn:hover {
        background: #0056b3;
        transform: scale(1.1);
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    @keyframes fadeInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    @keyframes fadeInRight {
        from {
            opacity: 0;
            transform: translateX(30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    @media (max-width: 768px) {
        .filter-section {
            display: none;
        }
        .mobile-filter-btn {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .products-grid {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        .products-header {
            flex-direction: column;
            align-items: stretch;
        }
        .filter-modal-content {
            width: 100%;
        }
        .main-content {
            padding: 20px 0;
        }
    }
    @media (max-width: 576px) {
        .products-grid {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        .product-info {
            padding: 15px;
        }
        .shop-search-input {
            padding: 12px 90px 12px 15px;
        }
        .container-fluid {
            padding-left: 10px;
            padding-right: 10px;
        }
    }
    .loading {
        display: none;
        text-align: center;
        padding: 50px;
    }
    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .pagination-custom {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background-color: #fff;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
        font-size: 14px;
        color: #666;
    }
    .pagination-buttons {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    .page-btn {
        width: 30px;
        height: 30px;
        border: 1px solid #e0e0e0;
        background-color: #fff;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        color: #333;
        transition: all 0.3s ease;
    }
    .page-btn:hover:not(.disabled) {
        background-color: #f0f0f0;
    }
    .page-btn.active {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
    }
    .page-btn.disabled {
        background-color: #f0f0f0;
        color: #ccc;
        cursor: not-allowed;
        border-color: #e0e0e0;
    }
    .row {
        margin: 0;
        overflow: visible;
    }
    .col-lg-3 {
        padding-left: 0;
        padding-right: 15px;
        overflow: visible;
    }
    .col-lg-9 {
        padding-left: 15px;
        padding-right: 0;
        overflow: visible;
    }
    .container-fluid {
        padding-left: 15px;
        padding-right: 15px;
        overflow: visible;
    }
    .main-content {
        padding: 40px 0;
        overflow: visible;
    }
    body.shop-page .search-container {
        display: none !important;
    }
</style>
</head>
<body>

<%-include("../../views/partials/user/header.ejs")%>

    <main class="main-content">
        <div class="container-fluid">
            <div class="shop-search-section">
                <div class="shop-search-container">
                    <input type="text" class="shop-search-input" id="shopSearchInput" placeholder="Search for products in this collection" value="<%= filters.search || '' %>">
                    <button class="shop-search-btn" id="shopSearchBtn">
                        <i class="fas fa-search"></i>
                    </button>
                    <button class="shop-search-cancel" id="shopSearchCancel">
                        <i class="fas fa-times"></i>
                    </button>
                    <div class="shop-search-history" id="shopSearchHistory"></div>
                    <div class="shop-search-suggestions" id="shopSearchSuggestions"></div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-3">
                    <div class="filter-section" id="filterSection">
                        <div class="filter-header">
                            <h5 class="filter-title">Refine By</h5>
                            <a href="#" class="clear-filters" id="clearFilters">Clear All</a>
                        </div>
                        <div class="active-filters" id="activeFilters"></div>
                        
                        <div class="filter-group">
                            <div class="filter-group-title" data-bs-toggle="collapse" data-bs-target="#priceFilter" aria-expanded="true">
                                <span>Price</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div class="collapse show" id="priceFilter">
                                <div class="price-range">
                                    <input type="number" class="price-input" id="minPrice" placeholder="Min" value="<%= filters.minPrice || '' %>">
                                </div>
                                <div class="price-range">
                                    <input type="number" class="price-input" id="maxPrice" placeholder="Max" value="<%= filters.maxPrice || '' %>">
                                </div>
                            </div>
                        </div>

                        <div class="filter-group">
                            <div class="filter-group-title" data-bs-toggle="collapse" data-bs-target="#brandFilter" aria-expanded="true">
                                <span>Brand</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div class="collapse show" id="brandFilter">
                                <div class="filter-options">
                                    <% brands.forEach(brand => { %>
                                        <div class="filter-option">
                                            <input type="checkbox" id="brand-<%= brand._id %>" value="<%= brand._id %>" <%= filters.brands && filters.brands.includes(brand._id.toString()) ? 'checked' : '' %>>
                                            <label for="brand-<%= brand._id %>"><%= brand.name %></label>
                                        </div>
                                    <% }) %>
                                </div>
                            </div>
                        </div>

                        <div class="filter-group">
                            <div class="filter-group-title" data-bs-toggle="collapse" data-bs-target="#categoryFilter" aria-expanded="true">
                                <span>Category</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div class="collapse show" id="categoryFilter">
                                <div class="filter-options">
                                    <% categories.forEach(category => { %>
                                        <div class="filter-option">
                                            <input type="checkbox" id="category-<%= category._id %>" value="<%= category._id %>" <%= filters.categories && filters.categories.includes(category._id.toString()) ? 'checked' : '' %>>
                                            <label for="category-<%= category._id %>"><%= category.name %></label>
                                        </div>
                                    <% }) %>
                                </div>
                            </div>
                        </div>

                        <div class="filter-group">
                            <div class="filter-group-title" data-bs-toggle="collapse" data-bs-target="#ratingFilter" aria-expanded="true">
                                <span>Rating</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div class="collapse show" id="ratingFilter">
                                <div class="filter-options">
                                    <div class="rating-filter">
                                        <input type="checkbox" id="rating5" value="5" <%= filters.rating === 5 ? 'checked' : '' %>>
                                        <div class="rating-stars">
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                        </div>
                                        <span class="rating-text">5 Stars</span>
                                    </div>
                                    <div class="rating-filter">
                                        <input type="checkbox" id="rating4" value="4" <%= filters.rating === 4 ? 'checked' : '' %>>
                                        <div class="rating-stars">
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="far fa-star"></i>
                                        </div>
                                        <span class="rating-text">4+ Stars</span>
                                    </div>
                                    <div class="rating-filter">
                                        <input type="checkbox" id="rating3" value="3" <%= filters.rating === 3 ? 'checked' : '' %>>
                                        <div class="rating-stars">
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="far fa-star"></i>
                                            <i class="far fa-star"></i>
                                        </div>
                                        <span class="rating-text">3+ Stars</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-9">
                    <div class="products-section">
                        <div class="products-header">
                            <div class="d-flex align-items-center gap-3">
                                <span>Sort by:</span>
                                <select class="sort-select" id="sortSelect">
                                    <option value="newest" <%= filters.sort === 'newest' ? 'selected' : '' %>>Newest</option>
                                    <option value="price_low_high" <%= filters.sort === 'price_low_high' ? 'selected' : '' %>>Price: Low to High</option>
                                    <option value="price_high_low" <%= filters.sort === 'price_high_low' ? 'selected' : '' %>>Price: High to Low</option>
                                    <option value="name_asc" <%= filters.sort === 'name_asc' ? 'selected' : '' %>>Name: A to Z</option>
                                    <option value="name_desc" <%= filters.sort === 'name_desc' ? 'selected' : '' %>>Name: Z to A</option>
                                </select>
                            </div>
                        </div>

                        <div class="loading" id="loading">
                            <div class="spinner"></div>
                            <p>Loading products...</p>
                        </div>

                        <div class="products-grid" id="productsGrid">
                            <% if (products && products.length > 0) { %>
                                <% products.forEach(product => { %>
                                    <div class="product-card" onclick="window.location.href='/products/details/<%= product._id %>'" style="cursor: pointer;">
                                    <div class="product-image">
                                        <img src="<%= product.activeVariant.images[0]?.url || '/default-image.jpg' %>" alt="<%= product.name %>" loading="lazy">
                                        <button class="wishlist-btn" onclick="event.stopPropagation(); toggleWishlist('<%= product._id %>')">
                                            <i class="far fa-heart"></i>
                                        </button>
                                    </div>
                                    <div class="product-info">
                                        <div class="product-brand"><%= product.brand.name.toUpperCase() %></div>
                                        <h6 class="product-name"><%= product.name %></h6>
                                        <div class="product-rating">
                                            <div class="stars">
                                                <% for (let i = 0; i < 5; i++) { %>
                                                    <i class="<%= i < Math.floor(product.averageRating || 0) ? 'fas' : 'far' %> fa-star"></i>
                                                <% } %>
                                            </div>
                                            <span class="rating-text">(<%= (product.averageRating || 0).toFixed(1) %>)</span>
                                        </div>
                                        <% if (product.activeVariant.regularPrice > product.activeVariant.salesPrice) { %>
                                            <div class="discount-badge"><%= Math.round(((product.activeVariant.regularPrice - product.activeVariant.salesPrice) / product.activeVariant.regularPrice) * 100) %>% off</div>
                                        <% } %>
                                        <div class="product-price">
                                            <div>
                                                <span class="price-current">₹<%= product.activeVariant.salesPrice.toLocaleString() %></span>
                                                <% if (product.activeVariant.regularPrice > product.activeVariant.salesPrice) { %>
                                                    <span class="price-original">₹<%= product.activeVariant.regularPrice.toLocaleString() %></span>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <% }) %>
                            <% } else { %>
                                <div class="col-12 text-center py-5">
                                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                                    <h4>No products found</h4>
                                    <p class="text-muted">Try adjusting your filters or search terms</p>
                                </div>
                            <% } %>
                        </div>

                        <div class="pagination mt-4 text-center" id="pagination">
                            <% if (pagination) { %>
                                <div class="pagination-custom">
                                    <span>Showing <%= (pagination.currentPage - 1) * pagination.limit + 1 %> to <%= Math.min(pagination.currentPage * pagination.limit, pagination.totalProducts) %> of <%= pagination.totalProducts %> products | Page <%= pagination.currentPage %> of <%= pagination.totalPages %></span>
                                    <div class="pagination-buttons">
                                        <button class="page-btn <%= !pagination.hasPrevPage ? 'disabled' : '' %>" onclick="changePage(<%= pagination.currentPage - 1 %>)" <%= !pagination.hasPrevPage ? 'disabled' : '' %>>&lt;</button>
                                        <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                                            <button class="page-btn <%= i === pagination.currentPage ? 'active' : '' %>" onclick="changePage(<%= i %>)"><%= i %></button>
                                        <% } %>
                                        <button class="page-btn <%= !pagination.hasNextPage ? 'disabled' : '' %>" onclick="changePage(<%= pagination.currentPage + 1 %>)" <%= !pagination.hasNextPage ? 'disabled' : '' %>>&gt;</button>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <button class="mobile-filter-btn" id="filterToggle">
        <i class="fas fa-filter"></i>
    </button>

    <div class="filter-modal" id="filterModal">
        <div class="filter-modal-content">
            <div class="filter-modal-header">
                <h5>Filters</h5>
                <button class="close-modal" id="closeModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="popup-message" id="popupMessage">
        <i class="fas fa-check-circle"></i>
        <span id="popupText">Item added to cart!</span>
    </div>

    <!-- footer from partial file -->
    <%-include("../../views/partials/user/footer.ejs")%>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script>
        document.body.classList.add('shop-page');

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

       document.addEventListener('click', (e) => {
    const shopSuggestionsContainer = document.getElementById('shopSearchSuggestions');
    const shopHistoryContainer = document.getElementById('shopSearchHistory');
    const shopSearchContainer = document.querySelector('.shop-search-container');
    
    if (shopSearchContainer && !shopSearchContainer.contains(e.target)) {
        shopSuggestionsContainer.style.display = 'none';
        shopHistoryContainer.style.display = 'none';
    }
});

        // Shop page functionality
        let products = <%- JSON.stringify(products || []) %>;
        let filteredProducts = [...products];
        let shopSearchHistory = JSON.parse(localStorage.getItem('shopSearchHistory') || '[]');
        let searchTimeout;

        // DOM elements
        const shopSearchInput = document.getElementById('shopSearchInput');
        const shopSearchBtn = document.getElementById('shopSearchBtn');
        const shopSearchCancel = document.getElementById('shopSearchCancel');
        const shopSearchHistory_el = document.getElementById('shopSearchHistory');
        const shopSearchSuggestions = document.getElementById('shopSearchSuggestions');
        const productsGrid = document.getElementById('productsGrid');
        const loading = document.getElementById('loading');
        const popupMessage = document.getElementById('popupMessage');
        const popupText = document.getElementById('popupText');
        const activeFilters = document.getElementById('activeFilters');
        const clearFilters = document.getElementById('clearFilters');
        const sortSelect = document.getElementById('sortSelect');
        const filterModal = document.getElementById('filterModal');
        const filterToggle = document.getElementById('filterToggle');
        const closeModal = document.getElementById('closeModal');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            renderProducts();
            setupShopEventListeners();
            setupFilterEventListeners();
            updateClearFiltersVisibility();
            fetchProducts(<%- pagination?.currentPage || 1 %>);
        });

        function setupShopEventListeners() {
            if (!shopSearchInput || !shopSearchBtn || !shopSearchCancel || !shopSearchHistory_el || !shopSearchSuggestions || !sortSelect || !filterModal || !filterToggle || !closeModal) {
        console.error('One or more DOM elements not found');
        return;
    }

            shopSearchInput.addEventListener('focus', showShopSearchHistory);
            shopSearchInput.addEventListener('input', debounce(handleShopSearchInput, 300));
            shopSearchBtn.addEventListener('click', performShopSearch);
            shopSearchCancel.addEventListener('click', cancelSearch);
            
            shopSearchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    performShopSearch();
                }
            });

            sortSelect.addEventListener('change', handleSort);
            clearFilters.addEventListener('click', function(e) {
                e.preventDefault();
                clearAllFilters();
            });

            filterToggle.addEventListener('click', openFilterModal);
            closeModal.addEventListener('click', closeFilterModal);
            filterModal.addEventListener('click', function(e) {
                if (e.target === filterModal) {
                    closeFilterModal();
                }
            });

            // Fix filter group title functionality with proper chevron rotation
            document.querySelectorAll('.filter-group-title').forEach(title => {
                title.addEventListener('click', function() {
                    const icon = this.querySelector('i');
                    const targetId = this.getAttribute('data-bs-target');
                    const targetElement = document.querySelector(targetId);
                    
                    // Update aria-expanded attribute
                    const isExpanded = this.getAttribute('aria-expanded') === 'true';
                    this.setAttribute('aria-expanded', !isExpanded);
                    
                    // Rotate icon based on state
                    if (!isExpanded) {
                        // Will be expanded - point down
                        icon.style.transform = 'rotate(0deg)';
                    } else {
                        // Will be collapsed - point right
                        icon.style.transform = 'rotate(-90deg)';
                    }
                });
            });
        }

        function setupFilterEventListeners() {
            const brandCheckboxes = document.querySelectorAll('#brandFilter input[type="checkbox"]');
            brandCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    applyFilters();
                });
            });

            const categoryCheckboxes = document.querySelectorAll('#categoryFilter input[type="checkbox"]');
            categoryCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    applyFilters();
                });
            });

            const ratingCheckboxes = document.querySelectorAll('#ratingFilter input[type="checkbox"]');
            ratingCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    ratingCheckboxes.forEach(cb => {
                        if (cb !== checkbox) cb.checked = false;
                    });
                    applyFilters();
                });
            });

            document.getElementById('minPrice').addEventListener('input', debounce(applyFilters, 500));
            document.getElementById('maxPrice').addEventListener('input', debounce(applyFilters, 500));
        }

        async function showShopSearchHistory() {
            if (shopSearchHistory.length > 0 && shopSearchInput.value.trim() === '') {
                renderShopSearchHistory();
                shopSearchHistory_el.style.display = 'block';
                shopSearchSuggestions.style.display = 'none';
            } else {
                shopSearchHistory_el.style.display = 'none';
            }
        }

        function renderShopSearchHistory() {
            const historyItems = shopSearchHistory.map(item => `
                <div class="shop-search-history-item" onclick="selectShopSearchTerm('${item.term}')">
                    <img src="${item.image || '/placeholder.svg?height=35&width=35'}" alt="${item.term}" class="history-item-image">
                    <span class="history-item-text">${item.term}</span>
                </div>
            `).join('');
            
            shopSearchHistory_el.innerHTML = historyItems || '<div class="shop-search-history-item">No history available</div>';
        }

       async function handleShopSearchInput() {
            const query = shopSearchInput.value.trim();
            
            if (query.length > 1) {
                showCancelButton();
                try {
                    const response = await fetch(`/products/search-suggestions?q=${encodeURIComponent(query)}`);
                    const data = await response.json();
                    
                    if (data.success && data.suggestions.length > 0) {
                        renderShopSearchSuggestions(data.suggestions);
                        shopSearchSuggestions.style.display = 'block';
                        shopSearchHistory_el.style.display = 'none';
                    } else {
                        shopSearchSuggestions.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error fetching suggestions:', error);
                    shopSearchSuggestions.style.display = 'none';
                }
            } else {
                hideCancelButton();
                hideSearchDropdowns();
                if (query.length === 0) {
                    applyFilters();
                }
            }
        }

       function renderShopSearchSuggestions(suggestions) {
            const suggestionsItems = suggestions.map(item => 
                `<div class="shop-suggestion-item" onclick="selectShopSearchTerm('${item.name}')">
                    <img src="${item.image || '/default-image.jpg'}" alt="${item.name}" class="suggestion-item-image">
                    <div class="suggestion-item-details">
                        <div class="suggestion-item-name">${item.name}</div>
                        <div class="suggestion-item-price">₹${(item.salesPrice || 0).toLocaleString()} - ${item.brand}</div>
                    </div>
                </div>`
            ).join('');
            
            shopSearchSuggestions.innerHTML = suggestionsItems;
        }

        function selectShopSearchTerm(term) {
            shopSearchInput.value = term;
            performShopSearch();
            hideSearchDropdowns();
        }

        function showCancelButton() {
            shopSearchCancel.style.display = 'block';
        }

        function hideCancelButton() {
            shopSearchCancel.style.display = 'none';
        }

        function cancelSearch() {
            shopSearchInput.value = '';
            hideCancelButton();
            hideSearchDropdowns();
            applyFilters();
        }

        function hideSearchDropdowns() {
            shopSearchHistory_el.style.display = 'none';
            shopSearchSuggestions.style.display = 'none';
        }

        async function performShopSearch() {
            const query = shopSearchInput.value.trim();
            if (query) {
                if (!shopSearchHistory.some(item => item.term === query)) {
                shopSearchHistory.unshift({ term: query, image: '/placeholder.svg?height=35&width=35' });
                shopSearchHistory = shopSearchHistory.slice(0, 5);
                localStorage.setItem('shopSearchHistory', JSON.stringify(shopSearchHistory));
            }
            }
            hideSearchDropdowns();
            await applyFilters();
        }

        function buildFilterQuery(page = 1) {
            const queryParams = new URLSearchParams();
            queryParams.set('page', page);
            queryParams.set('limit', <%= pagination?.limit || 12 %>);

            const searchQuery = shopSearchInput.value.trim();
            if (searchQuery) queryParams.set('search', searchQuery);

            const sortValue = sortSelect.value;
            if (sortValue) queryParams.set('sort', sortValue);

           const selectedBrands = Array.from(document.querySelectorAll('#brandFilter input:checked')).map(cb => cb.value);
            if (selectedBrands.length > 0) {
                selectedBrands.forEach(brand => queryParams.append('brand', brand));
            }

            const selectedCategories = Array.from(document.querySelectorAll('#categoryFilter input:checked')).map(cb => cb.value);
            if (selectedCategories.length > 0) {
                selectedCategories.forEach(category => queryParams.append('category', category));
            }

            const selectedRatings = Array.from(document.querySelectorAll('#ratingFilter input:checked')).map(cb => parseInt(cb.value));
            if (selectedRatings.length > 0) queryParams.set('rating', Math.max(...selectedRatings));

            const minPrice = parseFloat(document.getElementById('minPrice').value) || '';
            if (minPrice) queryParams.set('minPrice', minPrice);

            const maxPrice = parseFloat(document.getElementById('maxPrice').value) || '';
            if (maxPrice) queryParams.set('maxPrice', maxPrice);

            return queryParams.toString();
        }

        async function fetchProducts(page = 1) {
            showLoading();
            try {
                const filters = buildFilterQuery(page);
                const response = await fetch(`/products/shop?${filters}`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    filteredProducts = data.products;
                    products = [...filteredProducts];
                    renderProducts();
                    renderPagination(data.pagination);
                    updateURL(filters);
                    hideLoading();
                } else {
                    throw new Error(data.message || "Failed to fetch products");
                }
            } catch (error) {
                console.error('Error fetching products:', error);
                productsGrid.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-exclamation-circle fa-3x text-danger mb-3"></i>
                        <h4>Error loading products</h4>
                        <p class="text-muted">${error.message}</p>
                    </div>
                `;
                hideLoading();
            }
        }

        function updateURL(queryString) {
            const newUrl = `/products/shop?${queryString}`;
            window.history.pushState({}, '', newUrl);
        }

        async function applyFilters() {
            await fetchProducts(1);
            updateActiveFilters();
            updateClearFiltersVisibility();
        }

        function updateActiveFilters() {
            const filters = [];

            const minPrice = document.getElementById('minPrice').value;
            const maxPrice = document.getElementById('maxPrice').value;
            if (minPrice || maxPrice) {
                const priceText = `Price: ₹${minPrice || '0'} - ₹${maxPrice || '∞'}`;
                filters.push({ type: 'price', text: priceText });
            }

            const selectedBrands = Array.from(document.querySelectorAll('#brandFilter input:checked'));
            selectedBrands.forEach(checkbox => {
                filters.push({ type: 'brand', text: `Brand: ${checkbox.nextElementSibling.textContent}`, value: checkbox.value });
            });

            const selectedCategories = Array.from(document.querySelectorAll('#categoryFilter input:checked'));
            selectedCategories.forEach(checkbox => {
                filters.push({ type: 'category', text: `Category: ${checkbox.nextElementSibling.textContent}`, value: checkbox.value });
            });

            const selectedRatings = Array.from(document.querySelectorAll('#ratingFilter input:checked'));
            selectedRatings.forEach(checkbox => {
                const ratingText = checkbox.parentElement.querySelector('.rating-text').textContent;
                filters.push({ type: 'rating', text: `Rating: ${ratingText}`, value: checkbox.value });
            });

            activeFilters.innerHTML = filters.map(filter =>
                `<div class="filter-tag">
                    <span class="filter-tag-text">${filter.text}</span>
                    <i class="fas fa-times remove-filter" onclick="removeFilter('${filter.type}', '${filter.value || ''}')"></i>
                </div>`
            ).join('');
        }

        function removeFilter(type, value) {
            if (type === 'price') {
                document.getElementById('minPrice').value = '';
                document.getElementById('maxPrice').value = '';
            } else if (type === 'brand') {
                document.getElementById(`brand-${value}`).checked = false;
            } else if (type === 'category') {
                document.getElementById(`category-${value}`).checked = false;
            } else if (type === 'rating') {
                document.getElementById(`rating${value}`).checked = false;
            }
            applyFilters();
        }

        function clearAllFilters() {
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
            document.getElementById('minPrice').value = '';
            document.getElementById('maxPrice').value = '';
            shopSearchInput.value = '';
            sortSelect.value = 'newest';
            hideCancelButton();
            applyFilters();
        }

        function updateClearFiltersVisibility() {
            const hasActiveFilters =
                document.querySelectorAll('input[type="checkbox"]:checked').length > 0 ||
                document.getElementById('minPrice').value ||
                document.getElementById('maxPrice').value ||
                shopSearchInput.value.trim();

            if (hasActiveFilters) {
                clearFilters.classList.add('show');
            } else {
                clearFilters.classList.remove('show');
            }
        }

        function handleSort() {
            applyFilters();
        }

        function renderProducts(productsToRender = filteredProducts) {
             console.log('Products to render:', productsToRender); // Add this line
    console.log('First product ID:', productsToRender[0]?._id);
            if (!productsToRender || productsToRender.length === 0) {
                productsGrid.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h4>No products found</h4>
                        <p class="text-muted">Try adjusting your filters or search terms</p>
                    </div>
                `;
                return;
            }

            productsGrid.innerHTML = productsToRender.map(product => {
                const stars = Array.from({length: 5}, (_, i) =>
                    i < Math.floor(product.averageRating || 0) ? '<i class="fas fa-star"></i>' : '<i class="far fa-star"></i>'
                ).join('');

                const imageUrl = product.activeVariant?.images?.[0]?.url || '/default-image.jpg';

                return `
                    <div class="product-card" onclick="window.location.href='/products/details/${product._id}'" style="cursor: pointer;">
                        <div class="product-image">
                            <img src="${imageUrl}" alt="${product.name}" loading="lazy">
                            <button class="wishlist-btn" onclick="event.stopPropagation(); toggleWishlist('${product._id}')">
                                <i class="far fa-heart"></i>
                            </button>
                        </div>
                        <div class="product-info">
                            <div class="product-brand">${product.brand.name.toUpperCase()}</div>
                            <h6 class="product-name">${product.name}</h6>
                            <div class="product-rating">
                                <div class="stars">${stars}</div>
                                <span class="rating-text">(${(product.averageRating || 0).toFixed(1)})</span>
                            </div>
                            ${product.activeVariant.regularPrice > product.activeVariant.salesPrice ?
                                `<div class="discount-badge">${Math.round(((product.activeVariant.regularPrice - product.activeVariant.salesPrice) / product.activeVariant.regularPrice) * 100)}% off</div>` : ''}
                            <div class="product-price">
                                <div>
                                    <span class="price-current">₹${(product.activeVariant.salesPrice || 0).toLocaleString()}</span>
                                    ${product.activeVariant.regularPrice > product.activeVariant.salesPrice ?
                                        `<span class="price-original">₹${product.activeVariant.regularPrice.toLocaleString()}</span>` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        

        function showPopup(message, type = 'success') {
            popupText.textContent = message;
            popupMessage.className = `popup-message ${type}`;
            popupMessage.classList.add('show');
            setTimeout(() => {
                popupMessage.classList.remove('show');
            }, 3000);
        }

        function showLoading() {
            loading.style.display = 'block';
            productsGrid.style.opacity = '0.5';
        }

        function hideLoading() {
            loading.style.display = 'none';
            productsGrid.style.opacity = '1';
        }

        function openFilterModal() {
            const filterContent = document.querySelector('.filter-section').cloneNode(true);
            const modalContent = document.querySelector('.filter-modal-content');
            modalContent.appendChild(filterContent);
            filterModal.classList.add('show');
            filterModal.style.display = 'block';
            setupFilterEventListeners();
            updateActiveFilters();
            updateClearFiltersVisibility();
        }

        function closeFilterModal() {
            filterModal.classList.remove('show');
            setTimeout(() => {
                filterModal.style.display = 'none';
                const clonedFilter = document.querySelector('.filter-modal-content .filter-section');
                if (clonedFilter) {
                    clonedFilter.remove();
                }
            }, 300);
        }

        function renderPagination(pagination) {
            const paginationEl = document.getElementById('pagination');
            if (!pagination) return;

            const totalItems = pagination.totalProducts || 0;
            const itemsPerPage = pagination.limit || 12;
            const currentPage = pagination.currentPage || 1;
            const totalPages = pagination.totalPages || 1;
            const startItem = (currentPage - 1) * itemsPerPage + 1;
            const endItem = Math.min(currentPage * itemsPerPage, totalItems);

            paginationEl.innerHTML = `
                <div class="pagination-custom">
                    <span>Showing ${startItem} to ${endItem} of ${totalItems} products | Page ${currentPage} of ${totalPages}</span>
                    <div class="pagination-buttons">
                        <button class="page-btn ${!pagination.hasPrevPage ? 'disabled' : ''}" onclick="changePage(${currentPage - 1})" ${!pagination.hasPrevPage ? 'disabled' : ''}>
                            &lt;
                        </button>
                        ${Array.from({length: totalPages}, (_, i) => `
                            <button class="page-btn ${i + 1 === currentPage ? 'active' : ''}" onclick="changePage(${i + 1})">
                                ${i + 1}
                            </button>
                        `).join('')}
                        <button class="page-btn ${!pagination.hasNextPage ? 'disabled' : ''}" onclick="changePage(${currentPage + 1})" ${!pagination.hasNextPage ? 'disabled' : ''}>
                            &gt;
                        </button>
                    </div>
                </div>
            `;
        }

     async function changePage(page) {
    if (page < 1) return;
    
    // Scroll to top of products area (accounting for fixed header)
    window.scrollTo({
        top: 40, // Adjust this value based on your header height
        behavior: 'smooth'
    });
    
    await fetchProducts(page);
}

        function toggleWishlist(productId) {
            // Placeholder function - you'll implement this later
            console.log('Toggle wishlist for product:', productId);
            // You can add a visual feedback here for now
            showPopup('Wishlist feature coming soon!', 'info');
        }
    </script>
</body>
</html>