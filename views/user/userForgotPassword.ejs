<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Forgot Password</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/user/css/forgotPassword.css">
    
  </head>
  <body>
    <!-- Toast Container -->
    <div class="toast-container"></div>

    <div class="forgot-password-container">
      <!-- Step 1: Email/Phone Input -->
      <div class="step active" id="step1">
        <h2>Forgot Password ?</h2>
        <form id="emailForm">
          <div class="mb-3">
            <label for="emailPhone" class="form-label">Email Id or Phone No</label>
            <input
              type="text"
              name="emailOrPhone"
              class="form-control"
              id="emailPhone"
              placeholder="Enter your email or phone number"
              required
            />
          </div>
          <button type="submit" class="btn btn-primary w-100">
            <span class="btn-text">Send</span>
          </button>
        </form>
        <a href="/signIn" class="back-link">
          <i class="fas fa-arrow-left"></i> Back to signin
        </a>
      </div>

      <!-- Step 2: OTP Verification -->
      <div class="step" id="step2">
        <h2>Enter OTP</h2>
        <p class="text-muted mb-3">
          We've sent a verification code to <span id="sentTo"></span>
        </p>

        <form id="otpForm">
          <div class="otp-container">
            <div class="paste-indicator" id="pasteIndicator">Pasted!</div>
            <input type="text" class="otp-input" maxlength="1" data-index="0" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" data-index="1" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" data-index="2" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" data-index="3" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" data-index="4" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" data-index="5" inputmode="numeric" />
          </div>

          <div class="timer" id="timer">Time remaining: 01:00</div>

          <button type="submit" class="btn btn-primary w-100 mb-3">
            <span class="btn-text">Verify</span>
          </button>

          <p class="text-muted text-center">
            Didn't receive the code?
            <a href="#" class="resend-link" id="resendLink">Resend OTP</a>
          </p>
        </form>

        <a href="#" class="back-link" onclick="goToStep(1)">
          <i class="fas fa-arrow-left"></i> Back to email
        </a>
      </div>

      <!-- Step 3: New Password -->
      <div class="step" id="step3">
        <h2>Reset Password</h2>
        <p class="text-muted mb-3">Create a new password for your account</p>

        <form id="passwordForm">
          <div class="mb-3">
            <label for="newPassword" class="form-label">New Password</label>
            <div class="password-input-container">
              <input
                type="password"
                name="password"
                class="form-control"
                id="newPassword"
                placeholder="Enter new password"
                required
              />
              <button
                type="button"
                class="password-toggle"
                onclick="togglePassword('newPassword')"
              >
                <i class="fas fa-eye" id="newPasswordIcon"></i>
              </button>
            </div>
            <div class="password-requirements" id="passwordRequirements" style="display: none">
              <div class="requirement" id="lengthReq">
                <i class="fas fa-times"></i>
                <span>At least 8 characters</span>
              </div>
              <div class="requirement" id="uppercaseReq">
                <i class="fas fa-times"></i>
                <span>One uppercase letter</span>
              </div>
              <div class="requirement" id="lowercaseReq">
                <i class="fas fa-times"></i>
                <span>One lowercase letter</span>
              </div>
              <div class="requirement" id="numberReq">
                <i class="fas fa-times"></i>
                <span>One number</span>
              </div>
            </div>
            <div class="password-strength">
              <div class="strength-bar">
                <div class="strength-fill" id="strengthFill"></div>
              </div>
              <small class="text-muted" id="strengthText">Password strength</small>
            </div>
          </div>

          <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <div class="password-input-container">
              <input
                type="password"
                name="confirmPassword"
                class="form-control"
                id="confirmPassword"
                placeholder="Confirm new password"
                required
              />
              <button
                type="button"
                class="password-toggle"
                onclick="togglePassword('confirmPassword')"
              >
                <i class="fas fa-eye" id="confirmPasswordIcon"></i>
              </button>
            </div>
          </div>

          <button type="submit" class="btn btn-primary w-100" id="resetPasswordBtn">
            <span class="btn-text">Reset Password</span>
          </button>
        </form>
      </div>

      <!-- Step 4: Success -->
      <div class="step" id="step4">
        <div class="text-center">
          <i class="fas fa-check-circle text-success" style="font-size: 4rem; margin-bottom: 20px"></i>
          <h2>Password Reset Successful!</h2>
          <p class="text-muted mb-4">
            Your password has been successfully reset. You can now login with your new password.
          </p>
          <a href="/signIn" class="btn btn-primary">
            <i class="fas fa-sign-in-alt"></i> Go to Login
          </a>
        </div>
      </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      let currentStep = 1;
      let otpTimer;
      let timeLeft = 60;

      // Password visibility toggle function
      function togglePassword(fieldId) {
        const passwordField = document.getElementById(fieldId);
        const icon = document.getElementById(fieldId + "Icon");

        if (passwordField.type === "password") {
          passwordField.type = "text";
          icon.classList.remove("fa-eye");
          icon.classList.add("fa-eye-slash");
        } else {
          passwordField.type = "password";
          icon.classList.remove("fa-eye-slash");
          icon.classList.add("fa-eye");
        }
      }

      // Password requirements checker
      function checkPasswordRequirements(password) {
        const requirements = {
          length: password.length >= 8,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /[0-9]/.test(password),
        };

        // Update requirement indicators
        updateRequirement("lengthReq", requirements.length);
        updateRequirement("uppercaseReq", requirements.uppercase);
        updateRequirement("lowercaseReq", requirements.lowercase);
        updateRequirement("numberReq", requirements.number);

        // Show/hide requirements panel
        const requirementsPanel = document.getElementById("passwordRequirements");
        if (password.length > 0) {
          requirementsPanel.style.display = "block";
        } else {
          requirementsPanel.style.display = "none";
        }

        // Return if all requirements are met
        return Object.values(requirements).every((req) => req);
      }

      function updateRequirement(elementId, isValid) {
        const element = document.getElementById(elementId);
        const icon = element.querySelector("i");

        if (isValid) {
          element.classList.remove("invalid");
          element.classList.add("valid");
          icon.classList.remove("fa-times");
          icon.classList.add("fa-check");
        } else {
          element.classList.remove("valid");
          element.classList.add("invalid");
          icon.classList.remove("fa-check");
          icon.classList.add("fa-times");
        }
      }

      // Toast notification function
      function showToast(message, type = "error") {
        const toastContainer = document.querySelector(".toast-container");
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.innerHTML = `
          <div class="toast-body d-flex align-items-center">
            <i class="fas ${type === "success" ? "fa-check-circle text-success" : "fa-exclamation-triangle text-danger"} me-2"></i>
            ${message}
          </div>
        `;

        toastContainer.appendChild(toast);

        // Auto remove after 4 seconds
        setTimeout(() => {
          toast.remove();
        }, 4000);
      }

      // Step navigation
      function goToStep(step) {
        document.querySelectorAll(".step").forEach((s) => s.classList.remove("active"));
        document.getElementById(`step${step}`).classList.add("active");
        currentStep = step;
        
        // Focus on appropriate input when changing steps
        if (step === 1) {
          setTimeout(() => document.getElementById("emailPhone").focus(), 100);
        } else if (step === 2) {
          setTimeout(() => document.querySelectorAll(".otp-input")[0].focus(), 100);
        } else if (step === 3) {
          setTimeout(() => document.getElementById("newPassword").focus(), 100);
        }
      }

      // Email/Phone form validation
      document.getElementById("emailForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const emailPhone = document.getElementById("emailPhone").value.trim();

        if (!emailPhone) {
          showToast("Please enter your email or phone number");
          return;
        }

        // Basic validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const phoneRegex = /^[\+]?[1-9][\d]{9,15}$/;

        if (!emailRegex.test(emailPhone) && !phoneRegex.test(emailPhone)) {
          showToast("Please enter a valid email or phone number");
          return;
        }

        // Show loading
        const btn = this.querySelector("button");
        const btnText = btn.querySelector(".btn-text");
        btnText.innerHTML = '<span class="loading"></span>Sending...';
        btn.disabled = true;

        try {
          const response = await fetch("/changePassword", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              emailOrPhone: emailPhone,
              step: "send-otp",
            }),
          });

          const result = await response.json();

          if (result.success) {
            document.getElementById("sentTo").textContent = emailPhone;
            goToStep(2);
            startOtpTimer();
            showToast(result.message, "success");
          } else {
            showToast(result.message);
          }
        } catch (error) {
          console.error("Error:", error);
          showToast("Network error. Please try again.");
        } finally {
          // Reset button
          btnText.textContent = "Send";
          btn.disabled = false;
        }
      });

      // Enhanced OTP input handling
      document.querySelectorAll(".otp-input").forEach((input, index) => {
        // Only allow numeric input
        input.addEventListener("input", function (e) {
          // Remove any non-numeric characters
          this.value = this.value.replace(/[^0-9]/g, "");

          if (e.target.value.length === 1) {
            if (index < 5) {
              document.querySelectorAll(".otp-input")[index + 1].focus();
            }
          }
        });

        input.addEventListener("keydown", function (e) {
          // Allow backspace, delete, tab, escape, enter
          if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
              // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
              (e.keyCode === 65 && e.ctrlKey === true) ||
              (e.keyCode === 67 && e.ctrlKey === true) ||
              (e.keyCode === 86 && e.ctrlKey === true) ||
              (e.keyCode === 88 && e.ctrlKey === true)) {
            return;
          }

          // Ensure that it is a number and stop the keypress
          if ((e.shiftKey || e.keyCode < 48 || e.keyCode > 57) &&
              (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
          }

          if (e.key === "Backspace" && e.target.value === "" && index > 0) {
            document.querySelectorAll(".otp-input")[index - 1].focus();
          }
        });

        // Handle paste functionality
        input.addEventListener("paste", function (e) {
          e.preventDefault();
          const pastedData = e.clipboardData.getData("text");
          const numericData = pastedData.replace(/[^0-9]/g, "");

          if (numericData.length >= 6) {
            // Fill all OTP inputs
            const otpInputs = document.querySelectorAll(".otp-input");
            for (let i = 0; i < 6 && i < numericData.length; i++) {
              otpInputs[i].value = numericData[i];
            }

            // Focus on the last filled input
            const lastIndex = Math.min(5, numericData.length - 1);
            otpInputs[lastIndex].focus();

            // Show paste indicator
            const pasteIndicator = document.getElementById("pasteIndicator");
            pasteIndicator.classList.add("show");
            setTimeout(() => {
              pasteIndicator.classList.remove("show");
            }, 1500);

            showToast("OTP pasted successfully!", "success");
          }
        });
      });

      // OTP form validation and submission
      document.getElementById("otpForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const otpInputs = document.querySelectorAll(".otp-input");
        const otp = Array.from(otpInputs).map((input) => input.value).join("");

        if (otp.length !== 6) {
          showToast("Please enter the complete 6-digit OTP");
          // Focus on first empty OTP input
          const firstEmpty = Array.from(otpInputs).find(input => !input.value);
          if (firstEmpty) {
            firstEmpty.focus();
          }
          return;
        }

        // Validate that all characters are numeric
        if (!/^\d{6}$/.test(otp)) {
          showToast("OTP must contain only numbers");
          return;
        }

        // Show loading
        const btn = this.querySelector("button");
        const btnText = btn.querySelector(".btn-text");
        btnText.innerHTML = '<span class="loading"></span>Verifying...';
        btn.disabled = true;

        try {
          const response = await fetch("/changePassword", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              otp: otp,
              step: "verify-otp",
            }),
          });

          const result = await response.json();

          if (result.success) {
            clearInterval(otpTimer);
            goToStep(3);
            showToast(result.message, "success");
          } else {
            showToast(result.message);
            // Clear OTP inputs on error so user can re-enter
            otpInputs.forEach((input) => {
              input.value = "";
            });
            otpInputs[0].focus();
          }
        } catch (error) {
          console.error("Error:", error);
          showToast("Network error. Please try again.");
        } finally {
          // Reset button
          btnText.textContent = "Verify";
          btn.disabled = false;
        }
      });

      // OTP Timer
      function startOtpTimer() {
        timeLeft = 60;
        const timerElement = document.getElementById("timer");
        const resendLink = document.getElementById("resendLink");

        resendLink.classList.add("disabled");

        otpTimer = setInterval(() => {
          const minutes = Math.floor(timeLeft / 60);
          const seconds = timeLeft % 60;
          timerElement.textContent = `Time remaining: ${minutes.toString().padStart(1, "0")}:${seconds.toString().padStart(2, "0")}`;

          if (timeLeft <= 0) {
            clearInterval(otpTimer);
            timerElement.textContent = "OTP expired";
            resendLink.classList.remove("disabled");
          }

          timeLeft--;
        }, 1000);
      }

      // Resend OTP
      document.getElementById("resendLink").addEventListener("click", async function (e) {
        e.preventDefault();
        if (!this.classList.contains("disabled")) {
          try {
            const response = await fetch("/resendOTPResetPassword", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            });

            const result = await response.json();

            if (result.success) {
              startOtpTimer();
              showToast(result.message, "success");

              // Clear OTP inputs
              document.querySelectorAll(".otp-input").forEach((input) => {
                input.value = "";
              });
              document.querySelectorAll(".otp-input")[0].focus();
            } else {
              showToast(result.message);
            }
          } catch (error) {
            console.error("Error:", error);
            showToast("Network error. Please try again.");
          }
        }
      });

      // Password strength checker
      function checkPasswordStrength(password) {
        let strength = 0;
        let feedback = "";

        const hasLength = password.length >= 8;
        const hasLower = /[a-z]/.test(password);
        const hasUpper = /[A-Z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSpecial = /[^A-Za-z0-9]/.test(password);

        if (hasLength) strength++;
        if (hasLower) strength++;
        if (hasUpper) strength++;
        if (hasNumber) strength++;
        if (hasSpecial) strength++;

        const strengthFill = document.getElementById("strengthFill");
        const strengthText = document.getElementById("strengthText");

        switch (strength) {
          case 0:
          case 1:
            strengthFill.className = "strength-fill strength-weak";
            feedback = "Weak password";
            break;
          case 2:
            strengthFill.className = "strength-fill strength-fair";
            feedback = "Fair password";
            break;
          case 3:
          case 4:
            strengthFill.className = "strength-fill strength-good";
            feedback = "Good password";
            break;
          case 5:
            strengthFill.className = "strength-fill strength-strong";
            feedback = "Strong password";
            break;
        }

        strengthText.textContent = feedback;
        return strength;
      }

      // Password input handling
      document.getElementById("newPassword").addEventListener("input", function () {
        checkPasswordStrength(this.value);
        checkPasswordRequirements(this.value);
      });

      // Password form validation and submission
      document.getElementById("passwordForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const newPassword = document.getElementById("newPassword").value;
        const confirmPassword = document.getElementById("confirmPassword").value;

        // Validation checks
        if (!newPassword) {
          showToast("Please enter a new password");
          document.getElementById("newPassword").focus();
          return;
        }

        if (newPassword.length < 8) {
          showToast("Password must be at least 8 characters long");
          document.getElementById("newPassword").focus();
          return;
        }

        if (!confirmPassword) {
          showToast("Please confirm your password");
          document.getElementById("confirmPassword").focus();
          return;
        }

        if (newPassword !== confirmPassword) {
          showToast("Passwords do not match");
          document.getElementById("confirmPassword").focus();
          return;
        }

        // Show loading
        const btn = document.getElementById("resetPasswordBtn");
        const btnText = btn.querySelector(".btn-text");
        const originalText = btnText.textContent;
        btnText.innerHTML = '<span class="loading"></span>Resetting...';
        btn.disabled = true;

        try {
          const response = await fetch("/changePassword", {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              password: newPassword,
              step: "reset-password",
            }),
          });

          const result = await response.json();

          if (result.success) {
            goToStep(4);
            showToast(result.message, "success");
          } else {
            showToast(result.message);
          }
        } catch (error) {
          console.error("Error:", error);
          showToast("Network error. Please try again.");
        } finally {
          // Reset button
          btnText.textContent = originalText;
          btn.disabled = false;
        }
      });

      // Initialize on page load
      document.addEventListener("DOMContentLoaded", function () {
        // Focus on first input
        document.getElementById("emailPhone").focus();
        
        // Initialize step 1 as active
        goToStep(1);
      });
    </script>
  </body>
</html>