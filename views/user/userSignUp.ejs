<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Create Account</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
    rel="stylesheet"/>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/user/css/signUp.css">
  
  
</head>
<body>

  <div class="form-container">
    <h2>Create Account</h2>

    <!-- Google Sign-Up Button -->
    <a href="/auth/google" class="google-btn">
      <img src="/user/images/google logo.svg" alt="Google" />
      Sign Up with Google
    </a>

    <form method="post" action="/signUp" id="signupForm" novalidate>
      <div class="mb-3">
        <label for="fullName" class="form-label">Full Name</label>
        <input type="text" class="form-control" id="fullName" name="fullName" />
        <div class="field-feedback" id="fullNameFeedback"></div>
      </div>
      
      <div class="mb-3">
        <label for="email" class="form-label">Email Id</label>
        <input type="email" class="form-control" id="email" name="email" />
        <div class="field-feedback" id="emailFeedback"></div>
      </div>
      
      <div class="mb-3">
        <label for="phone" class="form-label">Phone No</label>
        <input type="tel" class="form-control" id="phone" name="phone" maxlength="10" />
        <div class="field-feedback" id="phoneFeedback"></div>
      </div>
      
      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <div class="password-input-container">
          <input type="password" class="form-control" id="password" name="password" />
          <button type="button" class="password-toggle" onclick="togglePassword('password')">
            <i class="fas fa-eye" id="passwordIcon"></i>
          </button>
        </div>
        <div class="field-feedback" id="passwordFeedback"></div>
        <div class="password-requirements" id="passwordRequirements" style="display: none;">
          <div class="requirement" id="lengthReq">
            <i class="fas fa-times"></i>
            <span>At least 8 characters</span>
          </div>
          <div class="requirement" id="uppercaseReq">
            <i class="fas fa-times"></i>
            <span>One uppercase letter</span>
          </div>
          <div class="requirement" id="lowercaseReq">
            <i class="fas fa-times"></i>
            <span>One lowercase letter</span>
          </div>
          <div class="requirement" id="numberReq">
            <i class="fas fa-times"></i>
            <span>One number</span>
          </div>
        </div>
      </div>
      
      <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <div class="password-input-container">
          <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" />
          <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
            <i class="fas fa-eye" id="confirmPasswordIcon"></i>
          </button>
        </div>
        <div class="field-feedback" id="confirmPasswordFeedback"></div>
      </div>
      
      <button type="submit" class="btn btn-custom" id="submitBtn">
        <span class="loading-spinner" id="loadingSpinner"></span>
        <span id="submitText">Sign Up</span>
      </button>
    </form>

    <div class="login-link">
      Already have an account? <a href="/signIn">Login</a>
    </div>
  </div>

  <script>
    // Password visibility toggle function
    function togglePassword(fieldId) {
      const passwordField = document.getElementById(fieldId);
      const icon = document.getElementById(fieldId + 'Icon');
      
      if (passwordField.type === 'password') {
        passwordField.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
      } else {
        passwordField.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
      }
    }

    // Password requirements checker
    function checkPasswordRequirements(password) {
      const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /[0-9]/.test(password)
      };

      // Update requirement indicators
      updateRequirement('lengthReq', requirements.length);
      updateRequirement('uppercaseReq', requirements.uppercase);
      updateRequirement('lowercaseReq', requirements.lowercase);
      updateRequirement('numberReq', requirements.number);

      // Show/hide requirements panel
      const requirementsPanel = document.getElementById('passwordRequirements');
      if (password.length > 0) {
        requirementsPanel.style.display = 'block';
      } else {
        requirementsPanel.style.display = 'none';
      }

      // Return if all requirements are met
      return Object.values(requirements).every(req => req);
    }

    function updateRequirement(elementId, isValid) {
      const element = document.getElementById(elementId);
      const icon = element.querySelector('i');
      
      if (isValid) {
        element.classList.remove('invalid');
        element.classList.add('valid');
        icon.classList.remove('fa-times');
        icon.classList.add('fa-check');
      } else {
        element.classList.remove('valid');
        element.classList.add('invalid');
        icon.classList.remove('fa-check');
        icon.classList.add('fa-times');
      }
    }

    // Custom Alert Function
    function showAlert(message, type = 'error') {
      // Remove existing alerts
      const existingAlert = document.querySelector('.custom-alert');
      if (existingAlert) {
        existingAlert.remove();
      }

      // Create new alert
      const alert = document.createElement('div');
      alert.className = `custom-alert ${type}`;
      alert.innerHTML = `
        <button class="close-btn" onclick="this.parentElement.remove()">&times;</button>
        <strong>${type === 'error' ? 'Error!' : 'Warning!'}</strong> ${message}
      `;

      document.body.appendChild(alert);

      // Show alert with animation
      setTimeout(() => alert.classList.add('show'), 100);

      // Auto remove after 5 seconds
      setTimeout(() => {
        if (alert.parentElement) {
          alert.classList.remove('show');
          setTimeout(() => alert.remove(), 300);
        }
      }, 5000);
    }

    // Validation Functions
    function validateField(field, feedbackElement, validationFn, successMessage) {
      const result = validationFn(field.value.trim());
      
      if (result.isValid) {
        field.classList.remove('is-invalid');
        field.classList.add('is-valid');
        feedbackElement.textContent = successMessage;
        feedbackElement.className = 'field-feedback valid';
      } else {
        field.classList.remove('is-valid');
        field.classList.add('is-invalid');
        feedbackElement.textContent = result.message;
        feedbackElement.className = 'field-feedback invalid';
      }
      
      return result.isValid;
    }

    // Individual field validators
    const validators = {
      fullName: (value) => ({
        isValid: value.length >= 2,
        message: value.length === 0 ? 'Full name is required' : 'Full name must be at least 2 characters'
      }),
      
      email: (value) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (value.length === 0) {
          return { isValid: false, message: 'Email is required' };
        }
        return {
          isValid: emailRegex.test(value),
          message: 'Please enter a valid email address'
        };
      },
      
      phone: (value) => {
        const phoneRegex = /^\d{10}$/;
        if (value.length === 0) {
          return { isValid: false, message: 'Phone number is required' };
        }
        if (value.length < 10) {
          return { isValid: false, message: 'Phone number must be exactly 10 digits' };
        }
        if (value.length > 10) {
          return { isValid: false, message: 'Phone number cannot exceed 10 digits' };
        }
        return {
          isValid: phoneRegex.test(value),
          message: 'Phone number must contain only digits'
        };
      },
      
      password: (value) => {
        if (value.length === 0) {
          return { isValid: false, message: 'Password is required' };
        }
        
        const hasAllRequirements = checkPasswordRequirements(value);
        
        if (!hasAllRequirements) {
          return { isValid: false, message: 'Password must meet all requirements above' };
        }
        
        return { isValid: true, message: 'Strong password!' };
      },
      
      confirmPassword: (value) => {
        const password = document.getElementById('password').value;
        if (value.length === 0) {
          return { isValid: false, message: 'Please confirm your password' };
        }
        return {
          isValid: value === password,
          message: 'Passwords do not match'
        };
      }
    };

    // Get form elements
    const form = document.getElementById('signupForm');
    const fields = {
      fullName: document.getElementById('fullName'),
      email: document.getElementById('email'),
      phone: document.getElementById('phone'),
      password: document.getElementById('password'),
      confirmPassword: document.getElementById('confirmPassword')
    };

    const feedbacks = {
      fullName: document.getElementById('fullNameFeedback'),
      email: document.getElementById('emailFeedback'),
      phone: document.getElementById('phoneFeedback'),
      password: document.getElementById('passwordFeedback'),
      confirmPassword: document.getElementById('confirmPasswordFeedback')
    };

    // Phone number input restriction
    fields.phone.addEventListener('input', function(e) {
      // Remove any non-digit characters
      this.value = this.value.replace(/\D/g, '');
      
      // Limit to 10 digits
      if (this.value.length > 10) {
        this.value = this.value.slice(0, 10);
      }
      
      // Validate phone field
      validateField(this, feedbacks.phone, validators.phone, 'Valid phone number');
    });

    // Password field special handling
    fields.password.addEventListener('input', function() {
      checkPasswordRequirements(this.value);
      
      // Re-validate confirm password if it has a value
      if (fields.confirmPassword.value) {
        validateField(fields.confirmPassword, feedbacks.confirmPassword, validators.confirmPassword, 'Passwords match');
      }
    });

    // Real-time validation for all fields
    Object.keys(fields).forEach(fieldName => {
      const field = fields[fieldName];
      const feedback = feedbacks[fieldName];
      
      field.addEventListener('blur', function() {
        const successMessage = {
          fullName: 'Valid name',
          email: 'Valid email address',
          phone: 'Valid phone number',
          password: 'Strong password!',
          confirmPassword: 'Passwords match'
        };
        
        validateField(this, feedback, validators[fieldName], successMessage[fieldName]);
      });

      // Special handling for confirm password
      if (fieldName === 'confirmPassword') {
        fields.password.addEventListener('input', function() {
          if (fields.confirmPassword.value) {
            validateField(fields.confirmPassword, feedbacks.confirmPassword, validators.confirmPassword, 'Passwords match');
          }
        });
      }
    });

    // Form submission validation with loading state
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      let isFormValid = true;
      const missingFields = [];

      // Validate all fields
      Object.keys(fields).forEach(fieldName => {
        const field = fields[fieldName];
        const feedback = feedbacks[fieldName];
        const value = field.value.trim();
        
        if (!value) {
          missingFields.push(fieldName.replace(/([A-Z])/g, ' $1').toLowerCase());
        }
        
        const successMessages = {
          fullName: 'Valid name',
          email: 'Valid email address',
          phone: 'Valid phone number',
          password: 'Strong password!',
          confirmPassword: 'Passwords match'
        };
        
        const fieldIsValid = validateField(field, feedback, validators[fieldName], successMessages[fieldName]);
        if (!fieldIsValid) {
          isFormValid = false;
        }
      });

      // Show alerts for missing fields
      if (missingFields.length > 0) {
        const fieldText = missingFields.length === 1 ? 'field' : 'fields';
        const fieldsList = missingFields.join(', ');
        showAlert(`Please fill in the following ${fieldText}: ${fieldsList}`, 'warning');
        return;
      }

      // Show alert for invalid fields
      if (!isFormValid) {
        showAlert('Please correct the highlighted fields before submitting', 'error');
        return;
      }

      // Show loading state
      const submitBtn = document.getElementById('submitBtn');
      const loadingSpinner = document.getElementById('loadingSpinner');
      const submitText = document.getElementById('submitText');

      submitBtn.disabled = true;
      loadingSpinner.style.display = 'inline-block';
      submitText.textContent = 'Creating Account...';

      // Simulate form submission delay (remove this in production)
      setTimeout(() => {
        // If all validations pass, submit the form
        this.submit();
      }, 1000);
    });

    // Clear validation styles when user starts typing
    Object.values(fields).forEach(field => {
      field.addEventListener('input', function() {
        if (this.classList.contains('is-invalid') || this.classList.contains('is-valid')) {
          // Don't clear validation for phone field as it has special handling
          if (this.id !== 'phone' && this.id !== 'password') {
            this.classList.remove('is-invalid', 'is-valid');
            const feedback = feedbacks[this.id];
            if (feedback) {
              feedback.textContent = '';
              feedback.className = 'field-feedback';
            }
          }
        }
      });
    });
  </script>

</body>
</html>